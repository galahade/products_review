// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package yema.testsubjobdaemon_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_2

@SuppressWarnings("unused")
/**
 * Job: testsubjobdaemon Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.0.0.20150702_1326
 * @status 
 */
public class testsubjobdaemon implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "testsubjobdaemon";
	private final String projectName = "YEMA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					testsubjobdaemon.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(testsubjobdaemon.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tInfiniteLoop_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tInfiniteLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tInfiniteLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tInfiniteLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tInfiniteLoop_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tInfiniteLoop_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tInfiniteLoop_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tInfiniteLoop_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tInfiniteLoop_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tInfiniteLoop_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_YEMA_testsubjobdaemon = new byte[0];
		static byte[] commonByteArray_YEMA_testsubjobdaemon = new byte[0];

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_YEMA_testsubjobdaemon.length) {
					if (length < 1024
							&& commonByteArray_YEMA_testsubjobdaemon.length == 0) {
						commonByteArray_YEMA_testsubjobdaemon = new byte[1024];
					} else {
						commonByteArray_YEMA_testsubjobdaemon = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_YEMA_testsubjobdaemon, 0, length);
				strReturn = new String(commonByteArray_YEMA_testsubjobdaemon,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_YEMA_testsubjobdaemon) {

				try {

					int length = 0;

					this.newColumn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.newColumn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("newColumn=" + newColumn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tInfiniteLoop_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tInfiniteLoop_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tInfiniteLoop_1 begin ] start
				 */

				TalendThreadPool mtp_tJava_1 = new TalendThreadPool(2);

				globalMap.put("lockWrite_tJava_1", new Object[0]);
				int threadIdCounter_tJava_1 = 0;

				int NB_ITERATE_tJava_1 = 0; // for statistics

				ok_Hash.put("tInfiniteLoop_1", false);
				start_Hash.put("tInfiniteLoop_1", System.currentTimeMillis());

				currentComponent = "tInfiniteLoop_1";

				int tos_count_tInfiniteLoop_1 = 0;

				int counter_tInfiniteLoop_1 = 0;
				globalMap.put("tInfiniteLoop_1_CURRENT_ITERATION",
						counter_tInfiniteLoop_1);

				while (counter_tInfiniteLoop_1 > -1) {
					counter_tInfiniteLoop_1++;
					globalMap.put("tInfiniteLoop_1_CURRENT_ITERATION",
							counter_tInfiniteLoop_1);

					/**
					 * [tInfiniteLoop_1 begin ] stop
					 */

					/**
					 * [tInfiniteLoop_1 main ] start
					 */

					currentComponent = "tInfiniteLoop_1";

					tos_count_tInfiniteLoop_1++;

					/**
					 * [tInfiniteLoop_1 main ] stop
					 */
					NB_ITERATE_tJava_1++;

					class tJava_1Thread extends TalendThread {// implements
																// routines.system.TalendThreadPool.PropertySettable
						class ThreadedMap extends
								java.util.HashMap<String, Object> {

							private static final long serialVersionUID = 0L;

							public ThreadedMap(
									java.util.Map<String, Object> globalMap) {
								super(globalMap);
							}

							@Override
							public Object put(String key, Object value) {

								super.put(key, value);
								return testsubjobdaemon.this.globalMap.put(key,
										value);

							}
						}

						private java.util.Map<String, Object> globalMap = null;
						boolean isRunning = false;
						String iterateId = "";

						row1Struct row1 = new row1Struct();

						public tJava_1Thread(
								java.util.Map<String, Object> globalMap,
								row1Struct row1, int threadID) {
							super();

							if (row1 != null) {

								this.row1.newColumn = row1.newColumn;

							}

							synchronized (globalMap) {
								this.globalMap = java.util.Collections
										.synchronizedMap(new ThreadedMap(
												globalMap));

							}
							iterateId = "." + threadID;

						}

						public void run() {

							java.util.Map threadRunResultMap = new java.util.HashMap();
							threadRunResultMap.put("errorCode", null);
							threadRunResultMap.put("status", "");
							threadLocal.set(threadRunResultMap);

							this.isRunning = true;
							String currentComponent = "";
							java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

							try {

								/**
								 * [tRunJob_1 begin ] start
								 */

								ok_Hash.put("tRunJob_1", false);
								start_Hash.put("tRunJob_1",
										System.currentTimeMillis());

								currentComponent = "tRunJob_1";

								int tos_count_tRunJob_1 = 0;

								class DealChildJobLibrary_tRunJob_1 {

									public String replaceJarPathsFromCrcMap(
											String originalClassPathLine)
											throws java.lang.Exception {
										String classPathLine = "";
										String crcMapPath = new java.io.File(
												"../crcMap").getCanonicalPath();
										if (isNeedAddLibsPath(crcMapPath)) {
											java.util.Map<String, String> crcMap = null;
											java.io.ObjectInputStream ois = new ObjectInputStream(
													new java.io.FileInputStream(
															crcMapPath));
											crcMap = (java.util.Map<String, String>) ois
													.readObject();
											ois.close();
											classPathLine = addLibsPath(
													originalClassPathLine,
													crcMap);
										} else {
											classPathLine = originalClassPathLine;
										}
										return classPathLine;
									}

									private boolean isNeedAddLibsPath(
											String crcMapPath) {
										if (!(new java.io.File(crcMapPath)
												.exists())) {// when not use
																// cache
											return false;
										}
										return true;
									}

									private String addLibsPath(String line,
											java.util.Map<String, String> crcMap) {
										for (java.util.Map.Entry<String, String> entry : crcMap
												.entrySet()) {
											line = adaptLibPaths(line, entry);
										}
										return line;
									}

									private String adaptLibPaths(
											String line,
											java.util.Map.Entry<String, String> entry) {
										String jarName = entry.getValue();
										String crc = entry.getKey();
										String libStringFinder = "../lib/"
												+ jarName;
										if (line.contains(libStringFinder)) {
											line = line.replace(
													libStringFinder,
													"../../../cache/lib/" + crc
															+ "/" + jarName);
										} else if (line.contains(":$ROOT_PATH/"
												+ jarName + ":")) {
											line = line.replace(":$ROOT_PATH/"
													+ jarName + ":",
													":$ROOT_PATH/../../../cache/lib/"
															+ crc + "/"
															+ jarName + ":");
										} else if (line.contains(";" + jarName
												+ ";")) {
											line = line.replace(";" + jarName
													+ ";",
													";../../../cache/lib/"
															+ crc + "/"
															+ jarName + ";");
										}
										return line;
									}

								}
								DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

								/**
								 * [tRunJob_1 begin ] stop
								 */

								/**
								 * [tJava_1 begin ] start
								 */

								ok_Hash.put("tJava_1", false);
								start_Hash.put("tJava_1",
										System.currentTimeMillis());

								currentComponent = "tJava_1";

								int tos_count_tJava_1 = 0;

								System.out.println("loading subjob1 ");

								/**
								 * [tJava_1 begin ] stop
								 */

								/**
								 * [tJava_1 main ] start
								 */

								currentComponent = "tJava_1";

								tos_count_tJava_1++;

								/**
								 * [tJava_1 main ] stop
								 */

								/**
								 * [tRunJob_1 main ] start
								 */

								currentComponent = "tRunJob_1";

								java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

								String osName_tRunJob_1 = System
										.getProperty("os.name");
								if (osName_tRunJob_1 != null
										&& osName_tRunJob_1.toLowerCase()
												.startsWith("win")) {

									paraList_tRunJob_1.add("java");

									paraList_tRunJob_1.add("-Xms256M");

									paraList_tRunJob_1.add("-Xmx1024M");

									paraList_tRunJob_1.add("-cp");

									paraList_tRunJob_1
											.add(dealChildJobLibrary_tRunJob_1
													.replaceJarPathsFromCrcMap(".;C:/PFiles/talent/TOS_DI-Win32-20150702_1326-V6.0.0/workspace/.Java;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;test1subjob_0_1.jar"));

									paraList_tRunJob_1
											.add("yema.test1subjob_0_1.test1subjob");

									paraList_tRunJob_1.add("--father_pid="
											+ pid);

									paraList_tRunJob_1.add("--root_pid="
											+ rootPid);

									paraList_tRunJob_1
											.add("--father_node=tRunJob_1");

									paraList_tRunJob_1.add("--context=Default");

									paraList_tRunJob_1.add("%*");

								} else {

									paraList_tRunJob_1.add("java");

									paraList_tRunJob_1.add("-Xms256M");

									paraList_tRunJob_1.add("-Xmx1024M");

									paraList_tRunJob_1.add("-cp");

									paraList_tRunJob_1
											.add(dealChildJobLibrary_tRunJob_1
													.replaceJarPathsFromCrcMap(
															"$ROOT_PATH:C:/PFiles/talent/TOS_DI-Win32-20150702_1326-V6.0.0/workspace/.Java:$ROOT_PATH/../lib/dom4j-1.6.1.jar:$ROOT_PATH/../lib/log4j-1.2.16.jar:$ROOT_PATH/test1subjob_0_1.jar")
													.replace(
															"$ROOT_PATH",
															System.getProperty("user.dir")));

									paraList_tRunJob_1
											.add("yema.test1subjob_0_1.test1subjob");

									paraList_tRunJob_1.add("--father_pid="
											+ pid);

									paraList_tRunJob_1.add("--root_pid="
											+ rootPid);

									paraList_tRunJob_1
											.add("--father_node=tRunJob_1");

									paraList_tRunJob_1.add("--context=Default");

									paraList_tRunJob_1.add("$@");

								}

								// for feature:10589

								paraList_tRunJob_1.add("--stat_port=" + null);

								if (resuming_logs_dir_path != null) {
									paraList_tRunJob_1
											.add("--resuming_logs_dir_path="
													+ resuming_logs_dir_path);
								}
								String childResumePath_tRunJob_1 = ResumeUtil
										.getChildJobCheckPointPath(resuming_checkpoint_path);
								String tRunJobName_tRunJob_1 = ResumeUtil
										.getRighttRunJob(resuming_checkpoint_path);
								if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
										&& childResumePath_tRunJob_1 != null) {
									paraList_tRunJob_1
											.add("--resuming_checkpoint_path="
													+ ResumeUtil
															.getChildJobCheckPointPath(resuming_checkpoint_path));
								}
								paraList_tRunJob_1
										.add("--parent_part_launcher=JOB:"
												+ jobName + "/NODE:tRunJob_1");

								java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

								context.synchronizeContext();
								java.util.Enumeration<?> propertyNames_tRunJob_1 = context
										.propertyNames();
								while (propertyNames_tRunJob_1
										.hasMoreElements()) {
									String key_tRunJob_1 = (String) propertyNames_tRunJob_1
											.nextElement();
									Object value_tRunJob_1 = (Object) context
											.get(key_tRunJob_1);
									paraList_tRunJob_1.add("--context_param "
											+ key_tRunJob_1 + "="
											+ value_tRunJob_1);
								}

								Object obj_tRunJob_1 = null;

								Runtime runtime_tRunJob_1 = Runtime
										.getRuntime();
								final Process ps_tRunJob_1;
								ps_tRunJob_1 = runtime_tRunJob_1
										.exec((String[]) paraList_tRunJob_1
												.toArray(new String[paraList_tRunJob_1
														.size()]));

								Thread normal_tRunJob_1 = new Thread() {
									public void run() {
										try {
											java.io.BufferedReader reader = new java.io.BufferedReader(
													new java.io.InputStreamReader(
															ps_tRunJob_1
																	.getInputStream()));
											String line = "";
											try {
												while ((line = reader
														.readLine()) != null) {
													System.out.println(line);
												}
											} finally {
												reader.close();
											}
										} catch (java.io.IOException ioe) {

											ioe.printStackTrace();
										}
									}
								};

								normal_tRunJob_1.start();

								final StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
								Thread error_tRunJob_1 = new Thread() {
									public void run() {
										try {
											java.io.BufferedReader reader = new java.io.BufferedReader(
													new java.io.InputStreamReader(
															ps_tRunJob_1
																	.getErrorStream()));
											String line = "";
											try {
												while ((line = reader
														.readLine()) != null) {
													errorMsg_tRunJob_1.append(
															line).append("\n");
												}
											} finally {
												reader.close();
											}
										} catch (java.io.IOException ioe) {

											ioe.printStackTrace();
										}
									}
								};
								error_tRunJob_1.start();

								// 0 indicates normal termination
								int result_tRunJob_1 = ps_tRunJob_1.waitFor();
								normal_tRunJob_1.join(10000);
								error_tRunJob_1.join(10000);

								globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
										result_tRunJob_1);
								if (result_tRunJob_1 != 0) {
									globalMap
											.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
													errorMsg_tRunJob_1
															.toString());

									System.err
											.println("Child job returns "
													+ result_tRunJob_1
													+ ". It doesn't terminate normally.\n"
													+ errorMsg_tRunJob_1
															.toString());

								}

								tos_count_tRunJob_1++;

								/**
								 * [tRunJob_1 main ] stop
								 */

								/**
								 * [tJava_1 end ] start
								 */

								currentComponent = "tJava_1";

								ok_Hash.put("tJava_1", true);
								end_Hash.put("tJava_1",
										System.currentTimeMillis());

								/**
								 * [tJava_1 end ] stop
								 */

								/**
								 * [tRunJob_1 end ] start
								 */

								currentComponent = "tRunJob_1";

								ok_Hash.put("tRunJob_1", true);
								end_Hash.put("tRunJob_1",
										System.currentTimeMillis());

								/**
								 * [tRunJob_1 end ] stop
								 */

							} catch (java.lang.Exception e) {
								this.status = "failure";
								Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
										.get()).get("errorCode"));
								if (localErrorCode != null) {
									if (this.errorCode == null
											|| localErrorCode
													.compareTo(this.errorCode) > 0) {
										this.errorCode = localErrorCode;
									}
								}

								TalendException te = new TalendException(e,
										currentComponent, globalMap);

								this.exception = te;
								talendThreadPool.setErrorThread(this);
								talendThreadPool.stopAllWorkers();

							} catch (java.lang.Error error) {
								this.status = "failure";
								Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
										.get()).get("errorCode"));
								if (localErrorCode != null) {
									if (this.errorCode == null
											|| localErrorCode
													.compareTo(this.errorCode) > 0) {
										this.errorCode = localErrorCode;
									}
								}
								this.error = error;
								talendThreadPool.setErrorThread(this);
								talendThreadPool.stopAllWorkers();
							} finally {
								try {

									/**
									 * [tJava_1 finally ] start
									 */

									currentComponent = "tJava_1";

									/**
									 * [tJava_1 finally ] stop
									 */

									/**
									 * [tRunJob_1 finally ] start
									 */

									currentComponent = "tRunJob_1";

									/**
									 * [tRunJob_1 finally ] stop
									 */

								} catch (java.lang.Exception e) {
									// ignore
								} catch (java.lang.Error error) {
									// ignore
								}
								resourceMap = null;
							}
							this.isRunning = false;

							Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
									.get()).get("errorCode"));
							String localStatus = (String) (((java.util.Map) threadLocal
									.get()).get("status"));
							if (localErrorCode != null) {
								if (this.errorCode == null
										|| localErrorCode
												.compareTo(this.errorCode) > 0) {
									this.errorCode = localErrorCode;
								}
							}
							if (!this.status.equals("failure")) {
								this.status = localStatus;
							}

							talendThreadPool.getTalendThreadResult()
									.setErrorCode(this.errorCode);
							talendThreadPool.getTalendThreadResult().setStatus(
									this.status);
						}
					}

					tJava_1Thread bt_tJava_1 = new tJava_1Thread(globalMap,
							row1, threadIdCounter_tJava_1++);
					mtp_tJava_1.execute(bt_tJava_1);

					/**
					 * [tInfiniteLoop_1 end ] start
					 */

					currentComponent = "tInfiniteLoop_1";

					Thread.sleep(10000);
				}

				ok_Hash.put("tInfiniteLoop_1", true);
				end_Hash.put("tInfiniteLoop_1", System.currentTimeMillis());

				mtp_tJava_1.waitForEndOfQueue();

				TalendThread errorThread_tJava_1 = mtp_tJava_1.getErrorThread();

				if (errorThread_tJava_1 != null) {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));

					if (errorThread_tJava_1.errorCode != null) {
						if (localErrorCode == null
								|| errorThread_tJava_1.errorCode
										.compareTo(localErrorCode) > 0) {
							((java.util.Map) threadLocal.get()).put(
									"errorCode", errorThread_tJava_1.errorCode);
						}
					}
					if (!localStatus.equals("failure")) {
						((java.util.Map) threadLocal.get()).put("status",
								errorThread_tJava_1.status);
					}
					if (errorThread_tJava_1.exception != null) {
						throw errorThread_tJava_1.exception;
					}
				} else {
					Integer threadErrorCode = mtp_tJava_1
							.getTalendThreadResult().getErrorCode();
					String threadStatus = mtp_tJava_1.getTalendThreadResult()
							.getStatus();

					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));

					if (threadErrorCode != null) {
						if (localErrorCode == null
								|| threadErrorCode.compareTo(localErrorCode) > 0) {
							((java.util.Map) threadLocal.get()).put(
									"errorCode", threadErrorCode);
						}
					}
					if (!localStatus.equals("failure")) {
						((java.util.Map) threadLocal.get()).put("status",
								threadStatus);
					}
				}

				/**
				 * [tInfiniteLoop_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tInfiniteLoop_1 finally ] start
				 */

				currentComponent = "tInfiniteLoop_1";

				/**
				 * [tInfiniteLoop_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tInfiniteLoop_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_YEMA_testsubjobdaemon = new byte[0];
		static byte[] commonByteArray_YEMA_testsubjobdaemon = new byte[0];

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_YEMA_testsubjobdaemon.length) {
					if (length < 1024
							&& commonByteArray_YEMA_testsubjobdaemon.length == 0) {
						commonByteArray_YEMA_testsubjobdaemon = new byte[1024];
					} else {
						commonByteArray_YEMA_testsubjobdaemon = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_YEMA_testsubjobdaemon, 0, length);
				strReturn = new String(commonByteArray_YEMA_testsubjobdaemon,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_YEMA_testsubjobdaemon) {

				try {

					int length = 0;

					this.newColumn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.newColumn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("newColumn=" + newColumn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tInfiniteLoop_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tInfiniteLoop_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tInfiniteLoop_2 begin ] start
				 */

				TalendThreadPool mtp_tJava_2 = new TalendThreadPool(2);

				globalMap.put("lockWrite_tJava_2", new Object[0]);
				int threadIdCounter_tJava_2 = 0;

				int NB_ITERATE_tJava_2 = 0; // for statistics

				ok_Hash.put("tInfiniteLoop_2", false);
				start_Hash.put("tInfiniteLoop_2", System.currentTimeMillis());

				currentComponent = "tInfiniteLoop_2";

				int tos_count_tInfiniteLoop_2 = 0;

				int counter_tInfiniteLoop_2 = 0;
				globalMap.put("tInfiniteLoop_2_CURRENT_ITERATION",
						counter_tInfiniteLoop_2);

				while (counter_tInfiniteLoop_2 > -1) {
					counter_tInfiniteLoop_2++;
					globalMap.put("tInfiniteLoop_2_CURRENT_ITERATION",
							counter_tInfiniteLoop_2);

					/**
					 * [tInfiniteLoop_2 begin ] stop
					 */

					/**
					 * [tInfiniteLoop_2 main ] start
					 */

					currentComponent = "tInfiniteLoop_2";

					tos_count_tInfiniteLoop_2++;

					/**
					 * [tInfiniteLoop_2 main ] stop
					 */
					NB_ITERATE_tJava_2++;

					class tJava_2Thread extends TalendThread {// implements
																// routines.system.TalendThreadPool.PropertySettable
						class ThreadedMap extends
								java.util.HashMap<String, Object> {

							private static final long serialVersionUID = 0L;

							public ThreadedMap(
									java.util.Map<String, Object> globalMap) {
								super(globalMap);
							}

							@Override
							public Object put(String key, Object value) {

								super.put(key, value);
								return testsubjobdaemon.this.globalMap.put(key,
										value);

							}
						}

						private java.util.Map<String, Object> globalMap = null;
						boolean isRunning = false;
						String iterateId = "";

						row2Struct row2 = new row2Struct();

						public tJava_2Thread(
								java.util.Map<String, Object> globalMap,
								row2Struct row2, int threadID) {
							super();

							if (row2 != null) {

								this.row2.newColumn = row2.newColumn;

							}

							synchronized (globalMap) {
								this.globalMap = java.util.Collections
										.synchronizedMap(new ThreadedMap(
												globalMap));

							}
							iterateId = "." + threadID;

						}

						public void run() {

							java.util.Map threadRunResultMap = new java.util.HashMap();
							threadRunResultMap.put("errorCode", null);
							threadRunResultMap.put("status", "");
							threadLocal.set(threadRunResultMap);

							this.isRunning = true;
							String currentComponent = "";
							java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

							try {

								/**
								 * [tRunJob_2 begin ] start
								 */

								ok_Hash.put("tRunJob_2", false);
								start_Hash.put("tRunJob_2",
										System.currentTimeMillis());

								currentComponent = "tRunJob_2";

								int tos_count_tRunJob_2 = 0;

								class DealChildJobLibrary_tRunJob_2 {

									public String replaceJarPathsFromCrcMap(
											String originalClassPathLine)
											throws java.lang.Exception {
										String classPathLine = "";
										String crcMapPath = new java.io.File(
												"../crcMap").getCanonicalPath();
										if (isNeedAddLibsPath(crcMapPath)) {
											java.util.Map<String, String> crcMap = null;
											java.io.ObjectInputStream ois = new ObjectInputStream(
													new java.io.FileInputStream(
															crcMapPath));
											crcMap = (java.util.Map<String, String>) ois
													.readObject();
											ois.close();
											classPathLine = addLibsPath(
													originalClassPathLine,
													crcMap);
										} else {
											classPathLine = originalClassPathLine;
										}
										return classPathLine;
									}

									private boolean isNeedAddLibsPath(
											String crcMapPath) {
										if (!(new java.io.File(crcMapPath)
												.exists())) {// when not use
																// cache
											return false;
										}
										return true;
									}

									private String addLibsPath(String line,
											java.util.Map<String, String> crcMap) {
										for (java.util.Map.Entry<String, String> entry : crcMap
												.entrySet()) {
											line = adaptLibPaths(line, entry);
										}
										return line;
									}

									private String adaptLibPaths(
											String line,
											java.util.Map.Entry<String, String> entry) {
										String jarName = entry.getValue();
										String crc = entry.getKey();
										String libStringFinder = "../lib/"
												+ jarName;
										if (line.contains(libStringFinder)) {
											line = line.replace(
													libStringFinder,
													"../../../cache/lib/" + crc
															+ "/" + jarName);
										} else if (line.contains(":$ROOT_PATH/"
												+ jarName + ":")) {
											line = line.replace(":$ROOT_PATH/"
													+ jarName + ":",
													":$ROOT_PATH/../../../cache/lib/"
															+ crc + "/"
															+ jarName + ":");
										} else if (line.contains(";" + jarName
												+ ";")) {
											line = line.replace(";" + jarName
													+ ";",
													";../../../cache/lib/"
															+ crc + "/"
															+ jarName + ";");
										}
										return line;
									}

								}
								DealChildJobLibrary_tRunJob_2 dealChildJobLibrary_tRunJob_2 = new DealChildJobLibrary_tRunJob_2();

								/**
								 * [tRunJob_2 begin ] stop
								 */

								/**
								 * [tJava_2 begin ] start
								 */

								ok_Hash.put("tJava_2", false);
								start_Hash.put("tJava_2",
										System.currentTimeMillis());

								currentComponent = "tJava_2";

								int tos_count_tJava_2 = 0;

								System.out.println("loading subjob2 ");

								/**
								 * [tJava_2 begin ] stop
								 */

								/**
								 * [tJava_2 main ] start
								 */

								currentComponent = "tJava_2";

								tos_count_tJava_2++;

								/**
								 * [tJava_2 main ] stop
								 */

								/**
								 * [tRunJob_2 main ] start
								 */

								currentComponent = "tRunJob_2";

								java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

								String osName_tRunJob_2 = System
										.getProperty("os.name");
								if (osName_tRunJob_2 != null
										&& osName_tRunJob_2.toLowerCase()
												.startsWith("win")) {

									paraList_tRunJob_2.add("java");

									paraList_tRunJob_2.add("-Xms256M");

									paraList_tRunJob_2.add("-Xmx1024M");

									paraList_tRunJob_2.add("-cp");

									paraList_tRunJob_2
											.add(dealChildJobLibrary_tRunJob_2
													.replaceJarPathsFromCrcMap(".;C:/PFiles/talent/TOS_DI-Win32-20150702_1326-V6.0.0/workspace/.Java;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;test2subjob_0_1.jar"));

									paraList_tRunJob_2
											.add("yema.test2subjob_0_1.test2subjob");

									paraList_tRunJob_2.add("--father_pid="
											+ pid);

									paraList_tRunJob_2.add("--root_pid="
											+ rootPid);

									paraList_tRunJob_2
											.add("--father_node=tRunJob_2");

									paraList_tRunJob_2.add("--context=Default");

									paraList_tRunJob_2.add("%*");

								} else {

									paraList_tRunJob_2.add("java");

									paraList_tRunJob_2.add("-Xms256M");

									paraList_tRunJob_2.add("-Xmx1024M");

									paraList_tRunJob_2.add("-cp");

									paraList_tRunJob_2
											.add(dealChildJobLibrary_tRunJob_2
													.replaceJarPathsFromCrcMap(
															"$ROOT_PATH:C:/PFiles/talent/TOS_DI-Win32-20150702_1326-V6.0.0/workspace/.Java:$ROOT_PATH/../lib/dom4j-1.6.1.jar:$ROOT_PATH/../lib/log4j-1.2.16.jar:$ROOT_PATH/test2subjob_0_1.jar")
													.replace(
															"$ROOT_PATH",
															System.getProperty("user.dir")));

									paraList_tRunJob_2
											.add("yema.test2subjob_0_1.test2subjob");

									paraList_tRunJob_2.add("--father_pid="
											+ pid);

									paraList_tRunJob_2.add("--root_pid="
											+ rootPid);

									paraList_tRunJob_2
											.add("--father_node=tRunJob_2");

									paraList_tRunJob_2.add("--context=Default");

									paraList_tRunJob_2.add("$@");

								}

								// for feature:10589

								paraList_tRunJob_2.add("--stat_port=" + null);

								if (resuming_logs_dir_path != null) {
									paraList_tRunJob_2
											.add("--resuming_logs_dir_path="
													+ resuming_logs_dir_path);
								}
								String childResumePath_tRunJob_2 = ResumeUtil
										.getChildJobCheckPointPath(resuming_checkpoint_path);
								String tRunJobName_tRunJob_2 = ResumeUtil
										.getRighttRunJob(resuming_checkpoint_path);
								if ("tRunJob_2".equals(tRunJobName_tRunJob_2)
										&& childResumePath_tRunJob_2 != null) {
									paraList_tRunJob_2
											.add("--resuming_checkpoint_path="
													+ ResumeUtil
															.getChildJobCheckPointPath(resuming_checkpoint_path));
								}
								paraList_tRunJob_2
										.add("--parent_part_launcher=JOB:"
												+ jobName + "/NODE:tRunJob_2");

								java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

								context.synchronizeContext();
								java.util.Enumeration<?> propertyNames_tRunJob_2 = context
										.propertyNames();
								while (propertyNames_tRunJob_2
										.hasMoreElements()) {
									String key_tRunJob_2 = (String) propertyNames_tRunJob_2
											.nextElement();
									Object value_tRunJob_2 = (Object) context
											.get(key_tRunJob_2);
									paraList_tRunJob_2.add("--context_param "
											+ key_tRunJob_2 + "="
											+ value_tRunJob_2);
								}

								Object obj_tRunJob_2 = null;

								Runtime runtime_tRunJob_2 = Runtime
										.getRuntime();
								final Process ps_tRunJob_2;
								ps_tRunJob_2 = runtime_tRunJob_2
										.exec((String[]) paraList_tRunJob_2
												.toArray(new String[paraList_tRunJob_2
														.size()]));

								Thread normal_tRunJob_2 = new Thread() {
									public void run() {
										try {
											java.io.BufferedReader reader = new java.io.BufferedReader(
													new java.io.InputStreamReader(
															ps_tRunJob_2
																	.getInputStream()));
											String line = "";
											try {
												while ((line = reader
														.readLine()) != null) {
													System.out.println(line);
												}
											} finally {
												reader.close();
											}
										} catch (java.io.IOException ioe) {

											ioe.printStackTrace();
										}
									}
								};

								normal_tRunJob_2.start();

								final StringBuffer errorMsg_tRunJob_2 = new StringBuffer();
								Thread error_tRunJob_2 = new Thread() {
									public void run() {
										try {
											java.io.BufferedReader reader = new java.io.BufferedReader(
													new java.io.InputStreamReader(
															ps_tRunJob_2
																	.getErrorStream()));
											String line = "";
											try {
												while ((line = reader
														.readLine()) != null) {
													errorMsg_tRunJob_2.append(
															line).append("\n");
												}
											} finally {
												reader.close();
											}
										} catch (java.io.IOException ioe) {

											ioe.printStackTrace();
										}
									}
								};
								error_tRunJob_2.start();

								// 0 indicates normal termination
								int result_tRunJob_2 = ps_tRunJob_2.waitFor();
								normal_tRunJob_2.join(10000);
								error_tRunJob_2.join(10000);

								globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
										result_tRunJob_2);
								if (result_tRunJob_2 != 0) {
									globalMap
											.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
													errorMsg_tRunJob_2
															.toString());

									System.err
											.println("Child job returns "
													+ result_tRunJob_2
													+ ". It doesn't terminate normally.\n"
													+ errorMsg_tRunJob_2
															.toString());

								}

								tos_count_tRunJob_2++;

								/**
								 * [tRunJob_2 main ] stop
								 */

								/**
								 * [tJava_2 end ] start
								 */

								currentComponent = "tJava_2";

								ok_Hash.put("tJava_2", true);
								end_Hash.put("tJava_2",
										System.currentTimeMillis());

								/**
								 * [tJava_2 end ] stop
								 */

								/**
								 * [tRunJob_2 end ] start
								 */

								currentComponent = "tRunJob_2";

								ok_Hash.put("tRunJob_2", true);
								end_Hash.put("tRunJob_2",
										System.currentTimeMillis());

								/**
								 * [tRunJob_2 end ] stop
								 */

							} catch (java.lang.Exception e) {
								this.status = "failure";
								Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
										.get()).get("errorCode"));
								if (localErrorCode != null) {
									if (this.errorCode == null
											|| localErrorCode
													.compareTo(this.errorCode) > 0) {
										this.errorCode = localErrorCode;
									}
								}

								TalendException te = new TalendException(e,
										currentComponent, globalMap);

								this.exception = te;
								talendThreadPool.setErrorThread(this);
								talendThreadPool.stopAllWorkers();

							} catch (java.lang.Error error) {
								this.status = "failure";
								Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
										.get()).get("errorCode"));
								if (localErrorCode != null) {
									if (this.errorCode == null
											|| localErrorCode
													.compareTo(this.errorCode) > 0) {
										this.errorCode = localErrorCode;
									}
								}
								this.error = error;
								talendThreadPool.setErrorThread(this);
								talendThreadPool.stopAllWorkers();
							} finally {
								try {

									/**
									 * [tJava_2 finally ] start
									 */

									currentComponent = "tJava_2";

									/**
									 * [tJava_2 finally ] stop
									 */

									/**
									 * [tRunJob_2 finally ] start
									 */

									currentComponent = "tRunJob_2";

									/**
									 * [tRunJob_2 finally ] stop
									 */

								} catch (java.lang.Exception e) {
									// ignore
								} catch (java.lang.Error error) {
									// ignore
								}
								resourceMap = null;
							}
							this.isRunning = false;

							Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
									.get()).get("errorCode"));
							String localStatus = (String) (((java.util.Map) threadLocal
									.get()).get("status"));
							if (localErrorCode != null) {
								if (this.errorCode == null
										|| localErrorCode
												.compareTo(this.errorCode) > 0) {
									this.errorCode = localErrorCode;
								}
							}
							if (!this.status.equals("failure")) {
								this.status = localStatus;
							}

							talendThreadPool.getTalendThreadResult()
									.setErrorCode(this.errorCode);
							talendThreadPool.getTalendThreadResult().setStatus(
									this.status);
						}
					}

					tJava_2Thread bt_tJava_2 = new tJava_2Thread(globalMap,
							row2, threadIdCounter_tJava_2++);
					mtp_tJava_2.execute(bt_tJava_2);

					/**
					 * [tInfiniteLoop_2 end ] start
					 */

					currentComponent = "tInfiniteLoop_2";

					Thread.sleep(10000);
				}

				ok_Hash.put("tInfiniteLoop_2", true);
				end_Hash.put("tInfiniteLoop_2", System.currentTimeMillis());

				mtp_tJava_2.waitForEndOfQueue();

				TalendThread errorThread_tJava_2 = mtp_tJava_2.getErrorThread();

				if (errorThread_tJava_2 != null) {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));

					if (errorThread_tJava_2.errorCode != null) {
						if (localErrorCode == null
								|| errorThread_tJava_2.errorCode
										.compareTo(localErrorCode) > 0) {
							((java.util.Map) threadLocal.get()).put(
									"errorCode", errorThread_tJava_2.errorCode);
						}
					}
					if (!localStatus.equals("failure")) {
						((java.util.Map) threadLocal.get()).put("status",
								errorThread_tJava_2.status);
					}
					if (errorThread_tJava_2.exception != null) {
						throw errorThread_tJava_2.exception;
					}
				} else {
					Integer threadErrorCode = mtp_tJava_2
							.getTalendThreadResult().getErrorCode();
					String threadStatus = mtp_tJava_2.getTalendThreadResult()
							.getStatus();

					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));

					if (threadErrorCode != null) {
						if (localErrorCode == null
								|| threadErrorCode.compareTo(localErrorCode) > 0) {
							((java.util.Map) threadLocal.get()).put(
									"errorCode", threadErrorCode);
						}
					}
					if (!localStatus.equals("failure")) {
						((java.util.Map) threadLocal.get()).put("status",
								threadStatus);
					}
				}

				/**
				 * [tInfiniteLoop_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tInfiniteLoop_2 finally ] start
				 */

				currentComponent = "tInfiniteLoop_2";

				/**
				 * [tInfiniteLoop_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tInfiniteLoop_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final testsubjobdaemon testsubjobdaemonClass = new testsubjobdaemon();

		int exitCode = testsubjobdaemonClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = testsubjobdaemon.class
					.getClassLoader().getResourceAsStream(
							"yema/testsubjobdaemon_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tInfiniteLoop_1Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tInfiniteLoop_1) {
					globalMap.put("tInfiniteLoop_1_SUBPROCESS_STATE", -1);

					e_tInfiniteLoop_1.printStackTrace();

				} catch (Error e_tInfiniteLoop_1) {
					globalMap.put("tInfiniteLoop_1_SUBPROCESS_STATE", -1);

					e_tInfiniteLoop_1.printStackTrace();

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tInfiniteLoop_2Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tInfiniteLoop_2) {
					globalMap.put("tInfiniteLoop_2_SUBPROCESS_STATE", -1);

					e_tInfiniteLoop_2.printStackTrace();

				} catch (Error e_tInfiniteLoop_2) {
					globalMap.put("tInfiniteLoop_2_SUBPROCESS_STATE", -1);

					e_tInfiniteLoop_2.printStackTrace();

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : testsubjobdaemon");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 64492 characters generated by Talend Open Studio for Data Integration on the
 * 12 October 2015 14:47:49 BST
 ************************************************************************************************/
