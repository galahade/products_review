### Install Playbook for install_redis role
# file: roles/install_redis/tasks/redis_install.yml

# Installs Redis package
- name: Install Redis packages
  shell: "yum install -y {{ item }}"
  with_items:
    - libselinux-python
    - ruby 
    - rubygems
  tags: redis
  
  # install redis gem to be able to run redis-trib.
- name: Install Redis gem 
  shell: "gem install redis"
  tags: redis
  
  # Copy and unpackage redis gz file.
- name: Copy and unpackage reids tar.gz file
  unarchive: >
    src={{ reids_source_file }}.tar.gz
    dest=/tmp
    
  # Make and install redis.
- name: Make and install reids.
  shell: "make; make install"
  args:
    chdir: /tmp/{{ reids_source_file }}/

- name: copy redis-trib file
  copy: src=redis-trib.rb dest=/usr/bin mode=0755
  tags: redis
  
- name: copy redis service config shell file
  copy: src=redis-server dest=/etc/init.d/ mode=0755
  notify: 
    - restart redis 
  tags: redis
  

# Ensure rsyslog is available if specified
- name: Install rsyslog package
  shell: "yum install -y rsyslog"
  when: redis_syslog_enabled == "yes"
  tags: redis

# Ensure the Redis DB directory exists
- name: Ensure Redis DB directory exists
  file: >
    path={{ redis_db_dir }}
    mode=755
    state=directory
  tags: redis

# Copy the Redis template
- name: Copy the redis configuration file 
  template: >
    src={{ redis_config_template_name }}
    dest=/etc/redis.conf
  notify: 
    - restart redis 
  tags: redis

# Copy the Redis Syslog configuration template
- name: Copy the rsyslogd configuration file for redis filter
  template: >
    src=rsyslogd.conf.j2
    dest=/etc/rsyslog.d/redis.conf
  when: redis_syslog_enabled == "yes"
  notify:
    - restart rsyslog
  tags: redis

# Set the vm.overcommit_memory parameter
#  Note ignoreerrors flag required to handle a change in sysctl behaviour
#  See: https://github.com/ansible/ansible/issues/6272
- name: Set the kernel parameter for vm overcommit 
  sysctl: >
    name=vm.overcommit_memory
    value={{ redis_overcommit_memory }}
    state=present
    ignoreerrors=yes
  tags: redis

# Daemonise and start the redis service
- name: Start the redis service
  service: >
    name={{ redis_service }}
    state=started
    enabled=yes
  tags: redis
