// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.updateorderstatus_0_5;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJava_8
//import java.util.List;

//the import part of tJava_7
//import java.util.List;

//the import part of tJavaRow_9
//import java.util.List;

//the import part of tJavaRow_6
//import java.util.List;

//the import part of tJavaRow_11
//import java.util.List;

//the import part of tJavaRow_5
//import java.util.List;

//the import part of tJava_9
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJavaRow_7
//import java.util.List;

//the import part of tJava_11
//import java.util.List;

//the import part of tJava_14
//import java.util.List;

//the import part of tJava_6
//import java.util.List;

//the import part of tJavaRow_8
//import java.util.List;

//the import part of tJava_12
//import java.util.List;

//the import part of tJava_15
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJavaRow_10
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJava_5
//import java.util.List;
import org.apache.log4j.Logger;
import org.apache.log4j.xml.*;

import java.util.Arrays;

/*import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.BufferedReader;
 import java.io.FileInputStream;
 import java.nio.charset.Charset;*/

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tJava_13
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_12
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: UpdateOrderStatus Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.1.0.20150902_1604-M2
 * @status 
 */
public class UpdateOrderStatus implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (etlinterfacefolder != null) {

				this.setProperty("etlinterfacefolder",
						etlinterfacefolder.toString());

			}

			if (etlroot != null) {

				this.setProperty("etlroot", etlroot.toString());

			}

			if (mediationfolder != null) {

				this.setProperty("mediationfolder", mediationfolder.toString());

			}

			if (propertiesfolder != null) {

				this.setProperty("propertiesfolder",
						propertiesfolder.toString());

			}

		}

		public String etlinterfacefolder;

		public String getEtlinterfacefolder() {
			return this.etlinterfacefolder;
		}

		public String etlroot;

		public String getEtlroot() {
			return this.etlroot;
		}

		public String mediationfolder;

		public String getMediationfolder() {
			return this.mediationfolder;
		}

		public String propertiesfolder;

		public String getPropertiesfolder() {
			return this.propertiesfolder;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.5";
	private final String jobName = "UpdateOrderStatus";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	LogCatcherUtils tLogCatcher_2 = new LogCatcherUtils();
	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					UpdateOrderStatus.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(UpdateOrderStatus.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						talendLogs_LOGS.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						try {
							tLogCatcher_1Process(globalMap);
						} finally {
							talendLogs_LOGSProcess(globalMap);
						}
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tSOAP_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSOAP_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractXMLField_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSOAP_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSOAP_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tFTPConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPFileList_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tWarn_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tFTPFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPGet_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFTPGet_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPDelete_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFTPDelete_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSOAP_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tReplicate_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputXML_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileExist_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileProperties_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileProperties_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileProperties_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXSLT_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tXSLT_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileProperties_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileProperties_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileProperties_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJoin_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tReplicate_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSOAP_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileCopy_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileCopy_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileProperties_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileProperties_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileProperties_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPPut_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_14Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tFTPPut_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPFileExist_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFTPFileExist_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputFullRow_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXSLT_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tXSLT_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputFullRow_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileProperties_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileProperties_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileProperties_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPPut_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_15Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tFTPPut_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPFileExist_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFTPFileExist_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileCopy_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileCopy_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSOAP_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputXML_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileExist_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileProperties_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileProperties_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileProperties_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXSLT_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tXSLT_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXSLT_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tXSLT_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDie_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputFullRow_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputFullRow_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputProperties_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tFileInputProperties_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tContextLoad_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputProperties_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileExist_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileTouch_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tFileTouch_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileCopy_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_13Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tFileCopy_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHash_row18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tXMLMap_4_TXMLMAP_OUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tXMLMap_4_TXMLMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tXMLMap_4_TXMLMAP_IN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tXMLMap_2_TXMLMAP_OUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tXMLMap_2_TXMLMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tXMLMap_2_TXMLMAP_IN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tXMLMap_1_TXMLMAP_OUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tXMLMap_1_TXMLMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tXMLMap_1_TXMLMAP_IN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void talendLogs_LOGS_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		talendLogs_FILE_error(exception, errorComponent, globalMap);

	}

	public void talendLogs_FILE_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSOAP_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPFileList_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPGet_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPDelete_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			errorCode = null;
			tDie_7Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void tDie_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileProperties_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tXSLT_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileProperties_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileCopy_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileProperties_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_11_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPPut_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_14_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPFileExist_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputFullRow_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tXSLT_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputFullRow_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileProperties_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_12_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPPut_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_15_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPFileExist_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileCopy_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileProperties_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tXSLT_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tXSLT_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputProperties_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileTouch_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_10_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileCopy_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_13_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendLogs_LOGS_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public String sessionId;

		public String getSessionId() {
			return this.sessionId;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.sessionId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sessionId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sessionId=" + sessionId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public routines.system.Document Soap;

		public routines.system.Document getSoap() {
			return this.Soap;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.Soap = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Soap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Soap=" + String.valueOf(Soap));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tSOAP_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSOAP_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tExtractXMLField_1 begin ] start
				 */

				ok_Hash.put("tExtractXMLField_1", false);
				start_Hash
						.put("tExtractXMLField_1", System.currentTimeMillis());

				currentComponent = "tExtractXMLField_1";

				int tos_count_tExtractXMLField_1 = 0;

				int nb_line_tExtractXMLField_1 = 0;

				class NameSpaceTool_tExtractXMLField_1 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					/**
					 * the regex for the xpath like that : case 1 :
					 * functionA(locationXPathExpression) case 2 :
					 * fn:functionA(locationXPathExpression) case 3 :
					 * functionA(functionB(locationXPathExpression)) case 4 :
					 * fn:functionA(fn:functionB(locationXPathExpression)) and
					 * like that.
					 */
					private java.util.regex.Pattern simpleFunctionPattern;
					private StringBuffer stringBuffer;
					private java.util.Map<String, String> resultCache;

					public String addDefaultNSPrefix(
							final String xpathExpression, String loopPath) {
						if (defualtNSPath.size() < 1) {
							return xpathExpression;
						}

						if (resultCache == null) {
							resultCache = new java.util.HashMap<String, String>();
						}

						String resultXpathExpression = resultCache
								.get(xpathExpression);
						if (resultXpathExpression != null) {
							return resultXpathExpression;
						}

						String locationPathExpression = xpathExpression;

						if (simpleFunctionPattern == null) {
							simpleFunctionPattern = java.util.regex.Pattern
									.compile("([a-zA-z0-9]+:)?[a-zA-Z]+-?[A-Za-z]+\\(.*\\)");
						}

						boolean isSimpleFunctionXPath = simpleFunctionPattern
								.matcher(xpathExpression).matches();
						String tail = null;
						if (isSimpleFunctionXPath) {
							int start = xpathExpression.lastIndexOf('(');
							int end = xpathExpression.indexOf(')');
							if (start < end) {
								if (stringBuffer == null) {
									stringBuffer = new StringBuffer();
								}
								locationPathExpression = xpathExpression
										.substring(start + 1, end);
								stringBuffer.append(xpathExpression.substring(
										0, start + 1));
								tail = xpathExpression.substring(end);
							} else {
								isSimpleFunctionXPath = false;
							}
						}

						locationPathExpression = addDefaultNSPrefixForLocationXPathExpression(
								locationPathExpression, loopPath);

						resultXpathExpression = locationPathExpression;

						if (isSimpleFunctionXPath) {
							stringBuffer.append(locationPathExpression);
							stringBuffer.append(tail);
							resultXpathExpression = stringBuffer.toString();
							stringBuffer.setLength(0);
						}

						resultCache.put(xpathExpression, resultXpathExpression);
						return resultXpathExpression;
					}

					private String addDefaultNSPrefixForLocationXPathExpression(
							String path, String loopPath) {
						String fullPath = loopPath;
						if (!path.equals(fullPath)) {
							for (String tmp : path.split("/")) {
								if (("..").equals(tmp)) {
									fullPath = fullPath.substring(0,
											fullPath.lastIndexOf("/"));
								} else {
									fullPath += "/" + tmp;
								}
							}
						}
						int[] indexs = new int[fullPath.split("/").length - 1];
						java.util.Arrays.fill(indexs, -1);
						int length = 0;
						for (int i = 0; i < defualtNSPath.size(); i++) {
							if (defualtNSPath.get(i).length() > length
									&& fullPath
											.startsWith(defualtNSPath.get(i))) {
								java.util.Arrays.fill(indexs, defualtNSPath
										.get(i).split("/").length - 2,
										indexs.length, i);
								length = defualtNSPath.get(i).length();
							}
						}

						StringBuilder newPath = new StringBuilder();
						String[] pathStrs = path.split("/");
						for (int i = 0; i < pathStrs.length; i++) {
							String tmp = pathStrs[i];
							if (newPath.length() > 0) {
								newPath.append("/");
							}
							if (tmp.length() > 0 && tmp.indexOf(":") == -1
									&& tmp.indexOf(".") == -1 /*
															 * &&
															 * tmp.indexOf("@")
															 * == -1
															 */) {
								int index = indexs[i + indexs.length
										- pathStrs.length];
								if (index >= 0) {
									// ==== add by wliu to support both filter
									// and functions==
									if (tmp.indexOf("[") > 0
											&& tmp.indexOf("]") > tmp
													.indexOf("[")) {// include
																	// filter
										String tmpStr = replaceElementWithNS(
												tmp, "pre" + index + ":");
										newPath.append(tmpStr);
									} else {
										if (tmp.indexOf("@") != -1
												|| tmp.indexOf("(") < tmp
														.indexOf(")")) { // include
																			// attribute
											newPath.append(tmp);
										} else {
											// ==add end=======
											newPath.append("pre").append(index)
													.append(":").append(tmp);
										}
									}
								} else {
									newPath.append(tmp);
								}
							} else {
								newPath.append(tmp);
							}
						}
						return newPath.toString();
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern
							.compile(matches);

					private String replaceElementWithNS(String global,
							String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches(
									"\\b(div|mod|and|or)\\b.*")
									|| group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tExtractXMLField_1 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				XML_API_tExtractXMLField_1 xml_api_tExtractXMLField_1 = new XML_API_tExtractXMLField_1();

				/**
				 * [tExtractXMLField_1 begin ] stop
				 */

				/**
				 * [tSOAP_1 begin ] start
				 */

				ok_Hash.put("tSOAP_1", false);
				start_Hash.put("tSOAP_1", System.currentTimeMillis());

				currentComponent = "tSOAP_1";

				int tos_count_tSOAP_1 = 0;

				org.talend.soap.SOAPUtil soapUtil_tSOAP_1 = new org.talend.soap.SOAPUtil();

				final String decryptedPassword_tSOAP_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

				/**
				 * [tSOAP_1 begin ] stop
				 */

				/**
				 * [tSOAP_1 main ] start
				 */

				currentComponent = "tSOAP_1";

				String document_tSOAP_1 = soapUtil_tSOAP_1
						.extractContentAsDocument(
								org.talend.soap.SOAPUtil.SOAP12,
								"http://"
										+ context
												.getProperty("endpointhostname")
										+ "/index.php/api/soap/index/",
								"urn:Mage_Api_Model_Server_HandlerAction",
								"<soapenv:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:urn=\"urn:Magento\">     <soapenv:Header/>     <soapenv:Body>        <urn:login soapenv:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">           <username xsi:type=\"xsd:string\">"
										+ context.getProperty("apiuser")
										+ "</username>           <apiKey xsi:type=\"xsd:string\">"
										+ context.getProperty("apikey")
										+ "</apiKey>        </urn:login>     </soapenv:Body>  </soapenv:Envelope>");

				// for output

				row1 = new row1Struct();

				row1.Soap = ParserUtils.parseTo_Document(document_tSOAP_1);

				tos_count_tSOAP_1++;

				/**
				 * [tSOAP_1 main ] stop
				 */

				/**
				 * [tExtractXMLField_1 main ] start
				 */

				currentComponent = "tExtractXMLField_1";

				String xmlStr_tExtractXMLField_1 = null;
				routines.system.Document xmlDocument_tExtractXMLField_1 = null;
				if (row1.Soap != null) {
					xmlDocument_tExtractXMLField_1 = row1.Soap;
				}
				if (xmlDocument_tExtractXMLField_1 != null
						&& xmlDocument_tExtractXMLField_1.getDocument() != null) {// C_01
					row2 = null;
					NameSpaceTool_tExtractXMLField_1 nsTool_tExtractXMLField_1 = new NameSpaceTool_tExtractXMLField_1();
					org.dom4j.io.SAXReader reader_tExtractXMLField_1 = new org.dom4j.io.SAXReader();

					org.dom4j.Document doc_tExtractXMLField_1 = null;
					java.util.HashMap xmlNameSpaceMap_tExtractXMLField_1 = null;
					org.dom4j.XPath x_tExtractXMLField_1 = null;
					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tExtractXMLField_1 = null;
					String loopQuery_tExtractXMLField_1 = "/*";

					boolean isStructError_tExtractXMLField_1 = true;

					try {

						doc_tExtractXMLField_1 = xmlDocument_tExtractXMLField_1
								.getDocument();

						nsTool_tExtractXMLField_1
								.countNSMap(doc_tExtractXMLField_1
										.getRootElement());
						xmlNameSpaceMap_tExtractXMLField_1 = nsTool_tExtractXMLField_1.xmlNameSpaceMap;

						x_tExtractXMLField_1 = doc_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												loopQuery_tExtractXMLField_1,
												loopQuery_tExtractXMLField_1));

						x_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						nodeList_tExtractXMLField_1 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tExtractXMLField_1
								.selectNodes(doc_tExtractXMLField_1);

						isStructError_tExtractXMLField_1 = false;

					} catch (java.lang.Exception ex_tExtractXMLField_1) {
						System.err.println(ex_tExtractXMLField_1.getMessage());
					}

					org.dom4j.Node node_tExtractXMLField_1 = null;
					String str_tExtractXMLField_1 = "";
					boolean resultIsNode_tExtractXMLField_1 = true;
					for (int i_tExtractXMLField_1 = 0; isStructError_tExtractXMLField_1
							|| (nodeList_tExtractXMLField_1 != null && i_tExtractXMLField_1 < nodeList_tExtractXMLField_1
									.size()); i_tExtractXMLField_1++) {

						if (!isStructError_tExtractXMLField_1) {
							row2 = null;
							row2 = new row2Struct();

							org.dom4j.tree.AbstractNode temp_tExtractXMLField_1 = nodeList_tExtractXMLField_1
									.get(i_tExtractXMLField_1);

							nb_line_tExtractXMLField_1++;
							try {
								org.dom4j.XPath xTmp0_tExtractXMLField_1 = temp_tExtractXMLField_1
										.createXPath(nsTool_tExtractXMLField_1
												.addDefaultNSPrefix(
														"//loginReturn",
														loopQuery_tExtractXMLField_1));
								xTmp0_tExtractXMLField_1
										.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

								Object obj0_tExtractXMLField_1 = xTmp0_tExtractXMLField_1
										.evaluate(temp_tExtractXMLField_1);
								if (obj0_tExtractXMLField_1 instanceof String
										|| obj0_tExtractXMLField_1 instanceof Number) {
									resultIsNode_tExtractXMLField_1 = false;
									str_tExtractXMLField_1 = String
											.valueOf(obj0_tExtractXMLField_1);
								} else {
									resultIsNode_tExtractXMLField_1 = true;
									node_tExtractXMLField_1 = xTmp0_tExtractXMLField_1
											.selectSingleNode(temp_tExtractXMLField_1);
									str_tExtractXMLField_1 = xTmp0_tExtractXMLField_1
											.valueOf(temp_tExtractXMLField_1);
								}
								if (resultIsNode_tExtractXMLField_1
										&& xml_api_tExtractXMLField_1
												.isDefNull(node_tExtractXMLField_1)) {
									row2.sessionId = null;
								} else if (resultIsNode_tExtractXMLField_1
										&& xml_api_tExtractXMLField_1
												.isEmpty(node_tExtractXMLField_1)) {
									row2.sessionId = "";
								} else if (resultIsNode_tExtractXMLField_1
										&& xml_api_tExtractXMLField_1
												.isMissing(node_tExtractXMLField_1)) {
									row2.sessionId = null;
								} else {
									row2.sessionId = str_tExtractXMLField_1;
								}
							} catch (java.lang.Exception ex_tExtractXMLField_1) {
								System.err.println(ex_tExtractXMLField_1
										.getMessage());
								row2 = null;
							}
						}

						isStructError_tExtractXMLField_1 = false;

						globalMap.put("tExtractXMLField_1_NB_LINE",
								nb_line_tExtractXMLField_1);

						tos_count_tExtractXMLField_1++;

						/**
						 * [tExtractXMLField_1 main ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tJavaRow_1 main ] start
							 */

							currentComponent = "tJavaRow_1";

							globalMap.put("sessionId", row2.sessionId);

							((Logger) globalMap.get("LOGGER"))
									.debug("Logged into "
											+ "http://"
											+ context
													.getProperty("endpointhostname")
											+ "/index.php/api/soap/index/"
											+ " soap api... sessionid is : "
											+ globalMap.get("sessionId"));

							nb_line_tJavaRow_1++;

							tos_count_tJavaRow_1++;

							/**
							 * [tJavaRow_1 main ] stop
							 */

						} // End of branch "row2"

						// end for
					}

				} // C_01

				/**
				 * [tSOAP_1 end ] start
				 */

				currentComponent = "tSOAP_1";

				soapUtil_tSOAP_1.close();

				ok_Hash.put("tSOAP_1", true);
				end_Hash.put("tSOAP_1", System.currentTimeMillis());

				/**
				 * [tSOAP_1 end ] stop
				 */

				/**
				 * [tExtractXMLField_1 end ] start
				 */

				currentComponent = "tExtractXMLField_1";

				globalMap.put("tExtractXMLField_1_NB_LINE",
						nb_line_tExtractXMLField_1);

				ok_Hash.put("tExtractXMLField_1", true);
				end_Hash.put("tExtractXMLField_1", System.currentTimeMillis());

				/**
				 * [tExtractXMLField_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if (globalMap.get("sessionId") == null) {

					tDie_1Process(globalMap);
				}

				if (globalMap.get("sessionId") != null
						&& context.getProperty("sftpenabled").equals("true")) {

					tFTPConnection_1Process(globalMap);
				}

				if (globalMap.get("sessionId") != null
						&& context.getProperty("sftpenabled").equals("false")) {

					tFileExist_8Process(globalMap);
				}

				/**
				 * [tJavaRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSOAP_1 finally ] start
				 */

				currentComponent = "tSOAP_1";

				/**
				 * [tSOAP_1 finally ] stop
				 */

				/**
				 * [tExtractXMLField_1 finally ] start
				 */

				currentComponent = "tExtractXMLField_1";

				/**
				 * [tExtractXMLField_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSOAP_1_SUBPROCESS_STATE", 1);
	}

	public void tDie_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */

				/**
				 * [tDie_1 main ] start
				 */

				currentComponent = "tDie_1";

				tLogCatcher_1.addMessage("tDie", "tDie_1", 5,
						"Incorrect user/password or user does not exist", 4);
				tLogCatcher_1Process(globalMap);

				talendLogs_LOGS.addMessage("tDie", "tDie_1", 5,
						"Incorrect user/password or user does not exist", 4);
				talendLogs_LOGSProcess(globalMap);

				globalMap.put("tDie_1_DIE_PRIORITY", 5);
				System.err
						.println("Incorrect user/password or user does not exist");

				globalMap.put("tDie_1_DIE_MESSAGE",
						"Incorrect user/password or user does not exist");
				globalMap.put("tDie_1_DIE_MESSAGES",
						"Incorrect user/password or user does not exist");
				currentComponent = "tDie_1";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_1_DIE_CODE", errorCode);

				System.exit(4);

				tos_count_tDie_1++;

				/**
				 * [tDie_1 main ] stop
				 */

				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}

	public void tFTPConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFTPConnection_1 begin ] start
				 */

				ok_Hash.put("tFTPConnection_1", false);
				start_Hash.put("tFTPConnection_1", System.currentTimeMillis());

				currentComponent = "tFTPConnection_1";

				int tos_count_tFTPConnection_1 = 0;

				class MyUserInfo implements com.jcraft.jsch.UserInfo,
						com.jcraft.jsch.UIKeyboardInteractive {

					String decryptedPassphrase_tFTPConnection_1 = routines.system.PasswordEncryptUtil
							.decryptPassword("abf4f1fe565f5343");

					String passphrase_tFTPConnection_1 = decryptedPassphrase_tFTPConnection_1;

					public String getPassphrase() {
						return passphrase_tFTPConnection_1;
					}

					public String getPassword() {
						return null;
					}

					public boolean promptPassword(String arg0) {
						return true;
					}

					public boolean promptPassphrase(String arg0) {
						return true;
					}

					public boolean promptYesNo(String arg0) {
						return true;
					}

					public void showMessage(String arg0) {
					}

					public String[] promptKeyboardInteractive(
							String destination, String name,
							String instruction, String[] prompt, boolean[] echo) {

						final String decryptedPassword_tFTPConnection_1 = ((String) context
								.getProperty("sftppass"));

						String[] password_tFTPConnection_1 = { decryptedPassword_tFTPConnection_1 };
						return password_tFTPConnection_1;
					}
				}
				;
				final com.jcraft.jsch.UserInfo defaultUserInfo_tFTPConnection_1 = new MyUserInfo();
				com.jcraft.jsch.JSch jsch_tFTPConnection_1 = new com.jcraft.jsch.JSch();

				com.jcraft.jsch.Session session_tFTPConnection_1 = jsch_tFTPConnection_1
						.getSession(context.getProperty("sftpuser"), context
								.getProperty("sftphost"), Integer
								.parseInt(context.getProperty("sftpport")));

				final String decryptedPassword_tFTPConnection_1 = ((String) context
						.getProperty("sftppass"));

				session_tFTPConnection_1
						.setPassword(decryptedPassword_tFTPConnection_1);

				session_tFTPConnection_1
						.setUserInfo(defaultUserInfo_tFTPConnection_1);

				if (("true").equals(System.getProperty("http.proxySet"))) {
					com.jcraft.jsch.ProxyHTTP proxy_tFTPConnection_1 = new com.jcraft.jsch.ProxyHTTP(
							System.getProperty("http.proxyHost"),
							Integer.parseInt(System
									.getProperty("http.proxyPort")));
					if (!"".equals(System.getProperty("http.proxyUser"))) {
						proxy_tFTPConnection_1.setUserPasswd(
								System.getProperty("http.proxyUser"),
								System.getProperty("http.proxyPassword"));
					}
					session_tFTPConnection_1.setProxy(proxy_tFTPConnection_1);
				}

				session_tFTPConnection_1.connect();
				com.jcraft.jsch.Channel channel_tFTPConnection_1 = session_tFTPConnection_1
						.openChannel("sftp");
				channel_tFTPConnection_1.connect();

				com.jcraft.jsch.ChannelSftp c_tFTPConnection_1 = (com.jcraft.jsch.ChannelSftp) channel_tFTPConnection_1;

				globalMap.put("conn_tFTPConnection_1", c_tFTPConnection_1);

				/**
				 * [tFTPConnection_1 begin ] stop
				 */

				/**
				 * [tFTPConnection_1 main ] start
				 */

				currentComponent = "tFTPConnection_1";

				tos_count_tFTPConnection_1++;

				/**
				 * [tFTPConnection_1 main ] stop
				 */

				/**
				 * [tFTPConnection_1 end ] start
				 */

				currentComponent = "tFTPConnection_1";

				ok_Hash.put("tFTPConnection_1", true);
				end_Hash.put("tFTPConnection_1", System.currentTimeMillis());

				/**
				 * [tFTPConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFTPConnection_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFTPFileList_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFTPConnection_1 finally ] start
				 */

				currentComponent = "tFTPConnection_1";

				/**
				 * [tFTPConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tFTPFileList_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFTPFileList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFTPFileList_1 begin ] start
				 */

				ok_Hash.put("tFTPFileList_1", false);
				start_Hash.put("tFTPFileList_1", System.currentTimeMillis());

				currentComponent = "tFTPFileList_1";

				int tos_count_tFTPFileList_1 = 0;

				java.util.List<String> maskList_tFTPFileList_1 = new java.util.ArrayList<String>();

				maskList_tFTPFileList_1.add(((String) context
						.getProperty("uosfile")));
				com.jcraft.jsch.ChannelSftp c_tFTPFileList_1 = (com.jcraft.jsch.ChannelSftp) globalMap
						.get("conn_tFTPConnection_1");

				if (c_tFTPFileList_1.getHome() != null
						&& !c_tFTPFileList_1.getHome().equals(
								c_tFTPFileList_1.pwd())) {
					c_tFTPFileList_1.cd(c_tFTPFileList_1.getHome());
				}
				String remotedir_tFTPFileList_1 = context
						.getProperty("sftpfolder")
						+ context.getProperty("uosfolder").replaceAll("\\\\",
								"/");
				java.util.Vector<com.jcraft.jsch.ChannelSftp.LsEntry> vector_tFTPFileList_1 = c_tFTPFileList_1
						.ls(remotedir_tFTPFileList_1);
				com.jcraft.jsch.ChannelSftp.LsEntry[] sftpFiles_tFTPFileList_1 = vector_tFTPFileList_1
						.toArray(new com.jcraft.jsch.ChannelSftp.LsEntry[0]);
				int nb_file_tFTPFileList_1 = 0;
				List<String> fileListTemp_tFTPFileList_1 = new java.util.ArrayList<String>();

				for (String filemask_tFTPFileList_1 : maskList_tFTPFileList_1) {
					java.util.regex.Pattern fileNamePattern_tFTPFileList_1 = java.util.regex.Pattern
							.compile(filemask_tFTPFileList_1.replaceAll("\\.",
									"\\\\.").replaceAll("\\*", ".*"));

					for (com.jcraft.jsch.ChannelSftp.LsEntry filemaskTemp_tFTPFileList_1 : sftpFiles_tFTPFileList_1) {
						if (fileNamePattern_tFTPFileList_1.matcher(
								filemaskTemp_tFTPFileList_1.getFilename())
								.matches()) {
							fileListTemp_tFTPFileList_1
									.add(filemaskTemp_tFTPFileList_1
											.getFilename());
						}
					}
				}

				for (String sftpFile_tFTPFileList_1 : fileListTemp_tFTPFileList_1) {

					if ((".").equals(sftpFile_tFTPFileList_1)
							|| ("..").equals(sftpFile_tFTPFileList_1)) {
						continue;
					}
					String currentFileName_tFTPFileList_1 = sftpFile_tFTPFileList_1;
					String currentFilePath_tFTPFileList_1 = remotedir_tFTPFileList_1
							+ "/" + sftpFile_tFTPFileList_1;

					globalMap.put("tFTPFileList_1_CURRENT_FILE",
							currentFileName_tFTPFileList_1);
					globalMap.put("tFTPFileList_1_CURRENT_FILEPATH",
							currentFilePath_tFTPFileList_1);
					nb_file_tFTPFileList_1++;

					/**
					 * [tFTPFileList_1 begin ] stop
					 */

					/**
					 * [tFTPFileList_1 main ] start
					 */

					currentComponent = "tFTPFileList_1";

					tos_count_tFTPFileList_1++;

					/**
					 * [tFTPFileList_1 main ] stop
					 */

					/**
					 * [tFTPFileList_1 end ] start
					 */

					currentComponent = "tFTPFileList_1";

				}
				globalMap.put("tFTPFileList_1_NB_FILE", nb_file_tFTPFileList_1);

				ok_Hash.put("tFTPFileList_1", true);
				end_Hash.put("tFTPFileList_1", System.currentTimeMillis());

				tJava_8Process(globalMap);

				/**
				 * [tFTPFileList_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFTPFileList_1 finally ] start
				 */

				currentComponent = "tFTPFileList_1";

				/**
				 * [tFTPFileList_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPFileList_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_4 begin ] start
				 */

				ok_Hash.put("tWarn_4", false);
				start_Hash.put("tWarn_4", System.currentTimeMillis());

				currentComponent = "tWarn_4";

				int tos_count_tWarn_4 = 0;

				/**
				 * [tWarn_4 begin ] stop
				 */

				/**
				 * [tWarn_4 main ] start
				 */

				currentComponent = "tWarn_4";

				resumeUtil.addLog(
						"USER_DEF_LOG",
						"NODE:tWarn_4",
						"",
						Thread.currentThread().getId() + "",
						"INFO",
						"",
						"no file to process on ftp "
								+ context.getProperty("sftphost") + "  "
								+ context.getProperty("sftpfolder")
								+ context.getProperty("uosfolder"), "", "");
				tLogCatcher_2.addMessage(
						"tWarn",
						"tWarn_4",
						3,
						"no file to process on ftp "
								+ context.getProperty("sftphost") + "  "
								+ context.getProperty("sftpfolder")
								+ context.getProperty("uosfolder"), 42);
				tLogCatcher_2Process(globalMap);
				talendLogs_LOGS.addMessage(
						"tWarn",
						"tWarn_4",
						3,
						"no file to process on ftp "
								+ context.getProperty("sftphost") + "  "
								+ context.getProperty("sftpfolder")
								+ context.getProperty("uosfolder"), 42);
				talendLogs_LOGSProcess(globalMap);
				globalMap.put(
						"tWarn_4_WARN_MESSAGES",
						"no file to process on ftp "
								+ context.getProperty("sftphost") + "  "
								+ context.getProperty("sftpfolder")
								+ context.getProperty("uosfolder"));
				globalMap.put("tWarn_4_WARN_PRIORITY", 3);
				globalMap.put("tWarn_4_WARN_CODE", 42);

				tos_count_tWarn_4++;

				/**
				 * [tWarn_4 main ] stop
				 */

				/**
				 * [tWarn_4 end ] start
				 */

				currentComponent = "tWarn_4";

				ok_Hash.put("tWarn_4", true);
				end_Hash.put("tWarn_4", System.currentTimeMillis());

				/**
				 * [tWarn_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_4 finally ] start
				 */

				currentComponent = "tWarn_4";

				/**
				 * [tWarn_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_8 begin ] start
				 */

				ok_Hash.put("tJava_8", false);
				start_Hash.put("tJava_8", System.currentTimeMillis());

				currentComponent = "tJava_8";

				int tos_count_tJava_8 = 0;

				((Logger) globalMap.get("LOGGER")).debug(((String) globalMap
						.get("tFTPFileList_1_CURRENT_FILEPATH")));

				/**
				 * [tJava_8 begin ] stop
				 */

				/**
				 * [tJava_8 main ] start
				 */

				currentComponent = "tJava_8";

				tos_count_tJava_8++;

				/**
				 * [tJava_8 main ] stop
				 */

				/**
				 * [tJava_8 end ] start
				 */

				currentComponent = "tJava_8";

				ok_Hash.put("tJava_8", true);
				end_Hash.put("tJava_8", System.currentTimeMillis());

				/**
				 * [tJava_8 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_8:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFTPGet_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_8 finally ] start
				 */

				currentComponent = "tJava_8";

				/**
				 * [tJava_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}

	public void tFTPGet_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFTPGet_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFTPGet_1 begin ] start
				 */

				ok_Hash.put("tFTPGet_1", false);
				start_Hash.put("tFTPGet_1", System.currentTimeMillis());

				currentComponent = "tFTPGet_1";

				int tos_count_tFTPGet_1 = 0;

				int nb_file_tFTPGet_1 = 0;
				final java.util.List<String> msg_tFTPGet_1 = new java.util.ArrayList<String>();

				class MyProgressMonitor_tFTPGet_1 implements
						com.jcraft.jsch.SftpProgressMonitor {

					private long percent = -1;

					public void init(int op, String src, String dest, long max) {
					}

					public boolean count(long count) {
						return true;
					}

					public void end() {
					}
				}

				class SFTPGetter_tFTPGet_1 {

					private com.jcraft.jsch.ChannelSftp cnlSFTP = null;

					private com.jcraft.jsch.SftpProgressMonitor monitor = null;

					private int count = 0;

					public void getAllFiles(String remoteDirectory,
							String localDirectory)
							throws com.jcraft.jsch.SftpException {

						cnlSFTP.cd(remoteDirectory);
						java.util.Vector sftpFiles = cnlSFTP.ls(".");

						for (Object sftpFile : sftpFiles) {
							com.jcraft.jsch.ChannelSftp.LsEntry lsEntry = (com.jcraft.jsch.ChannelSftp.LsEntry) sftpFile;
							com.jcraft.jsch.SftpATTRS attrs = lsEntry
									.getAttrs();

							if ((".").equals(lsEntry.getFilename())
									|| ("..").equals(lsEntry.getFilename())) {
								continue;
							}

							if (attrs.isDir()) {
								java.io.File localFile = new java.io.File(
										localDirectory + "/"
												+ lsEntry.getFilename());
								if (!localFile.exists()) {
									localFile.mkdir();
								}
								getAllFiles(
										remoteDirectory + "/"
												+ lsEntry.getFilename(),
										localDirectory + "/"
												+ lsEntry.getFilename());
								cnlSFTP.cd(remoteDirectory);
							} else if (!attrs.isLink()) {
								downloadFile(localDirectory,
										lsEntry.getFilename());
							}
						}
					}

					public void getFiles(String remoteDirectory,
							String localDirectory, String maskStr)
							throws com.jcraft.jsch.SftpException {

						cnlSFTP.cd(remoteDirectory);
						java.util.Vector sftpFiles = cnlSFTP.ls(".");

						for (Object sftpFile : sftpFiles) {
							com.jcraft.jsch.ChannelSftp.LsEntry lsEntry = (com.jcraft.jsch.ChannelSftp.LsEntry) sftpFile;
							com.jcraft.jsch.SftpATTRS attrs = lsEntry
									.getAttrs();

							if ((".").equals(lsEntry.getFilename())
									|| ("..").equals(lsEntry.getFilename())) {
								continue;
							}

							if (!attrs.isDir() && !attrs.isLink()) {

								if (lsEntry.getFilename().matches(maskStr)) {
									downloadFile(localDirectory,
											lsEntry.getFilename());
								}
							}
						}
					}

					public void chdir(String path)
							throws com.jcraft.jsch.SftpException {
						cnlSFTP.cd(path);
					}

					public String pwd() throws com.jcraft.jsch.SftpException {
						return cnlSFTP.pwd();
					}

					private void downloadFile(String localFileName,
							String remoteFileName)
							throws com.jcraft.jsch.SftpException {

						try {
							cnlSFTP.get(remoteFileName, localFileName, monitor,
									com.jcraft.jsch.ChannelSftp.OVERWRITE);

							msg_tFTPGet_1.add("file [" + remoteFileName
									+ "] downloaded successfully.");

							globalMap.put("tFTPGet_1_CURRENT_STATUS",
									"File transfer OK.");
						} catch (com.jcraft.jsch.SftpException e) {

							if (e.id == com.jcraft.jsch.ChannelSftp.SSH_FX_FAILURE
									|| e.id == com.jcraft.jsch.ChannelSftp.SSH_FX_BAD_MESSAGE) {
								msg_tFTPGet_1.add("file [" + remoteFileName
										+ "] downloaded unsuccessfully.");
								globalMap.put("tFTPGet_1_CURRENT_STATUS",
										"File transfer fail.");
							}
							throw e;
						}
						count++;
					}
				}

				com.jcraft.jsch.ChannelSftp c_tFTPGet_1 = (com.jcraft.jsch.ChannelSftp) globalMap
						.get("conn_tFTPConnection_1");

				if (c_tFTPGet_1.getHome() != null
						&& !c_tFTPGet_1.getHome().equals(c_tFTPGet_1.pwd())) {
					c_tFTPGet_1.cd(c_tFTPGet_1.getHome());
				}
				com.jcraft.jsch.SftpProgressMonitor monitor_tFTPGet_1 = new MyProgressMonitor_tFTPGet_1();
				SFTPGetter_tFTPGet_1 getter_tFTPGet_1 = new SFTPGetter_tFTPGet_1();
				getter_tFTPGet_1.cnlSFTP = c_tFTPGet_1;
				getter_tFTPGet_1.monitor = monitor_tFTPGet_1;
				String remotedir_tFTPGet_1 = context.getProperty("sftpfolder")
						+ context.getProperty("uosfolder") + "/";
				c_tFTPGet_1.cd(remotedir_tFTPGet_1);
				java.util.List<String> maskList_tFTPGet_1 = new java.util.ArrayList<String>();

				maskList_tFTPGet_1
						.add(((String) context.getProperty("uosfile")));
				String localdir_tFTPGet_1 = context.etlinterfacefolder + "/"
						+ context.getProperty("uosfolder") + "/";
				// create folder if local direcotry (assigned by property) not
				// exists
				java.io.File dirHandle_tFTPGet_1 = new java.io.File(
						localdir_tFTPGet_1);

				if (!dirHandle_tFTPGet_1.exists()) {
					dirHandle_tFTPGet_1.mkdirs();
				}
				String root_tFTPGet_1 = getter_tFTPGet_1.pwd();

				for (String maskStr_tFTPGet_1 : maskList_tFTPGet_1) {

					/**
					 * [tFTPGet_1 begin ] stop
					 */

					/**
					 * [tFTPGet_1 main ] start
					 */

					currentComponent = "tFTPGet_1";

					try {
						globalMap.put("tFTPGet_1_CURRENT_STATUS",
								"No file transfered.");
						String dir_tFTPGet_1 = root_tFTPGet_1;

						String mask_tFTPGet_1 = maskStr_tFTPGet_1.replaceAll(
								"\\\\", "/");

						int i_tFTPGet_1 = mask_tFTPGet_1.lastIndexOf('/');

						if (i_tFTPGet_1 != -1) {
							dir_tFTPGet_1 = mask_tFTPGet_1.substring(0,
									i_tFTPGet_1);
							mask_tFTPGet_1 = mask_tFTPGet_1
									.substring(i_tFTPGet_1 + 1);
						}

						mask_tFTPGet_1 = org.apache.oro.text.GlobCompiler
								.globToPerl5(
										mask_tFTPGet_1.toCharArray(),
										org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

						if (dir_tFTPGet_1 != null && !"".equals(dir_tFTPGet_1)) {
							if ((".*").equals(mask_tFTPGet_1)) {
								getter_tFTPGet_1.getAllFiles(dir_tFTPGet_1,
										localdir_tFTPGet_1);
							} else {
								getter_tFTPGet_1.getFiles(dir_tFTPGet_1,
										localdir_tFTPGet_1, mask_tFTPGet_1);
							}
						}
						getter_tFTPGet_1.chdir(root_tFTPGet_1);
					} catch (java.lang.Exception e) {

						System.err.print(e.getMessage());

					}

					tos_count_tFTPGet_1++;

					/**
					 * [tFTPGet_1 main ] stop
					 */

					/**
					 * [tFTPGet_1 end ] start
					 */

					currentComponent = "tFTPGet_1";

				}
				nb_file_tFTPGet_1 = getter_tFTPGet_1.count;

				msg_tFTPGet_1.add(getter_tFTPGet_1.count
						+ " files have been downloaded.");
				StringBuffer sb_tFTPGet_1 = new StringBuffer();

				for (String item_tFTPGet_1 : msg_tFTPGet_1) {
					sb_tFTPGet_1.append(item_tFTPGet_1).append("\n");
				}
				globalMap.put("tFTPGet_1_TRANSFER_MESSAGES",
						sb_tFTPGet_1.toString());

				globalMap.put("tFTPGet_1_NB_FILE", nb_file_tFTPGet_1);

				ok_Hash.put("tFTPGet_1", true);
				end_Hash.put("tFTPGet_1", System.currentTimeMillis());

				tFileExist_8Process(globalMap);

				/**
				 * [tFTPGet_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFTPGet_1 finally ] start
				 */

				currentComponent = "tFTPGet_1";

				/**
				 * [tFTPGet_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPGet_1_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileExist_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_8 begin ] start
				 */

				ok_Hash.put("tFileExist_8", false);
				start_Hash.put("tFileExist_8", System.currentTimeMillis());

				currentComponent = "tFileExist_8";

				int tos_count_tFileExist_8 = 0;

				/**
				 * [tFileExist_8 begin ] stop
				 */

				/**
				 * [tFileExist_8 main ] start
				 */

				currentComponent = "tFileExist_8";

				java.io.File file_tFileExist_8 = new java.io.File(
						context.etlinterfacefolder + "/"
								+ context.getProperty("uosfolder") + "/"
								+ context.getProperty("uosfile"));
				if (!file_tFileExist_8.exists()) {
					globalMap.put("tFileExist_8_EXISTS", false);
				} else {
					globalMap.put("tFileExist_8_EXISTS", true);
				}

				globalMap.put(
						"tFileExist_8_FILENAME",
						context.etlinterfacefolder + "/"
								+ context.getProperty("uosfolder") + "/"
								+ context.getProperty("uosfile"));

				tos_count_tFileExist_8++;

				/**
				 * [tFileExist_8 main ] stop
				 */

				/**
				 * [tFileExist_8 end ] start
				 */

				currentComponent = "tFileExist_8";

				ok_Hash.put("tFileExist_8", true);
				end_Hash.put("tFileExist_8", System.currentTimeMillis());

				if (((Boolean) globalMap.get("tFileExist_8_EXISTS"))
						&& context.getProperty("sftpenabled").equals("true")) {

					tJava_7Process(globalMap);
				}

				if (!((Boolean) globalMap.get("tFileExist_8_EXISTS"))) {

					tWarn_4Process(globalMap);
				}

				if (((Boolean) globalMap.get("tFileExist_8_EXISTS"))) {

					tFileInputDelimited_2Process(globalMap);
				}

				/**
				 * [tFileExist_8 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_8 finally ] start
				 */

				currentComponent = "tFileExist_8";

				/**
				 * [tFileExist_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_8_SUBPROCESS_STATE", 1);
	}

	public void tJava_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());

				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				((Logger) globalMap.get("LOGGER"))
						.debug("file coppied from sftp "
								+ context.getProperty("sftphost"));

				/**
				 * [tJava_7 begin ] stop
				 */

				/**
				 * [tJava_7 main ] start
				 */

				currentComponent = "tJava_7";

				tos_count_tJava_7++;

				/**
				 * [tJava_7 main ] stop
				 */

				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				/**
				 * [tJava_7 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_7:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFTPDelete_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_7 finally ] start
				 */

				currentComponent = "tJava_7";

				/**
				 * [tJava_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}

	public void tFTPDelete_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFTPDelete_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFTPDelete_1 begin ] start
				 */

				ok_Hash.put("tFTPDelete_1", false);
				start_Hash.put("tFTPDelete_1", System.currentTimeMillis());

				currentComponent = "tFTPDelete_1";

				int tos_count_tFTPDelete_1 = 0;

				int nb_file_tFTPDelete_1 = 0;

				com.jcraft.jsch.ChannelSftp c_tFTPDelete_1 = (com.jcraft.jsch.ChannelSftp) globalMap
						.get("conn_tFTPConnection_1");

				if (c_tFTPDelete_1.getHome() != null
						&& !c_tFTPDelete_1.getHome().equals(
								c_tFTPDelete_1.pwd())) {
					c_tFTPDelete_1.cd(c_tFTPDelete_1.getHome());
				}

				java.util.List<java.util.Map<String, String>> listtFTPDelete_1 = new java.util.ArrayList<java.util.Map<String, String>>();

				java.util.Map<String, String> maptFTPDelete_10 = new java.util.HashMap<String, String>();
				maptFTPDelete_10.put(((String) context.getProperty("uosfile")),
						"");
				listtFTPDelete_1.add(maptFTPDelete_10);

				for (java.util.Map<String, String> maptFTPDelete_1 : listtFTPDelete_1) {

					/**
					 * [tFTPDelete_1 begin ] stop
					 */

					/**
					 * [tFTPDelete_1 main ] start
					 */

					currentComponent = "tFTPDelete_1";

					try {

						globalMap.put("tFTPDelete_1_CURRENT_STATUS",
								"No file deleted.");
						java.util.Set<String> keySettFTPDelete_1 = maptFTPDelete_1
								.keySet();
						for (String keytFTPDelete_1 : keySettFTPDelete_1) {
							String filemasktFTPDelete_1 = keytFTPDelete_1;
							String dirtFTPDelete_1 = null;

							String masktFTPDelete_1 = filemasktFTPDelete_1
									.replaceAll("\\\\", "/");

							int itFTPDelete_1 = masktFTPDelete_1
									.lastIndexOf('/');
							if (itFTPDelete_1 != -1) {
								dirtFTPDelete_1 = masktFTPDelete_1.substring(0,
										itFTPDelete_1);
								masktFTPDelete_1 = masktFTPDelete_1
										.substring(itFTPDelete_1 + 1);
							}

							masktFTPDelete_1 = org.apache.oro.text.GlobCompiler
									.globToPerl5(
											masktFTPDelete_1.toCharArray(),
											org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

							java.util.Vector listingstFTPDelete_1 = c_tFTPDelete_1
									.ls(context.getProperty("sftpfolder")
											+ context.getProperty("uosfolder")
											+ "/");
							for (int mtFTPDelete_1 = 0; mtFTPDelete_1 < listingstFTPDelete_1
									.size(); mtFTPDelete_1++) {
								String filePathtFTPDelete_1 = ((com.jcraft.jsch.ChannelSftp.LsEntry) listingstFTPDelete_1
										.elementAt(mtFTPDelete_1))
										.getFilename();
								if (filePathtFTPDelete_1
										.matches(masktFTPDelete_1)) {
									try {
										c_tFTPDelete_1
												.rm((context
														.getProperty("sftpfolder")
														+ context
																.getProperty("uosfolder") + "/")
														+ "/"
														+ filePathtFTPDelete_1);

										globalMap.put(
												"tFTPDelete_1_CURRENT_STATUS",
												"File deleted.");
									} catch (com.jcraft.jsch.SftpException e_tFTPDelete_1) {
										globalMap.put(
												"tFTPDelete_1_CURRENT_STATUS",
												"Deleting file action error");
										throw e_tFTPDelete_1;
									}
									nb_file_tFTPDelete_1++;
								}
							}
						}

					} catch (java.lang.Exception e_tFTPDelete_1) {

						System.err.print(e_tFTPDelete_1.getMessage());
					}

					tos_count_tFTPDelete_1++;

					/**
					 * [tFTPDelete_1 main ] stop
					 */

					/**
					 * [tFTPDelete_1 end ] start
					 */

					currentComponent = "tFTPDelete_1";

				}

				globalMap.put("tFTPDelete_1_NB_FILE", nb_file_tFTPDelete_1);

				ok_Hash.put("tFTPDelete_1", true);
				end_Hash.put("tFTPDelete_1", System.currentTimeMillis());

				/**
				 * [tFTPDelete_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFTPDelete_1 finally ] start
				 */

				currentComponent = "tFTPDelete_1";

				/**
				 * [tFTPDelete_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPDelete_1_SUBPROCESS_STATE", 1);
	}

	public void tDie_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_7 begin ] start
				 */

				ok_Hash.put("tDie_7", false);
				start_Hash.put("tDie_7", System.currentTimeMillis());

				currentComponent = "tDie_7";

				int tos_count_tDie_7 = 0;

				/**
				 * [tDie_7 begin ] stop
				 */

				/**
				 * [tDie_7 main ] start
				 */

				currentComponent = "tDie_7";

				tLogCatcher_1.addMessage(
						"tDie",
						"tDie_7",
						5,
						"can't remove ftp file "
								+ context.getProperty("sftpfolder")
								+ context.getProperty("uosfolder") + "/"
								+ ((String) context.getProperty("uosfile")), 7);
				tLogCatcher_1Process(globalMap);

				talendLogs_LOGS.addMessage(
						"tDie",
						"tDie_7",
						5,
						"can't remove ftp file "
								+ context.getProperty("sftpfolder")
								+ context.getProperty("uosfolder") + "/"
								+ ((String) context.getProperty("uosfile")), 7);
				talendLogs_LOGSProcess(globalMap);

				globalMap.put("tDie_7_DIE_PRIORITY", 5);
				System.err.println("can't remove ftp file "
						+ context.getProperty("sftpfolder")
						+ context.getProperty("uosfolder") + "/"
						+ ((String) context.getProperty("uosfile")));

				globalMap.put(
						"tDie_7_DIE_MESSAGE",
						"can't remove ftp file "
								+ context.getProperty("sftpfolder")
								+ context.getProperty("uosfolder") + "/"
								+ ((String) context.getProperty("uosfile")));
				globalMap.put(
						"tDie_7_DIE_MESSAGES",
						"can't remove ftp file "
								+ context.getProperty("sftpfolder")
								+ context.getProperty("uosfolder") + "/"
								+ ((String) context.getProperty("uosfile")));
				currentComponent = "tDie_7";
				status = "failure";
				errorCode = new Integer(7);
				globalMap.put("tDie_7_DIE_CODE", errorCode);

				System.exit(7);

				tos_count_tDie_7++;

				/**
				 * [tDie_7 main ] stop
				 */

				/**
				 * [tDie_7 end ] start
				 */

				currentComponent = "tDie_7";

				ok_Hash.put("tDie_7", true);
				end_Hash.put("tDie_7", System.currentTimeMillis());

				/**
				 * [tDie_7 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_7 finally ] start
				 */

				currentComponent = "tDie_7";

				/**
				 * [tDie_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_7_SUBPROCESS_STATE", 1);
	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public routines.system.Document Soap;

		public routines.system.Document getSoap() {
			return this.Soap;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.Soap = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Soap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Soap=" + String.valueOf(Soap));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public routines.system.Document Soap;

		public routines.system.Document getSoap() {
			return this.Soap;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.Soap = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Soap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Soap=" + String.valueOf(Soap));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public routines.system.Document Soap;

		public routines.system.Document getSoap() {
			return this.Soap;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.Soap = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Soap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Soap=" + String.valueOf(Soap));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class nonshippedrequestStruct implements
			routines.system.IPersistableRow<nonshippedrequestStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public routines.system.Document Soap;

		public routines.system.Document getSoap() {
			return this.Soap;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.Soap == null) ? 0 : this.Soap.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final nonshippedrequestStruct other = (nonshippedrequestStruct) obj;

			if (this.Soap == null) {
				if (other.Soap != null)
					return false;

			} else if (!this.Soap.equals(other.Soap))

				return false;

			return true;
		}

		public void copyDataTo(nonshippedrequestStruct other) {

			other.Soap = this.Soap;

		}

		public void copyKeysDataTo(nonshippedrequestStruct other) {

			other.Soap = this.Soap;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.Soap = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Soap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Soap=" + String.valueOf(Soap));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(nonshippedrequestStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Soap, other.Soap);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public routines.system.Document Soap;

		public routines.system.Document getSoap() {
			return this.Soap;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.Soap = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Soap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Soap=" + String.valueOf(Soap));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public routines.system.Document Soap;

		public routines.system.Document getSoap() {
			return this.Soap;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.Soap = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Soap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Soap=" + String.valueOf(Soap));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public routines.system.Document Soap;

		public routines.system.Document getSoap() {
			return this.Soap;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.Soap = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Soap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Soap=" + String.valueOf(Soap));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfnonshippedrequestStruct implements
			routines.system.IPersistableRow<copyOfnonshippedrequestStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public routines.system.Document Soap;

		public routines.system.Document getSoap() {
			return this.Soap;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.Soap == null) ? 0 : this.Soap.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfnonshippedrequestStruct other = (copyOfnonshippedrequestStruct) obj;

			if (this.Soap == null) {
				if (other.Soap != null)
					return false;

			} else if (!this.Soap.equals(other.Soap))

				return false;

			return true;
		}

		public void copyDataTo(copyOfnonshippedrequestStruct other) {

			other.Soap = this.Soap;

		}

		public void copyKeysDataTo(copyOfnonshippedrequestStruct other) {

			other.Soap = this.Soap;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.Soap = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Soap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Soap=" + String.valueOf(Soap));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfnonshippedrequestStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Soap, other.Soap);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public String orderID;

		public String getOrderID() {
			return this.orderID;
		}

		public String orderStatus;

		public String getOrderStatus() {
			return this.orderStatus;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.orderID = readString(dis);

					this.orderStatus = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.orderID, dos);

				// String

				writeString(this.orderStatus, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orderID=" + orderID);
			sb.append(",orderStatus=" + orderStatus);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public String orderID;

		public String getOrderID() {
			return this.orderID;
		}

		public String orderStatus;

		public String getOrderStatus() {
			return this.orderStatus;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.orderID = readString(dis);

					this.orderStatus = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.orderID, dos);

				// String

				writeString(this.orderStatus, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orderID=" + orderID);
			sb.append(",orderStatus=" + orderStatus);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mapcsvStruct implements
			routines.system.IPersistableRow<mapcsvStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String orderID;

		public String getOrderID() {
			return this.orderID;
		}

		public String orderStatus;

		public String getOrderStatus() {
			return this.orderStatus;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orderID == null) ? 0 : this.orderID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final mapcsvStruct other = (mapcsvStruct) obj;

			if (this.orderID == null) {
				if (other.orderID != null)
					return false;

			} else if (!this.orderID.equals(other.orderID))

				return false;

			return true;
		}

		public void copyDataTo(mapcsvStruct other) {

			other.orderID = this.orderID;
			other.orderStatus = this.orderStatus;

		}

		public void copyKeysDataTo(mapcsvStruct other) {

			other.orderID = this.orderID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.orderID = readString(dis);

					this.orderStatus = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.orderID, dos);

				// String

				writeString(this.orderStatus, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orderID=" + orderID);
			sb.append(",orderStatus=" + orderStatus);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mapcsvStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orderID, other.orderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public String orderID;

		public String getOrderID() {
			return this.orderID;
		}

		public String orderStatus;

		public String getOrderStatus() {
			return this.orderStatus;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.orderID = readString(dis);

					this.orderStatus = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.orderID, dos);

				// String

				writeString(this.orderStatus, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orderID=" + orderID);
			sb.append(",orderStatus=" + orderStatus);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				mapcsvStruct mapcsv = new mapcsvStruct();
				row4Struct row4 = new row4Struct();
				copyOfnonshippedrequestStruct copyOfnonshippedrequest = new copyOfnonshippedrequestStruct();
				row7Struct row7 = new row7Struct();
				row23Struct row23 = new row23Struct();
				row24Struct row24 = new row24Struct();
				row5Struct row5 = new row5Struct();
				nonshippedrequestStruct nonshippedrequest = new nonshippedrequestStruct();
				row6Struct row6 = new row6Struct();
				row21Struct row21 = new row21Struct();
				row22Struct row22 = new row22Struct();

				/**
				 * [tXMLMap_4_TXMLMAP_OUT begin ] start
				 */

				ok_Hash.put("tXMLMap_4_TXMLMAP_OUT", false);
				start_Hash.put("tXMLMap_4_TXMLMAP_OUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_4";

				currentComponent = "tXMLMap_4_TXMLMAP_OUT";

				int tos_count_tXMLMap_4_TXMLMAP_OUT = 0;

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_4_TXMLMAP_OUT {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_4_TXMLMAP_OUT__Struct {
				}
				Var__tXMLMap_4_TXMLMAP_OUT__Struct Var__tXMLMap_4_TXMLMAP_OUT = new Var__tXMLMap_4_TXMLMAP_OUT__Struct();
				// ###############################
				// # Outputs initialization
				copyOfnonshippedrequestStruct copyOfnonshippedrequest_tmp = new copyOfnonshippedrequestStruct();
				copyOfnonshippedrequestStruct copyOfnonshippedrequest_save = null;
				// the aggregate variable
				copyOfnonshippedrequestStruct copyOfnonshippedrequest_aggregate = null;
				// init the resultset for aggregate
				java.util.List<Object> allOutsForAggregate_tXMLMap_4 = new java.util.ArrayList<Object>();
				globalMap.put("allOutsForAggregate_tXMLMap_4",
						allOutsForAggregate_tXMLMap_4);
				// ###############################
				int nb_line_tXMLMap_4_TXMLMAP_OUT = 0;

				XML_API_tXMLMap_4_TXMLMAP_OUT xml_api_tXMLMap_4_TXMLMAP_OUT = new XML_API_tXMLMap_4_TXMLMAP_OUT();

				// the map store the previous value of aggregate columns
				java.util.Map<String, Object> aggregateCacheMap_tXMLMap_4_TXMLMAP_OUT = new java.util.HashMap<String, Object>();

				class GenerateDocument_copyOfnonshippedrequest {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					org.dom4j.Element subTreeLoopParent0 = null;
					public boolean subTreeLoop0 = false;

					public GenerateDocument_copyOfnonshippedrequest() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						return this.doc;
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin, row4Struct row4,
							Var__tXMLMap_4_TXMLMAP_OUT__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = doc.addElement("SOAP-ENV:Envelope");
							subTreeRootParent = root;
							root.addNamespace("ns1", TalendString
									.replaceSpecialCharForXML("urn:Magento"));
							root.addNamespace(
									"SOAP-ENV",
									TalendString
											.replaceSpecialCharForXML("http://schemas.xmlsoap.org/soap/envelope/"));
							root.setQName(org.dom4j.DocumentHelper.createQName(
									"Envelope",
									org.dom4j.DocumentHelper.createNamespace(
											"SOAP-ENV",
											TalendString
													.replaceSpecialCharForXML("http://schemas.xmlsoap.org/soap/envelope/"))));
							root.addAttribute("SOAP-ENV:encodingStyle", "");
							org.dom4j.Element root_3 = null;
							if (root.getNamespaceForPrefix("SOAP-ENV") == null) {
								root_3 = root.addElement("Body");
							} else {
								root_3 = root.addElement("SOAP-ENV:Body");
							}
							subTreeRootParent = root_3;
							org.dom4j.Element root_3_4 = null;
							if (root_3.getNamespaceForPrefix("ns1") == null) {
								root_3_4 = root_3.addElement("multiCall");
							} else {
								root_3_4 = root_3.addElement("ns1:multiCall");
							}
							subTreeRootParent = root_3_4;
							org.dom4j.Element root_3_4_5 = null;
							root_3_4_5 = root_3_4.addElement("sessionId");
							valueMap.put("root_3_4_5",
									globalMap.get("sessionId"));
							if (valueMap.get("root_3_4_5") != null) {
								routines.system.NestXMLTool.setText(root_3_4_5,
										FormatterUtils.format(
												globalMap.get("sessionId"),
												null));
							}
							root_3_4_5.addAttribute("xsi:type", "");
							org.dom4j.Element root_3_4_7 = null;
							root_3_4_7 = root_3_4.addElement("calls");
							subTreeRootParent = root_3_4_7;
							root_3_4_7.addAttribute("SOAP-ENC:arrayType", "");
							root_3_4_7.addAttribute("xsi:type", "");
							subTreeLoopParent0 = root_3_4_7;
							org.dom4j.Element root_3_4_10 = null;
							root_3_4_10 = root_3_4.addElement("options");
							root_3_4_10.addAttribute("xsi:nil", "");
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
						org.dom4j.Element loop = null;
						loop = org.dom4j.DocumentHelper.createElement("item");
						subTreeRootParent.elements().add(
								orderHelper.getInsertLocation(0, 0), loop);
						subTreeRootParent = loop;
						loop.addAttribute("SOAP-ENC:arrayType", "");
						loop.addAttribute("xsi:type", "");
						org.dom4j.Element loop_14 = null;
						loop_14 = loop.addElement("item");
						valueMap.put("loop_14", "sales_order_shipment.create");
						if (valueMap.get("loop_14") != null) {
							routines.system.NestXMLTool
									.setText(
											loop_14,
											FormatterUtils
													.format("sales_order_shipment.create",
															null));
						}
						org.dom4j.Element loop_15 = null;
						loop_15 = loop.addElement("item");
						loop_15.addAttribute("SOAP-ENC:arrayType", "");
						loop_15.addAttribute("xsi:type", "");
						org.dom4j.Element loop_15_18 = null;
						loop_15_18 = loop_15.addElement("item");
						valueMap.put("loop_15_18", row4.orderID);
						if (valueMap.get("loop_15_18") != null) {
							routines.system.NestXMLTool.setText(loop_15_18,
									FormatterUtils.format(row4.orderID, null));
						}
						org.dom4j.Element loop_15_19 = null;
						loop_15_19 = loop_15.addElement("item");
						org.dom4j.Element loop_15_20 = null;
						loop_15_20 = loop_15.addElement("item");
						org.dom4j.Element loop_15_21 = null;
						loop_15_21 = loop_15.addElement("item");
						valueMap.put("loop_15_21", "true");
						if (valueMap.get("loop_15_21") != null) {
							routines.system.NestXMLTool.setText(loop_15_21,
									FormatterUtils.format("true", null));
						}
					}
				}

				GenerateDocument_copyOfnonshippedrequest gen_Doc_copyOfnonshippedrequest_tXMLMap_4_TXMLMAP_OUT = new GenerateDocument_copyOfnonshippedrequest();
				boolean docAlreadyInstanciate_copyOfnonshippedrequest = false;

				/**
				 * [tXMLMap_4_TXMLMAP_OUT begin ] stop
				 */

				/**
				 * [tXMLMap_1_TXMLMAP_OUT begin ] start
				 */

				ok_Hash.put("tXMLMap_1_TXMLMAP_OUT", false);
				start_Hash.put("tXMLMap_1_TXMLMAP_OUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_1";

				currentComponent = "tXMLMap_1_TXMLMAP_OUT";

				int tos_count_tXMLMap_1_TXMLMAP_OUT = 0;

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_1_TXMLMAP_OUT {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_1_TXMLMAP_OUT__Struct {
				}
				Var__tXMLMap_1_TXMLMAP_OUT__Struct Var__tXMLMap_1_TXMLMAP_OUT = new Var__tXMLMap_1_TXMLMAP_OUT__Struct();
				// ###############################
				// # Outputs initialization
				nonshippedrequestStruct nonshippedrequest_tmp = new nonshippedrequestStruct();
				nonshippedrequestStruct nonshippedrequest_save = null;
				// the aggregate variable
				nonshippedrequestStruct nonshippedrequest_aggregate = null;
				// init the resultset for aggregate
				java.util.List<Object> allOutsForAggregate_tXMLMap_1 = new java.util.ArrayList<Object>();
				globalMap.put("allOutsForAggregate_tXMLMap_1",
						allOutsForAggregate_tXMLMap_1);
				// ###############################
				int nb_line_tXMLMap_1_TXMLMAP_OUT = 0;

				XML_API_tXMLMap_1_TXMLMAP_OUT xml_api_tXMLMap_1_TXMLMAP_OUT = new XML_API_tXMLMap_1_TXMLMAP_OUT();

				// the map store the previous value of aggregate columns
				java.util.Map<String, Object> aggregateCacheMap_tXMLMap_1_TXMLMAP_OUT = new java.util.HashMap<String, Object>();

				class GenerateDocument_nonshippedrequest {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					org.dom4j.Element subTreeLoopParent0 = null;
					public boolean subTreeLoop0 = false;

					public GenerateDocument_nonshippedrequest() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						return this.doc;
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin, row5Struct row5,
							Var__tXMLMap_1_TXMLMAP_OUT__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = doc.addElement("SOAP-ENV:Envelope");
							subTreeRootParent = root;
							root.addNamespace("ns1", TalendString
									.replaceSpecialCharForXML("urn:Magento"));
							root.addNamespace(
									"SOAP-ENV",
									TalendString
											.replaceSpecialCharForXML("http://schemas.xmlsoap.org/soap/envelope/"));
							root.setQName(org.dom4j.DocumentHelper.createQName(
									"Envelope",
									org.dom4j.DocumentHelper.createNamespace(
											"SOAP-ENV",
											TalendString
													.replaceSpecialCharForXML("http://schemas.xmlsoap.org/soap/envelope/"))));
							root.addAttribute("SOAP-ENV:encodingStyle", "");
							org.dom4j.Element root_3 = null;
							if (root.getNamespaceForPrefix("SOAP-ENV") == null) {
								root_3 = root.addElement("Body");
							} else {
								root_3 = root.addElement("SOAP-ENV:Body");
							}
							subTreeRootParent = root_3;
							org.dom4j.Element root_3_4 = null;
							if (root_3.getNamespaceForPrefix("ns1") == null) {
								root_3_4 = root_3.addElement("multiCall");
							} else {
								root_3_4 = root_3.addElement("ns1:multiCall");
							}
							subTreeRootParent = root_3_4;
							org.dom4j.Element root_3_4_5 = null;
							root_3_4_5 = root_3_4.addElement("sessionId");
							valueMap.put("root_3_4_5",
									globalMap.get("sessionId"));
							if (valueMap.get("root_3_4_5") != null) {
								routines.system.NestXMLTool.setText(root_3_4_5,
										FormatterUtils.format(
												globalMap.get("sessionId"),
												null));
							}
							root_3_4_5.addAttribute("xsi:type", "");
							org.dom4j.Element root_3_4_7 = null;
							root_3_4_7 = root_3_4.addElement("calls");
							subTreeRootParent = root_3_4_7;
							root_3_4_7.addAttribute("SOAP-ENC:arrayType", "");
							root_3_4_7.addAttribute("xsi:type", "");
							subTreeLoopParent0 = root_3_4_7;
							org.dom4j.Element root_3_4_10 = null;
							root_3_4_10 = root_3_4.addElement("options");
							root_3_4_10.addAttribute("xsi:nil", "");
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
						org.dom4j.Element loop = null;
						loop = org.dom4j.DocumentHelper.createElement("item");
						subTreeRootParent.elements().add(
								orderHelper.getInsertLocation(0, 0), loop);
						subTreeRootParent = loop;
						loop.addAttribute("SOAP-ENC:arrayType", "");
						loop.addAttribute("xsi:type", "");
						org.dom4j.Element loop_14 = null;
						loop_14 = loop.addElement("item");
						valueMap.put("loop_14", "sales_order.addComment");
						if (valueMap.get("loop_14") != null) {
							routines.system.NestXMLTool.setText(loop_14,
									FormatterUtils.format(
											"sales_order.addComment", null));
						}
						org.dom4j.Element loop_15 = null;
						loop_15 = loop.addElement("item");
						loop_15.addAttribute("SOAP-ENC:arrayType", "");
						loop_15.addAttribute("xsi:type", "");
						org.dom4j.Element loop_15_18 = null;
						loop_15_18 = loop_15.addElement("item");
						valueMap.put("loop_15_18", row5.orderID);
						if (valueMap.get("loop_15_18") != null) {
							routines.system.NestXMLTool.setText(loop_15_18,
									FormatterUtils.format(row5.orderID, null));
						}
						org.dom4j.Element loop_15_19 = null;
						loop_15_19 = loop_15.addElement("item");
						valueMap.put("loop_15_19", row5.orderStatus);
						if (valueMap.get("loop_15_19") != null) {
							routines.system.NestXMLTool.setText(loop_15_19,
									FormatterUtils.format(row5.orderStatus,
											null));
						}
						org.dom4j.Element loop_15_20 = null;
						loop_15_20 = loop_15.addElement("item");
						valueMap.put("loop_15_20", "etl import - New status "
								+ row5.orderStatus);
						if (valueMap.get("loop_15_20") != null) {
							routines.system.NestXMLTool.setText(loop_15_20,
									FormatterUtils.format(
											"etl import - New status "
													+ row5.orderStatus, null));
						}
						org.dom4j.Element loop_15_21 = null;
						loop_15_21 = loop_15.addElement("item");
						valueMap.put("loop_15_21", "true");
						if (valueMap.get("loop_15_21") != null) {
							routines.system.NestXMLTool.setText(loop_15_21,
									FormatterUtils.format("true", null));
						}
					}
				}

				GenerateDocument_nonshippedrequest gen_Doc_nonshippedrequest_tXMLMap_1_TXMLMAP_OUT = new GenerateDocument_nonshippedrequest();
				boolean docAlreadyInstanciate_nonshippedrequest = false;

				/**
				 * [tXMLMap_1_TXMLMAP_OUT begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				int tos_count_tFilterRow_2 = 0;

				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				mapcsvStruct mapcsv_tmp = new mapcsvStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try {

					Object filename_tFileInputDelimited_2 = context.etlinterfacefolder
							+ "/"
							+ context.getProperty("uosfolder")
							+ "/"
							+ context.getProperty("uosfile");
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0
								|| random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								context.etlinterfacefolder + "/"
										+ context.getProperty("uosfolder")
										+ "/" + context.getProperty("uosfile"),
								"UTF-8", "|", "\n", false, 0, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null
							&& fid_tFileInputDelimited_2.nextRecord()) {

						row3 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row3 = new row3Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							columnIndexWithD_tFileInputDelimited_2 = 0;

							row3.orderID = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row3.orderStatus = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								mapcsv = null;

								// # Output table : 'mapcsv'
								mapcsv_tmp.orderID = row3.orderID;
								mapcsv_tmp.orderStatus = row3.orderStatus;
								mapcsv = mapcsv_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "mapcsv"
							if (mapcsv != null) {

								/**
								 * [tFilterRow_2 main ] start
								 */

								currentComponent = "tFilterRow_2";

								row5 = null;
								row4 = null;
								Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2(
										"||");
								ope_tFilterRow_2
										.matches(
												(mapcsv.orderStatus == null ? false
														: mapcsv.orderStatus
																.compareTo("shipped") == 0),
												"orderStatus.compareTo(\"shipped\") == 0 failed");
								ope_tFilterRow_2
										.matches(
												(mapcsv.orderStatus == null ? false
														: mapcsv.orderStatus
																.compareTo("ready for collection") == 0),
												"orderStatus.compareTo(\"ready for collection\") == 0 failed");

								if (ope_tFilterRow_2.getMatchFlag()) {
									if (row4 == null) {
										row4 = new row4Struct();
									}
									row4.orderID = mapcsv.orderID;
									row4.orderStatus = mapcsv.orderStatus;
									nb_line_ok_tFilterRow_2++;
								} else {
									if (row5 == null) {
										row5 = new row5Struct();
									}
									row5.orderID = mapcsv.orderID;
									row5.orderStatus = mapcsv.orderStatus;
									nb_line_reject_tFilterRow_2++;
								}

								nb_line_tFilterRow_2++;

								tos_count_tFilterRow_2++;

								/**
								 * [tFilterRow_2 main ] stop
								 */
								// Start of branch "row4"
								if (row4 != null) {

									/**
									 * [tXMLMap_4_TXMLMAP_OUT main ] start
									 */

									currentVirtualComponent = "tXMLMap_4";

									currentComponent = "tXMLMap_4_TXMLMAP_OUT";

									boolean rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
									boolean rejectedDocInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
									boolean mainRowRejected_tXMLMap_4_TXMLMAP_OUT = false;
									boolean isMatchDocRowtXMLMap_4_TXMLMAP_OUT = false;

									copyOfnonshippedrequest_tmp.Soap = null;

									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tXMLMap_4_TXMLMAP_OUT__Struct Var = Var__tXMLMap_4_TXMLMAP_OUT;
										// ###############################
										// # Output tables

										copyOfnonshippedrequest = null;

										// # Output table :
										// 'copyOfnonshippedrequest'

										if (!docAlreadyInstanciate_copyOfnonshippedrequest) {
											docAlreadyInstanciate_copyOfnonshippedrequest = true;
											gen_Doc_copyOfnonshippedrequest_tXMLMap_4_TXMLMAP_OUT = new GenerateDocument_copyOfnonshippedrequest();
											// init one new out struct for cache
											// the result.
											copyOfnonshippedrequest_aggregate = new copyOfnonshippedrequestStruct();
											copyOfnonshippedrequest_aggregate.Soap = new routines.system.Document();
											copyOfnonshippedrequest_aggregate.Soap
													.setDocument(gen_Doc_copyOfnonshippedrequest_tXMLMap_4_TXMLMAP_OUT
															.getDocument());

											// construct the resultset
											allOutsForAggregate_tXMLMap_4
													.add(copyOfnonshippedrequest_aggregate);
										}

										gen_Doc_copyOfnonshippedrequest_tXMLMap_4_TXMLMAP_OUT
												.generateElements(
														rejectedDocInnerJoin_tXMLMap_4_TXMLMAP_OUT,
														row4, Var);

										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;

									tos_count_tXMLMap_4_TXMLMAP_OUT++;

									/**
									 * [tXMLMap_4_TXMLMAP_OUT main ] stop
									 */

								} // End of branch "row4"

								// Start of branch "row5"
								if (row5 != null) {

									/**
									 * [tXMLMap_1_TXMLMAP_OUT main ] start
									 */

									currentVirtualComponent = "tXMLMap_1";

									currentComponent = "tXMLMap_1_TXMLMAP_OUT";

									boolean rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
									boolean rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
									boolean mainRowRejected_tXMLMap_1_TXMLMAP_OUT = false;
									boolean isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;

									nonshippedrequest_tmp.Soap = null;

									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tXMLMap_1_TXMLMAP_OUT__Struct Var = Var__tXMLMap_1_TXMLMAP_OUT;
										// ###############################
										// # Output tables

										nonshippedrequest = null;

										// # Output table : 'nonshippedrequest'

										if (!docAlreadyInstanciate_nonshippedrequest) {
											docAlreadyInstanciate_nonshippedrequest = true;
											gen_Doc_nonshippedrequest_tXMLMap_1_TXMLMAP_OUT = new GenerateDocument_nonshippedrequest();
											// init one new out struct for cache
											// the result.
											nonshippedrequest_aggregate = new nonshippedrequestStruct();
											nonshippedrequest_aggregate.Soap = new routines.system.Document();
											nonshippedrequest_aggregate.Soap
													.setDocument(gen_Doc_nonshippedrequest_tXMLMap_1_TXMLMAP_OUT
															.getDocument());

											// construct the resultset
											allOutsForAggregate_tXMLMap_1
													.add(nonshippedrequest_aggregate);
										}

										gen_Doc_nonshippedrequest_tXMLMap_1_TXMLMAP_OUT
												.generateElements(
														rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT,
														row5, Var);

										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;

									tos_count_tXMLMap_1_TXMLMAP_OUT++;

									/**
									 * [tXMLMap_1_TXMLMAP_OUT main ] stop
									 */

								} // End of branch "row5"

							} // End of branch "mapcsv"

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) (context.etlinterfacefolder + "/"
							+ context.getProperty("uosfolder") + "/" + context
								.getProperty("uosfile")) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK",
						nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_2);

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tXMLMap_4_TXMLMAP_OUT end ] start
				 */

				currentVirtualComponent = "tXMLMap_4";

				currentComponent = "tXMLMap_4_TXMLMAP_OUT";

				ok_Hash.put("tXMLMap_4_TXMLMAP_OUT", true);
				end_Hash.put("tXMLMap_4_TXMLMAP_OUT",
						System.currentTimeMillis());

				/**
				 * [tXMLMap_4_TXMLMAP_OUT end ] stop
				 */

				/**
				 * [tFileOutputXML_2 begin ] start
				 */

				ok_Hash.put("tFileOutputXML_2", false);
				start_Hash.put("tFileOutputXML_2", System.currentTimeMillis());

				currentComponent = "tFileOutputXML_2";

				int tos_count_tFileOutputXML_2 = 0;

				String originalFileName_tFileOutputXML_2 = context.etlinterfacefolder
						+ "/"
						+ context.getProperty("uostmpfolder")
						+ "/soapresponse_shipped.tmp";
				java.io.File originalFile_tFileOutputXML_2 = new java.io.File(
						originalFileName_tFileOutputXML_2);

				String fileName_tFileOutputXML_2 = originalFileName_tFileOutputXML_2;
				java.io.File file_tFileOutputXML_2 = new java.io.File(
						fileName_tFileOutputXML_2);
				if (!file_tFileOutputXML_2.isAbsolute()) {
					file_tFileOutputXML_2 = file_tFileOutputXML_2
							.getCanonicalFile();
				}

				// create directory only if not exists

				file_tFileOutputXML_2.getParentFile().mkdirs();

				int nb_line_tFileOutputXML_2 = 0;
				org.dom4j.io.OutputFormat format_tFileOutputXML_2 = org.dom4j.io.OutputFormat
						.createPrettyPrint();
				format_tFileOutputXML_2.setEncoding("UTF-8");
				format_tFileOutputXML_2.setNewLineAfterDeclaration(false);
				format_tFileOutputXML_2.setTrimText(false);
				org.dom4j.io.XMLWriter writer_tFileOutputXML_2 = new org.dom4j.io.XMLWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										file_tFileOutputXML_2), "UTF-8"),
						format_tFileOutputXML_2);

				/**
				 * [tFileOutputXML_2 begin ] stop
				 */

				/**
				 * [tJavaRow_4 begin ] start
				 */

				ok_Hash.put("tJavaRow_4", false);
				start_Hash.put("tJavaRow_4", System.currentTimeMillis());

				currentComponent = "tJavaRow_4";

				int tos_count_tJavaRow_4 = 0;

				int nb_line_tJavaRow_4 = 0;

				/**
				 * [tJavaRow_4 begin ] stop
				 */

				/**
				 * [tReplicate_2 begin ] start
				 */

				ok_Hash.put("tReplicate_2", false);
				start_Hash.put("tReplicate_2", System.currentTimeMillis());

				currentComponent = "tReplicate_2";

				int tos_count_tReplicate_2 = 0;

				/**
				 * [tReplicate_2 begin ] stop
				 */

				/**
				 * [tSOAP_3 begin ] start
				 */

				ok_Hash.put("tSOAP_3", false);
				start_Hash.put("tSOAP_3", System.currentTimeMillis());

				currentComponent = "tSOAP_3";

				int tos_count_tSOAP_3 = 0;

				org.talend.soap.SOAPUtil soapUtil_tSOAP_3 = new org.talend.soap.SOAPUtil();

				final String decryptedPassword_tSOAP_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

				/**
				 * [tSOAP_3 begin ] stop
				 */

				/**
				 * [tXMLMap_4_TXMLMAP_IN begin ] start
				 */

				ok_Hash.put("tXMLMap_4_TXMLMAP_IN", false);
				start_Hash.put("tXMLMap_4_TXMLMAP_IN",
						System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_4";

				currentComponent = "tXMLMap_4_TXMLMAP_IN";

				int tos_count_tXMLMap_4_TXMLMAP_IN = 0;

				java.util.List<Object> outs_tXMLMap_4 = (java.util.List<Object>) globalMap
						.get("allOutsForAggregate_tXMLMap_4");
				for (Object row_out_tXMLMap_4_TXMLMAP_IN : outs_tXMLMap_4) {// TD512

					/**
					 * [tXMLMap_4_TXMLMAP_IN begin ] stop
					 */

					/**
					 * [tXMLMap_4_TXMLMAP_IN main ] start
					 */

					currentVirtualComponent = "tXMLMap_4";

					currentComponent = "tXMLMap_4_TXMLMAP_IN";

					copyOfnonshippedrequest = null;
					if (row_out_tXMLMap_4_TXMLMAP_IN != null
							&& row_out_tXMLMap_4_TXMLMAP_IN instanceof copyOfnonshippedrequestStruct) {
						copyOfnonshippedrequest = (copyOfnonshippedrequestStruct) row_out_tXMLMap_4_TXMLMAP_IN;
						routines.system.NestXMLTool.generateOk(
								copyOfnonshippedrequest.Soap, false);
					}

					tos_count_tXMLMap_4_TXMLMAP_IN++;

					/**
					 * [tXMLMap_4_TXMLMAP_IN main ] stop
					 */
					// Start of branch "copyOfnonshippedrequest"
					if (copyOfnonshippedrequest != null) {

						/**
						 * [tSOAP_3 main ] start
						 */

						currentComponent = "tSOAP_3";

						String document_tSOAP_3 = soapUtil_tSOAP_3
								.extractContentAsDocument(
										org.talend.soap.SOAPUtil.SOAP11,
										"http://"
												+ context
														.getProperty("endpointhostname")
												+ "/index.php/api/soap/index/",
										"urn:Mage_Api_Model_Server_HandlerAction",
										copyOfnonshippedrequest.Soap.toString());

						// for output

						row7 = new row7Struct();

						row7.Soap = ParserUtils
								.parseTo_Document(document_tSOAP_3);

						tos_count_tSOAP_3++;

						/**
						 * [tSOAP_3 main ] stop
						 */

						/**
						 * [tReplicate_2 main ] start
						 */

						currentComponent = "tReplicate_2";

						row23 = new row23Struct();

						row23.Soap = row7.Soap;
						row24 = new row24Struct();

						row24.Soap = row7.Soap;

						tos_count_tReplicate_2++;

						/**
						 * [tReplicate_2 main ] stop
						 */

						/**
						 * [tFileOutputXML_2 main ] start
						 */

						currentComponent = "tFileOutputXML_2";

						nb_line_tFileOutputXML_2++;
						writer_tFileOutputXML_2.write(row23.Soap.getDocument());

						tos_count_tFileOutputXML_2++;

						/**
						 * [tFileOutputXML_2 main ] stop
						 */

						/**
						 * [tJavaRow_4 main ] start
						 */

						currentComponent = "tJavaRow_4";

						((Logger) globalMap.get("LOGGER"))
								.debug("shipped Soap Response "
										+ row24.toString());
						nb_line_tJavaRow_4++;

						tos_count_tJavaRow_4++;

						/**
						 * [tJavaRow_4 main ] stop
						 */

					} // End of branch "copyOfnonshippedrequest"

					/**
					 * [tXMLMap_4_TXMLMAP_IN end ] start
					 */

					currentVirtualComponent = "tXMLMap_4";

					currentComponent = "tXMLMap_4_TXMLMAP_IN";

				}// TD512

				ok_Hash.put("tXMLMap_4_TXMLMAP_IN", true);
				end_Hash.put("tXMLMap_4_TXMLMAP_IN", System.currentTimeMillis());

				/**
				 * [tXMLMap_4_TXMLMAP_IN end ] stop
				 */

				/**
				 * [tSOAP_3 end ] start
				 */

				currentComponent = "tSOAP_3";

				soapUtil_tSOAP_3.close();

				ok_Hash.put("tSOAP_3", true);
				end_Hash.put("tSOAP_3", System.currentTimeMillis());

				/**
				 * [tSOAP_3 end ] stop
				 */

				/**
				 * [tReplicate_2 end ] start
				 */

				currentComponent = "tReplicate_2";

				ok_Hash.put("tReplicate_2", true);
				end_Hash.put("tReplicate_2", System.currentTimeMillis());

				/**
				 * [tReplicate_2 end ] stop
				 */

				/**
				 * [tFileOutputXML_2 end ] start
				 */

				currentComponent = "tFileOutputXML_2";

				writer_tFileOutputXML_2.close();

				ok_Hash.put("tFileOutputXML_2", true);
				end_Hash.put("tFileOutputXML_2", System.currentTimeMillis());

				tFileExist_2Process(globalMap);

				/**
				 * [tFileOutputXML_2 end ] stop
				 */

				/**
				 * [tJavaRow_4 end ] start
				 */

				currentComponent = "tJavaRow_4";

				globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

				ok_Hash.put("tJavaRow_4", true);
				end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				/**
				 * [tJavaRow_4 end ] stop
				 */

				/**
				 * [tXMLMap_1_TXMLMAP_OUT end ] start
				 */

				currentVirtualComponent = "tXMLMap_1";

				currentComponent = "tXMLMap_1_TXMLMAP_OUT";

				ok_Hash.put("tXMLMap_1_TXMLMAP_OUT", true);
				end_Hash.put("tXMLMap_1_TXMLMAP_OUT",
						System.currentTimeMillis());

				/**
				 * [tXMLMap_1_TXMLMAP_OUT end ] stop
				 */

				/**
				 * [tFileOutputXML_1 begin ] start
				 */

				ok_Hash.put("tFileOutputXML_1", false);
				start_Hash.put("tFileOutputXML_1", System.currentTimeMillis());

				currentComponent = "tFileOutputXML_1";

				int tos_count_tFileOutputXML_1 = 0;

				String originalFileName_tFileOutputXML_1 = context.etlinterfacefolder
						+ "/"
						+ context.getProperty("uostmpfolder")
						+ "/soapresponse_nonshipped.tmp";
				java.io.File originalFile_tFileOutputXML_1 = new java.io.File(
						originalFileName_tFileOutputXML_1);

				String fileName_tFileOutputXML_1 = originalFileName_tFileOutputXML_1;
				java.io.File file_tFileOutputXML_1 = new java.io.File(
						fileName_tFileOutputXML_1);
				if (!file_tFileOutputXML_1.isAbsolute()) {
					file_tFileOutputXML_1 = file_tFileOutputXML_1
							.getCanonicalFile();
				}

				// create directory only if not exists

				file_tFileOutputXML_1.getParentFile().mkdirs();

				int nb_line_tFileOutputXML_1 = 0;
				org.dom4j.io.OutputFormat format_tFileOutputXML_1 = org.dom4j.io.OutputFormat
						.createPrettyPrint();
				format_tFileOutputXML_1.setEncoding("UTF-8");
				format_tFileOutputXML_1.setNewLineAfterDeclaration(false);
				format_tFileOutputXML_1.setTrimText(false);
				org.dom4j.io.XMLWriter writer_tFileOutputXML_1 = new org.dom4j.io.XMLWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										file_tFileOutputXML_1), "UTF-8"),
						format_tFileOutputXML_1);

				/**
				 * [tFileOutputXML_1 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tReplicate_1 begin ] start
				 */

				ok_Hash.put("tReplicate_1", false);
				start_Hash.put("tReplicate_1", System.currentTimeMillis());

				currentComponent = "tReplicate_1";

				int tos_count_tReplicate_1 = 0;

				/**
				 * [tReplicate_1 begin ] stop
				 */

				/**
				 * [tSOAP_2 begin ] start
				 */

				ok_Hash.put("tSOAP_2", false);
				start_Hash.put("tSOAP_2", System.currentTimeMillis());

				currentComponent = "tSOAP_2";

				int tos_count_tSOAP_2 = 0;

				org.talend.soap.SOAPUtil soapUtil_tSOAP_2 = new org.talend.soap.SOAPUtil();

				final String decryptedPassword_tSOAP_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

				/**
				 * [tSOAP_2 begin ] stop
				 */

				/**
				 * [tXMLMap_1_TXMLMAP_IN begin ] start
				 */

				ok_Hash.put("tXMLMap_1_TXMLMAP_IN", false);
				start_Hash.put("tXMLMap_1_TXMLMAP_IN",
						System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_1";

				currentComponent = "tXMLMap_1_TXMLMAP_IN";

				int tos_count_tXMLMap_1_TXMLMAP_IN = 0;

				java.util.List<Object> outs_tXMLMap_1 = (java.util.List<Object>) globalMap
						.get("allOutsForAggregate_tXMLMap_1");
				for (Object row_out_tXMLMap_1_TXMLMAP_IN : outs_tXMLMap_1) {// TD512

					/**
					 * [tXMLMap_1_TXMLMAP_IN begin ] stop
					 */

					/**
					 * [tXMLMap_1_TXMLMAP_IN main ] start
					 */

					currentVirtualComponent = "tXMLMap_1";

					currentComponent = "tXMLMap_1_TXMLMAP_IN";

					nonshippedrequest = null;
					if (row_out_tXMLMap_1_TXMLMAP_IN != null
							&& row_out_tXMLMap_1_TXMLMAP_IN instanceof nonshippedrequestStruct) {
						nonshippedrequest = (nonshippedrequestStruct) row_out_tXMLMap_1_TXMLMAP_IN;
						routines.system.NestXMLTool.generateOk(
								nonshippedrequest.Soap, false);
					}

					tos_count_tXMLMap_1_TXMLMAP_IN++;

					/**
					 * [tXMLMap_1_TXMLMAP_IN main ] stop
					 */
					// Start of branch "nonshippedrequest"
					if (nonshippedrequest != null) {

						/**
						 * [tSOAP_2 main ] start
						 */

						currentComponent = "tSOAP_2";

						String document_tSOAP_2 = soapUtil_tSOAP_2
								.extractContentAsDocument(
										org.talend.soap.SOAPUtil.SOAP11,
										"http://"
												+ context
														.getProperty("endpointhostname")
												+ "/index.php/api/soap/index/",
										"urn:Mage_Api_Model_Server_HandlerAction",
										nonshippedrequest.Soap.toString());

						// for output

						row6 = new row6Struct();

						row6.Soap = ParserUtils
								.parseTo_Document(document_tSOAP_2);

						tos_count_tSOAP_2++;

						/**
						 * [tSOAP_2 main ] stop
						 */

						/**
						 * [tReplicate_1 main ] start
						 */

						currentComponent = "tReplicate_1";

						row21 = new row21Struct();

						row21.Soap = row6.Soap;
						row22 = new row22Struct();

						row22.Soap = row6.Soap;

						tos_count_tReplicate_1++;

						/**
						 * [tReplicate_1 main ] stop
						 */

						/**
						 * [tFileOutputXML_1 main ] start
						 */

						currentComponent = "tFileOutputXML_1";

						nb_line_tFileOutputXML_1++;
						writer_tFileOutputXML_1.write(row21.Soap.getDocument());

						tos_count_tFileOutputXML_1++;

						/**
						 * [tFileOutputXML_1 main ] stop
						 */

						/**
						 * [tJavaRow_3 main ] start
						 */

						currentComponent = "tJavaRow_3";

						((Logger) globalMap.get("LOGGER"))
								.debug(" nonshipped Soap Response"
										+ row22.toString());

						nb_line_tJavaRow_3++;

						tos_count_tJavaRow_3++;

						/**
						 * [tJavaRow_3 main ] stop
						 */

					} // End of branch "nonshippedrequest"

					/**
					 * [tXMLMap_1_TXMLMAP_IN end ] start
					 */

					currentVirtualComponent = "tXMLMap_1";

					currentComponent = "tXMLMap_1_TXMLMAP_IN";

				}// TD512

				ok_Hash.put("tXMLMap_1_TXMLMAP_IN", true);
				end_Hash.put("tXMLMap_1_TXMLMAP_IN", System.currentTimeMillis());

				/**
				 * [tXMLMap_1_TXMLMAP_IN end ] stop
				 */

				/**
				 * [tSOAP_2 end ] start
				 */

				currentComponent = "tSOAP_2";

				soapUtil_tSOAP_2.close();

				ok_Hash.put("tSOAP_2", true);
				end_Hash.put("tSOAP_2", System.currentTimeMillis());

				/**
				 * [tSOAP_2 end ] stop
				 */

				/**
				 * [tReplicate_1 end ] start
				 */

				currentComponent = "tReplicate_1";

				ok_Hash.put("tReplicate_1", true);
				end_Hash.put("tReplicate_1", System.currentTimeMillis());

				/**
				 * [tReplicate_1 end ] stop
				 */

				/**
				 * [tFileOutputXML_1 end ] start
				 */

				currentComponent = "tFileOutputXML_1";

				writer_tFileOutputXML_1.close();

				ok_Hash.put("tFileOutputXML_1", true);
				end_Hash.put("tFileOutputXML_1", System.currentTimeMillis());

				tFileExist_3Process(globalMap);

				/**
				 * [tFileOutputXML_1 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tXMLMap_4_TXMLMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tXMLMap_4";

				currentComponent = "tXMLMap_4_TXMLMAP_OUT";

				/**
				 * [tXMLMap_4_TXMLMAP_OUT finally ] stop
				 */

				/**
				 * [tXMLMap_4_TXMLMAP_IN finally ] start
				 */

				currentVirtualComponent = "tXMLMap_4";

				currentComponent = "tXMLMap_4_TXMLMAP_IN";

				/**
				 * [tXMLMap_4_TXMLMAP_IN finally ] stop
				 */

				/**
				 * [tSOAP_3 finally ] start
				 */

				currentComponent = "tSOAP_3";

				/**
				 * [tSOAP_3 finally ] stop
				 */

				/**
				 * [tReplicate_2 finally ] start
				 */

				currentComponent = "tReplicate_2";

				/**
				 * [tReplicate_2 finally ] stop
				 */

				/**
				 * [tFileOutputXML_2 finally ] start
				 */

				currentComponent = "tFileOutputXML_2";

				/**
				 * [tFileOutputXML_2 finally ] stop
				 */

				/**
				 * [tJavaRow_4 finally ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 finally ] stop
				 */

				/**
				 * [tXMLMap_1_TXMLMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tXMLMap_1";

				currentComponent = "tXMLMap_1_TXMLMAP_OUT";

				/**
				 * [tXMLMap_1_TXMLMAP_OUT finally ] stop
				 */

				/**
				 * [tXMLMap_1_TXMLMAP_IN finally ] start
				 */

				currentVirtualComponent = "tXMLMap_1";

				currentComponent = "tXMLMap_1_TXMLMAP_IN";

				/**
				 * [tXMLMap_1_TXMLMAP_IN finally ] stop
				 */

				/**
				 * [tSOAP_2 finally ] start
				 */

				currentComponent = "tSOAP_2";

				/**
				 * [tSOAP_2 finally ] stop
				 */

				/**
				 * [tReplicate_1 finally ] start
				 */

				currentComponent = "tReplicate_1";

				/**
				 * [tReplicate_1 finally ] stop
				 */

				/**
				 * [tFileOutputXML_1 finally ] start
				 */

				currentComponent = "tFileOutputXML_1";

				/**
				 * [tFileOutputXML_1 finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileExist_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_2 begin ] start
				 */

				ok_Hash.put("tFileExist_2", false);
				start_Hash.put("tFileExist_2", System.currentTimeMillis());

				currentComponent = "tFileExist_2";

				int tos_count_tFileExist_2 = 0;

				/**
				 * [tFileExist_2 begin ] stop
				 */

				/**
				 * [tFileExist_2 main ] start
				 */

				currentComponent = "tFileExist_2";

				java.io.File file_tFileExist_2 = new java.io.File(
						context.etlinterfacefolder + "/"
								+ context.getProperty("uostmpfolder")
								+ "/soapresponse_shipped.tmp");
				if (!file_tFileExist_2.exists()) {
					globalMap.put("tFileExist_2_EXISTS", false);
				} else {
					globalMap.put("tFileExist_2_EXISTS", true);
				}

				globalMap.put(
						"tFileExist_2_FILENAME",
						context.etlinterfacefolder + "/"
								+ context.getProperty("uostmpfolder")
								+ "/soapresponse_shipped.tmp");

				tos_count_tFileExist_2++;

				/**
				 * [tFileExist_2 main ] stop
				 */

				/**
				 * [tFileExist_2 end ] start
				 */

				currentComponent = "tFileExist_2";

				ok_Hash.put("tFileExist_2", true);
				end_Hash.put("tFileExist_2", System.currentTimeMillis());

				if (((Boolean) globalMap.get("tFileExist_2_EXISTS"))) {

					tFileProperties_3Process(globalMap);
				}

				if (!((Boolean) globalMap.get("tFileExist_2_EXISTS"))) {

					tWarn_2Process(globalMap);
				}

				/**
				 * [tFileExist_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_2 finally ] start
				 */

				currentComponent = "tFileExist_2";

				/**
				 * [tFileExist_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_2_SUBPROCESS_STATE", 1);
	}

	public static class row25Struct implements
			routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public String abs_path;

		public String getAbs_path() {
			return this.abs_path;
		}

		public String dirname;

		public String getDirname() {
			return this.dirname;
		}

		public String basename;

		public String getBasename() {
			return this.basename;
		}

		public String mode_string;

		public String getMode_string() {
			return this.mode_string;
		}

		public Long size;

		public Long getSize() {
			return this.size;
		}

		public Long mtime;

		public Long getMtime() {
			return this.mtime;
		}

		public String mtime_string;

		public String getMtime_string() {
			return this.mtime_string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.abs_path = readString(dis);

					this.dirname = readString(dis);

					this.basename = readString(dis);

					this.mode_string = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.size = null;
					} else {
						this.size = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mtime = null;
					} else {
						this.mtime = dis.readLong();
					}

					this.mtime_string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.abs_path, dos);

				// String

				writeString(this.dirname, dos);

				// String

				writeString(this.basename, dos);

				// String

				writeString(this.mode_string, dos);

				// Long

				if (this.size == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.size);
				}

				// Long

				if (this.mtime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.mtime);
				}

				// String

				writeString(this.mtime_string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("abs_path=" + abs_path);
			sb.append(",dirname=" + dirname);
			sb.append(",basename=" + basename);
			sb.append(",mode_string=" + mode_string);
			sb.append(",size=" + String.valueOf(size));
			sb.append(",mtime=" + String.valueOf(mtime));
			sb.append(",mtime_string=" + mtime_string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileProperties_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileProperties_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row25Struct row25 = new row25Struct();

				/**
				 * [tJavaRow_9 begin ] start
				 */

				ok_Hash.put("tJavaRow_9", false);
				start_Hash.put("tJavaRow_9", System.currentTimeMillis());

				currentComponent = "tJavaRow_9";

				int tos_count_tJavaRow_9 = 0;

				int nb_line_tJavaRow_9 = 0;

				/**
				 * [tJavaRow_9 begin ] stop
				 */

				/**
				 * [tFileProperties_3 begin ] start
				 */

				ok_Hash.put("tFileProperties_3", false);
				start_Hash.put("tFileProperties_3", System.currentTimeMillis());

				currentComponent = "tFileProperties_3";

				int tos_count_tFileProperties_3 = 0;

				java.io.File file_tFileProperties_3 = new java.io.File(
						context.etlinterfacefolder + "/"
								+ context.getProperty("uostmpfolder")
								+ "/soapresponse_shipped.tmp");
				row25 = new row25Struct();

				if (file_tFileProperties_3.exists()) {
					row25.abs_path = file_tFileProperties_3.getAbsolutePath();
					row25.dirname = file_tFileProperties_3.getParent();
					row25.basename = file_tFileProperties_3.getName();
					String r_tFileProperties_3 = (file_tFileProperties_3
							.canRead()) ? "r" : "-";
					String w_tFileProperties_3 = (file_tFileProperties_3
							.canWrite()) ? "w" : "-";
					// String x_ = (file_.canExecute())?"x":"-"; /*since
					// JDK1.6*/
					row25.mode_string = r_tFileProperties_3
							+ w_tFileProperties_3;
					row25.size = file_tFileProperties_3.length();
					row25.mtime = file_tFileProperties_3.lastModified();
					row25.mtime_string = (new java.util.Date(
							file_tFileProperties_3.lastModified())).toString();

				}

				/**
				 * [tFileProperties_3 begin ] stop
				 */

				/**
				 * [tFileProperties_3 main ] start
				 */

				currentComponent = "tFileProperties_3";

				tos_count_tFileProperties_3++;

				/**
				 * [tFileProperties_3 main ] stop
				 */

				/**
				 * [tJavaRow_9 main ] start
				 */

				currentComponent = "tJavaRow_9";

				globalMap.put("file_soapresponse_shipped", row25.size);

				((Logger) globalMap.get("LOGGER"))
						.debug("file soapresponse shipped size: " + row25.size);

				nb_line_tJavaRow_9++;

				tos_count_tJavaRow_9++;

				/**
				 * [tJavaRow_9 main ] stop
				 */

				/**
				 * [tFileProperties_3 end ] start
				 */

				currentComponent = "tFileProperties_3";

				ok_Hash.put("tFileProperties_3", true);
				end_Hash.put("tFileProperties_3", System.currentTimeMillis());

				/**
				 * [tFileProperties_3 end ] stop
				 */

				/**
				 * [tJavaRow_9 end ] start
				 */

				currentComponent = "tJavaRow_9";

				globalMap.put("tJavaRow_9_NB_LINE", nb_line_tJavaRow_9);

				ok_Hash.put("tJavaRow_9", true);
				end_Hash.put("tJavaRow_9", System.currentTimeMillis());

				if ((Long) globalMap.get("file_soapresponse_shipped") > 0) {

					tXSLT_2Process(globalMap);
				}

				if ((Long) globalMap.get("file_soapresponse_shipped") > 0) {

					tXSLT_1Process(globalMap);
				}

				/**
				 * [tJavaRow_9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileProperties_3 finally ] start
				 */

				currentComponent = "tFileProperties_3";

				/**
				 * [tFileProperties_3 finally ] stop
				 */

				/**
				 * [tJavaRow_9 finally ] start
				 */

				currentComponent = "tJavaRow_9";

				/**
				 * [tJavaRow_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileProperties_3_SUBPROCESS_STATE", 1);
	}

	public void tXSLT_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tXSLT_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tXSLT_2 begin ] start
				 */

				ok_Hash.put("tXSLT_2", false);
				start_Hash.put("tXSLT_2", System.currentTimeMillis());

				currentComponent = "tXSLT_2";

				int tos_count_tXSLT_2 = 0;

				/**
				 * [tXSLT_2 begin ] stop
				 */

				/**
				 * [tXSLT_2 main ] start
				 */

				currentComponent = "tXSLT_2";

				System.setProperty("javax.xml.transform.TransformerFactory",
						"net.sf.saxon.TransformerFactoryImpl");

				java.io.File xsltFiletXSLT_2 = new java.io.File(context.etlroot
						+ "/xsl/updateorderstatus/success.xsl");
				javax.xml.transform.stream.StreamSource styleSourcetXSLT_2 = new javax.xml.transform.stream.StreamSource(
						xsltFiletXSLT_2);
				javax.xml.transform.Transformer ttXSLT_2 = javax.xml.transform.TransformerFactory
						.newInstance().newTransformer(styleSourcetXSLT_2);

				javax.xml.transform.stream.StreamSource xmlSourcetXSLT_2 = new javax.xml.transform.stream.StreamSource(
						new java.io.File(context.etlinterfacefolder + "/"
								+ context.getProperty("uostmpfolder")
								+ "/soapresponse_shipped.tmp"));
				ttXSLT_2.transform(
						xmlSourcetXSLT_2,
						new javax.xml.transform.stream.StreamResult(
								new java.io.File(context.etlinterfacefolder
										+ "/"
										+ context.getProperty("uostmpfolder")
										+ "/success_orders_shipped.csv")));

				if ((context.etlinterfacefolder + "/"
						+ context.getProperty("uostmpfolder") + "/success_orders_shipped.csv")
							.indexOf("/") != -1) {
					globalMap
							.put("tXSLT_2_OUTPUT_FILEPATH",
									(context.etlinterfacefolder
											+ "/"
											+ context
													.getProperty("uostmpfolder") + "/success_orders_shipped.csv")
											.substring(
													0,
													(context.etlinterfacefolder
															+ "/"
															+ context
																	.getProperty("uostmpfolder") + "/success_orders_shipped.csv")
															.lastIndexOf("/")));
					globalMap
							.put("tXSLT_2_OUTPUT_FILENAME",
									(context.etlinterfacefolder
											+ "/"
											+ context
													.getProperty("uostmpfolder") + "/success_orders_shipped.csv").substring((context.etlinterfacefolder
											+ "/"
											+ context
													.getProperty("uostmpfolder") + "/success_orders_shipped.csv")
											.lastIndexOf("/") + 1));
				} else {
					globalMap.put(
							"tXSLT_2_OUTPUT_FILEPATH",
							context.etlinterfacefolder + "/"
									+ context.getProperty("uostmpfolder")
									+ "/success_orders_shipped.csv");
					globalMap.put(
							"tXSLT_2_OUTPUT_FILENAME",
							context.etlinterfacefolder + "/"
									+ context.getProperty("uostmpfolder")
									+ "/success_orders_shipped.csv");
				}

				tos_count_tXSLT_2++;

				/**
				 * [tXSLT_2 main ] stop
				 */

				/**
				 * [tXSLT_2 end ] start
				 */

				currentComponent = "tXSLT_2";

				ok_Hash.put("tXSLT_2", true);
				end_Hash.put("tXSLT_2", System.currentTimeMillis());

				/**
				 * [tXSLT_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tXSLT_2:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileExist_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tXSLT_2 finally ] start
				 */

				currentComponent = "tXSLT_2";

				/**
				 * [tXSLT_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tXSLT_2_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileExist_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_4 begin ] start
				 */

				ok_Hash.put("tFileExist_4", false);
				start_Hash.put("tFileExist_4", System.currentTimeMillis());

				currentComponent = "tFileExist_4";

				int tos_count_tFileExist_4 = 0;

				/**
				 * [tFileExist_4 begin ] stop
				 */

				/**
				 * [tFileExist_4 main ] start
				 */

				currentComponent = "tFileExist_4";

				java.io.File file_tFileExist_4 = new java.io.File(
						context.etlinterfacefolder + "/"
								+ context.getProperty("uostmpfolder")
								+ "/success_orders_shipped.csv");
				if (!file_tFileExist_4.exists()) {
					globalMap.put("tFileExist_4_EXISTS", false);
				} else {
					globalMap.put("tFileExist_4_EXISTS", true);
				}

				globalMap.put(
						"tFileExist_4_FILENAME",
						context.etlinterfacefolder + "/"
								+ context.getProperty("uostmpfolder")
								+ "/success_orders_shipped.csv");

				tos_count_tFileExist_4++;

				/**
				 * [tFileExist_4 main ] stop
				 */

				/**
				 * [tFileExist_4 end ] start
				 */

				currentComponent = "tFileExist_4";

				ok_Hash.put("tFileExist_4", true);
				end_Hash.put("tFileExist_4", System.currentTimeMillis());

				tFileProperties_5Process(globalMap);

				/**
				 * [tFileExist_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_4 finally ] start
				 */

				currentComponent = "tFileExist_4";

				/**
				 * [tFileExist_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_4_SUBPROCESS_STATE", 1);
	}

	public static class row26Struct implements
			routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public String abs_path;

		public String getAbs_path() {
			return this.abs_path;
		}

		public String dirname;

		public String getDirname() {
			return this.dirname;
		}

		public String basename;

		public String getBasename() {
			return this.basename;
		}

		public String mode_string;

		public String getMode_string() {
			return this.mode_string;
		}

		public Long size;

		public Long getSize() {
			return this.size;
		}

		public Long mtime;

		public Long getMtime() {
			return this.mtime;
		}

		public String mtime_string;

		public String getMtime_string() {
			return this.mtime_string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.abs_path = readString(dis);

					this.dirname = readString(dis);

					this.basename = readString(dis);

					this.mode_string = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.size = null;
					} else {
						this.size = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mtime = null;
					} else {
						this.mtime = dis.readLong();
					}

					this.mtime_string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.abs_path, dos);

				// String

				writeString(this.dirname, dos);

				// String

				writeString(this.basename, dos);

				// String

				writeString(this.mode_string, dos);

				// Long

				if (this.size == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.size);
				}

				// Long

				if (this.mtime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.mtime);
				}

				// String

				writeString(this.mtime_string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("abs_path=" + abs_path);
			sb.append(",dirname=" + dirname);
			sb.append(",basename=" + basename);
			sb.append(",mode_string=" + mode_string);
			sb.append(",size=" + String.valueOf(size));
			sb.append(",mtime=" + String.valueOf(mtime));
			sb.append(",mtime_string=" + mtime_string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileProperties_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileProperties_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row26Struct row26 = new row26Struct();

				/**
				 * [tJavaRow_6 begin ] start
				 */

				ok_Hash.put("tJavaRow_6", false);
				start_Hash.put("tJavaRow_6", System.currentTimeMillis());

				currentComponent = "tJavaRow_6";

				int tos_count_tJavaRow_6 = 0;

				int nb_line_tJavaRow_6 = 0;

				/**
				 * [tJavaRow_6 begin ] stop
				 */

				/**
				 * [tFileProperties_5 begin ] start
				 */

				ok_Hash.put("tFileProperties_5", false);
				start_Hash.put("tFileProperties_5", System.currentTimeMillis());

				currentComponent = "tFileProperties_5";

				int tos_count_tFileProperties_5 = 0;

				java.io.File file_tFileProperties_5 = new java.io.File(
						context.etlinterfacefolder + "/"
								+ context.getProperty("uostmpfolder")
								+ "/success_orders_shipped.csv");
				row26 = new row26Struct();

				if (file_tFileProperties_5.exists()) {
					row26.abs_path = file_tFileProperties_5.getAbsolutePath();
					row26.dirname = file_tFileProperties_5.getParent();
					row26.basename = file_tFileProperties_5.getName();
					String r_tFileProperties_5 = (file_tFileProperties_5
							.canRead()) ? "r" : "-";
					String w_tFileProperties_5 = (file_tFileProperties_5
							.canWrite()) ? "w" : "-";
					// String x_ = (file_.canExecute())?"x":"-"; /*since
					// JDK1.6*/
					row26.mode_string = r_tFileProperties_5
							+ w_tFileProperties_5;
					row26.size = file_tFileProperties_5.length();
					row26.mtime = file_tFileProperties_5.lastModified();
					row26.mtime_string = (new java.util.Date(
							file_tFileProperties_5.lastModified())).toString();

				}

				/**
				 * [tFileProperties_5 begin ] stop
				 */

				/**
				 * [tFileProperties_5 main ] start
				 */

				currentComponent = "tFileProperties_5";

				tos_count_tFileProperties_5++;

				/**
				 * [tFileProperties_5 main ] stop
				 */

				/**
				 * [tJavaRow_6 main ] start
				 */

				currentComponent = "tJavaRow_6";

				globalMap.put("file_success_shipped", row26.size);

				((Logger) globalMap.get("LOGGER"))
						.debug("file_success_shipped size: " + row26.size);

				nb_line_tJavaRow_6++;

				tos_count_tJavaRow_6++;

				/**
				 * [tJavaRow_6 main ] stop
				 */

				/**
				 * [tFileProperties_5 end ] start
				 */

				currentComponent = "tFileProperties_5";

				ok_Hash.put("tFileProperties_5", true);
				end_Hash.put("tFileProperties_5", System.currentTimeMillis());

				/**
				 * [tFileProperties_5 end ] stop
				 */

				/**
				 * [tJavaRow_6 end ] start
				 */

				currentComponent = "tJavaRow_6";

				globalMap.put("tJavaRow_6_NB_LINE", nb_line_tJavaRow_6);

				ok_Hash.put("tJavaRow_6", true);
				end_Hash.put("tJavaRow_6", System.currentTimeMillis());

				if (globalMap.get("file_success_shipped") != null
						&& (Long) globalMap.get("file_success_shipped") > 0) {

					tFileInputDelimited_1Process(globalMap);
				}

				/**
				 * [tJavaRow_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileProperties_5 finally ] start
				 */

				currentComponent = "tFileProperties_5";

				/**
				 * [tFileProperties_5 finally ] stop
				 */

				/**
				 * [tJavaRow_6 finally ] start
				 */

				currentComponent = "tJavaRow_6";

				/**
				 * [tJavaRow_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileProperties_5_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public routines.system.Document Soap;

		public routines.system.Document getSoap() {
			return this.Soap;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.Soap = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Soap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Soap=" + String.valueOf(Soap));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row31Struct implements
			routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public routines.system.Document Soap;

		public routines.system.Document getSoap() {
			return this.Soap;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.Soap == null) ? 0 : this.Soap.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row31Struct other = (row31Struct) obj;

			if (this.Soap == null) {
				if (other.Soap != null)
					return false;

			} else if (!this.Soap.equals(other.Soap))

				return false;

			return true;
		}

		public void copyDataTo(row31Struct other) {

			other.Soap = this.Soap;

		}

		public void copyKeysDataTo(row31Struct other) {

			other.Soap = this.Soap;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.Soap = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Soap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Soap=" + String.valueOf(Soap));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Soap, other.Soap);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row30Struct implements
			routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public routines.system.Document Soap;

		public routines.system.Document getSoap() {
			return this.Soap;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.Soap == null) ? 0 : this.Soap.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row30Struct other = (row30Struct) obj;

			if (this.Soap == null) {
				if (other.Soap != null)
					return false;

			} else if (!this.Soap.equals(other.Soap))

				return false;

			return true;
		}

		public void copyDataTo(row30Struct other) {

			other.Soap = this.Soap;

		}

		public void copyKeysDataTo(row30Struct other) {

			other.Soap = this.Soap;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.Soap = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Soap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Soap=" + String.valueOf(Soap));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Soap, other.Soap);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class updateordersoaprequestStruct implements
			routines.system.IPersistableRow<updateordersoaprequestStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public routines.system.Document Soap;

		public routines.system.Document getSoap() {
			return this.Soap;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.Soap == null) ? 0 : this.Soap.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final updateordersoaprequestStruct other = (updateordersoaprequestStruct) obj;

			if (this.Soap == null) {
				if (other.Soap != null)
					return false;

			} else if (!this.Soap.equals(other.Soap))

				return false;

			return true;
		}

		public void copyDataTo(updateordersoaprequestStruct other) {

			other.Soap = this.Soap;

		}

		public void copyKeysDataTo(updateordersoaprequestStruct other) {

			other.Soap = this.Soap;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.Soap = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Soap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Soap=" + String.valueOf(Soap));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(updateordersoaprequestStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Soap, other.Soap);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public String orderID;

		public String getOrderID() {
			return this.orderID;
		}

		public String orderStatus;

		public String getOrderStatus() {
			return this.orderStatus;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.orderID = readString(dis);

					this.orderStatus = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.orderID, dos);

				// String

				writeString(this.orderStatus, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orderID=" + orderID);
			sb.append(",orderStatus=" + orderStatus);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String orderID;

		public String getOrderID() {
			return this.orderID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orderID == null) ? 0 : this.orderID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row17Struct other = (row17Struct) obj;

			if (this.orderID == null) {
				if (other.orderID != null)
					return false;

			} else if (!this.orderID.equals(other.orderID))

				return false;

			return true;
		}

		public void copyDataTo(row17Struct other) {

			other.orderID = this.orderID;

		}

		public void copyKeysDataTo(row17Struct other) {

			other.orderID = this.orderID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.orderID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.orderID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orderID=" + orderID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orderID, other.orderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String orderID;

		public String getOrderID() {
			return this.orderID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orderID == null) ? 0 : this.orderID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_1Struct other = (after_tFileInputDelimited_1Struct) obj;

			if (this.orderID == null) {
				if (other.orderID != null)
					return false;

			} else if (!this.orderID.equals(other.orderID))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_1Struct other) {

			other.orderID = this.orderID;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_1Struct other) {

			other.orderID = this.orderID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.orderID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.orderID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orderID=" + orderID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orderID, other.orderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_3Process(globalMap);

				row17Struct row17 = new row17Struct();
				row19Struct row19 = new row19Struct();
				updateordersoaprequestStruct updateordersoaprequest = new updateordersoaprequestStruct();
				row31Struct row31 = new row31Struct();
				row30Struct row30 = new row30Struct();
				row20Struct row20 = new row20Struct();

				/**
				 * [tXMLMap_2_TXMLMAP_OUT begin ] start
				 */

				ok_Hash.put("tXMLMap_2_TXMLMAP_OUT", false);
				start_Hash.put("tXMLMap_2_TXMLMAP_OUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_2";

				currentComponent = "tXMLMap_2_TXMLMAP_OUT";

				int tos_count_tXMLMap_2_TXMLMAP_OUT = 0;

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_2_TXMLMAP_OUT {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_2_TXMLMAP_OUT__Struct {
				}
				Var__tXMLMap_2_TXMLMAP_OUT__Struct Var__tXMLMap_2_TXMLMAP_OUT = new Var__tXMLMap_2_TXMLMAP_OUT__Struct();
				// ###############################
				// # Outputs initialization
				updateordersoaprequestStruct updateordersoaprequest_tmp = new updateordersoaprequestStruct();
				updateordersoaprequestStruct updateordersoaprequest_save = null;
				// the aggregate variable
				updateordersoaprequestStruct updateordersoaprequest_aggregate = null;
				// init the resultset for aggregate
				java.util.List<Object> allOutsForAggregate_tXMLMap_2 = new java.util.ArrayList<Object>();
				globalMap.put("allOutsForAggregate_tXMLMap_2",
						allOutsForAggregate_tXMLMap_2);
				// ###############################
				int nb_line_tXMLMap_2_TXMLMAP_OUT = 0;

				XML_API_tXMLMap_2_TXMLMAP_OUT xml_api_tXMLMap_2_TXMLMAP_OUT = new XML_API_tXMLMap_2_TXMLMAP_OUT();

				// the map store the previous value of aggregate columns
				java.util.Map<String, Object> aggregateCacheMap_tXMLMap_2_TXMLMAP_OUT = new java.util.HashMap<String, Object>();

				class GenerateDocument_updateordersoaprequest {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					org.dom4j.Element subTreeLoopParent0 = null;
					public boolean subTreeLoop0 = false;

					public GenerateDocument_updateordersoaprequest() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						return this.doc;
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin,
							row19Struct row19,
							Var__tXMLMap_2_TXMLMAP_OUT__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = doc.addElement("SOAP-ENV:Envelope");
							subTreeRootParent = root;
							root.addNamespace("ns1", TalendString
									.replaceSpecialCharForXML("urn:Magento"));
							root.addNamespace(
									"SOAP-ENV",
									TalendString
											.replaceSpecialCharForXML("http://schemas.xmlsoap.org/soap/envelope/"));
							root.setQName(org.dom4j.DocumentHelper.createQName(
									"Envelope",
									org.dom4j.DocumentHelper.createNamespace(
											"SOAP-ENV",
											TalendString
													.replaceSpecialCharForXML("http://schemas.xmlsoap.org/soap/envelope/"))));
							root.addAttribute("SOAP-ENV:encodingStyle", "");
							org.dom4j.Element root_3 = null;
							if (root.getNamespaceForPrefix("SOAP-ENV") == null) {
								root_3 = root.addElement("Body");
							} else {
								root_3 = root.addElement("SOAP-ENV:Body");
							}
							subTreeRootParent = root_3;
							org.dom4j.Element root_3_4 = null;
							if (root_3.getNamespaceForPrefix("ns1") == null) {
								root_3_4 = root_3.addElement("multiCall");
							} else {
								root_3_4 = root_3.addElement("ns1:multiCall");
							}
							subTreeRootParent = root_3_4;
							org.dom4j.Element root_3_4_5 = null;
							root_3_4_5 = root_3_4.addElement("sessionId");
							valueMap.put("root_3_4_5",
									globalMap.get("sessionId"));
							if (valueMap.get("root_3_4_5") != null) {
								routines.system.NestXMLTool.setText(root_3_4_5,
										FormatterUtils.format(
												globalMap.get("sessionId"),
												null));
							}
							root_3_4_5.addAttribute("xsi:type", "");
							org.dom4j.Element root_3_4_7 = null;
							root_3_4_7 = root_3_4.addElement("calls");
							subTreeRootParent = root_3_4_7;
							root_3_4_7.addAttribute("SOAP-ENC:arrayType", "");
							root_3_4_7.addAttribute("xsi:type", "");
							subTreeLoopParent0 = root_3_4_7;
							org.dom4j.Element root_3_4_10 = null;
							root_3_4_10 = root_3_4.addElement("options");
							root_3_4_10.addAttribute("xsi:nil", "");
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
						org.dom4j.Element loop = null;
						loop = org.dom4j.DocumentHelper.createElement("item");
						subTreeRootParent.elements().add(
								orderHelper.getInsertLocation(0, 0), loop);
						subTreeRootParent = loop;
						loop.addAttribute("SOAP-ENC:arrayType", "");
						loop.addAttribute("xsi:type", "");
						org.dom4j.Element loop_14 = null;
						loop_14 = loop.addElement("item");
						valueMap.put("loop_14", "sales_order.addComment");
						if (valueMap.get("loop_14") != null) {
							routines.system.NestXMLTool.setText(loop_14,
									FormatterUtils.format(
											"sales_order.addComment", null));
						}
						org.dom4j.Element loop_15 = null;
						loop_15 = loop.addElement("item");
						loop_15.addAttribute("SOAP-ENC:arrayType", "");
						loop_15.addAttribute("xsi:type", "");
						org.dom4j.Element loop_15_18 = null;
						loop_15_18 = loop_15.addElement("item");
						valueMap.put("loop_15_18", row19.orderID);
						if (valueMap.get("loop_15_18") != null) {
							routines.system.NestXMLTool.setText(loop_15_18,
									FormatterUtils.format(row19.orderID, null));
						}
						org.dom4j.Element loop_15_19 = null;
						loop_15_19 = loop_15.addElement("item");
						valueMap.put("loop_15_19", row19.orderStatus);
						if (valueMap.get("loop_15_19") != null) {
							routines.system.NestXMLTool.setText(loop_15_19,
									FormatterUtils.format(row19.orderStatus,
											null));
						}
						org.dom4j.Element loop_15_20 = null;
						loop_15_20 = loop_15.addElement("item");
						valueMap.put("loop_15_20",
								"etl status update after s/rfc");
						if (valueMap.get("loop_15_20") != null) {
							routines.system.NestXMLTool.setText(loop_15_20,
									FormatterUtils.format(
											"etl status update after s/rfc",
											null));
						}
					}
				}

				GenerateDocument_updateordersoaprequest gen_Doc_updateordersoaprequest_tXMLMap_2_TXMLMAP_OUT = new GenerateDocument_updateordersoaprequest();
				boolean docAlreadyInstanciate_updateordersoaprequest = false;

				/**
				 * [tXMLMap_2_TXMLMAP_OUT begin ] stop
				 */

				/**
				 * [tJoin_1 begin ] start
				 */

				ok_Hash.put("tJoin_1", false);
				start_Hash.put("tJoin_1", System.currentTimeMillis());

				currentComponent = "tJoin_1";

				int tos_count_tJoin_1 = 0;

				final java.util.Map<row18Struct, row18Struct> tHash_tJoin_1 = (java.util.Map<row18Struct, row18Struct>) globalMap
						.get("tHash_row18");

				class Util_tJoin_1 {
					row18Struct lookupValue = null;
					row18Struct row18HashKey = new row18Struct();

					public boolean isJoined(row17Struct mainRow) {
						row18HashKey.orderID = mainRow.orderID;

						row18HashKey.hashCodeDirty = true;
						lookupValue = tHash_tJoin_1.get(row18HashKey);
						if (lookupValue != null) {
							return true;
						} else {
						}
						return false;
					}
				}

				Util_tJoin_1 util_tJoin_1 = new Util_tJoin_1();

				int nb_line_tJoin_1 = 0;

				/**
				 * [tJoin_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = context.etlinterfacefolder
							+ "/"
							+ context.getProperty("uostmpfolder")
							+ "/success_orders_shipped.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								context.etlinterfacefolder + "/"
										+ context.getProperty("uostmpfolder")
										+ "/success_orders_shipped.csv",
								"ISO-8859-15", "|", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {

						row17 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row17 = new row17Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row17.orderID = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row17 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row17"
						if (row17 != null) {

							/**
							 * [tJoin_1 main ] start
							 */

							currentComponent = "tJoin_1";

							row19 = null;

							row19 = new row19Struct();

							if (util_tJoin_1.isJoined(row17)) {
								row19.orderID = util_tJoin_1.lookupValue.orderID;
								row19.orderStatus = util_tJoin_1.lookupValue.orderStatus;
							}

							else {
								row19 = null;
							}
							// /////////////////////

							tos_count_tJoin_1++;

							/**
							 * [tJoin_1 main ] stop
							 */
							// Start of branch "row19"
							if (row19 != null) {

								/**
								 * [tXMLMap_2_TXMLMAP_OUT main ] start
								 */

								currentVirtualComponent = "tXMLMap_2";

								currentComponent = "tXMLMap_2_TXMLMAP_OUT";

								boolean rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
								boolean rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
								boolean mainRowRejected_tXMLMap_2_TXMLMAP_OUT = false;
								boolean isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;

								updateordersoaprequest_tmp.Soap = null;

								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tXMLMap_2_TXMLMAP_OUT__Struct Var = Var__tXMLMap_2_TXMLMAP_OUT;
									// ###############################
									// # Output tables

									updateordersoaprequest = null;

									// # Output table : 'updateordersoaprequest'

									if (!docAlreadyInstanciate_updateordersoaprequest) {
										docAlreadyInstanciate_updateordersoaprequest = true;
										gen_Doc_updateordersoaprequest_tXMLMap_2_TXMLMAP_OUT = new GenerateDocument_updateordersoaprequest();
										// init one new out struct for cache the
										// result.
										updateordersoaprequest_aggregate = new updateordersoaprequestStruct();
										updateordersoaprequest_aggregate.Soap = new routines.system.Document();
										updateordersoaprequest_aggregate.Soap
												.setDocument(gen_Doc_updateordersoaprequest_tXMLMap_2_TXMLMAP_OUT
														.getDocument());

										// construct the resultset
										allOutsForAggregate_tXMLMap_2
												.add(updateordersoaprequest_aggregate);
									}

									gen_Doc_updateordersoaprequest_tXMLMap_2_TXMLMAP_OUT
											.generateElements(
													rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT,
													row19, Var);

									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;

								tos_count_tXMLMap_2_TXMLMAP_OUT++;

								/**
								 * [tXMLMap_2_TXMLMAP_OUT main ] stop
								 */

							} // End of branch "row19"

						} // End of branch "row17"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) (context.etlinterfacefolder + "/"
							+ context.getProperty("uostmpfolder") + "/success_orders_shipped.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tJoin_1 end ] start
				 */

				currentComponent = "tJoin_1";

				ok_Hash.put("tJoin_1", true);
				end_Hash.put("tJoin_1", System.currentTimeMillis());

				/**
				 * [tJoin_1 end ] stop
				 */

				/**
				 * [tXMLMap_2_TXMLMAP_OUT end ] start
				 */

				currentVirtualComponent = "tXMLMap_2";

				currentComponent = "tXMLMap_2_TXMLMAP_OUT";

				ok_Hash.put("tXMLMap_2_TXMLMAP_OUT", true);
				end_Hash.put("tXMLMap_2_TXMLMAP_OUT",
						System.currentTimeMillis());

				/**
				 * [tXMLMap_2_TXMLMAP_OUT end ] stop
				 */

				/**
				 * [tJavaRow_11 begin ] start
				 */

				ok_Hash.put("tJavaRow_11", false);
				start_Hash.put("tJavaRow_11", System.currentTimeMillis());

				currentComponent = "tJavaRow_11";

				int tos_count_tJavaRow_11 = 0;

				int nb_line_tJavaRow_11 = 0;

				/**
				 * [tJavaRow_11 begin ] stop
				 */

				/**
				 * [tJavaRow_5 begin ] start
				 */

				ok_Hash.put("tJavaRow_5", false);
				start_Hash.put("tJavaRow_5", System.currentTimeMillis());

				currentComponent = "tJavaRow_5";

				int tos_count_tJavaRow_5 = 0;

				int nb_line_tJavaRow_5 = 0;

				/**
				 * [tJavaRow_5 begin ] stop
				 */

				/**
				 * [tSOAP_4 begin ] start
				 */

				ok_Hash.put("tSOAP_4", false);
				start_Hash.put("tSOAP_4", System.currentTimeMillis());

				currentComponent = "tSOAP_4";

				int tos_count_tSOAP_4 = 0;

				org.talend.soap.SOAPUtil soapUtil_tSOAP_4 = new org.talend.soap.SOAPUtil();

				final String decryptedPassword_tSOAP_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

				/**
				 * [tSOAP_4 begin ] stop
				 */

				/**
				 * [tReplicate_3 begin ] start
				 */

				ok_Hash.put("tReplicate_3", false);
				start_Hash.put("tReplicate_3", System.currentTimeMillis());

				currentComponent = "tReplicate_3";

				int tos_count_tReplicate_3 = 0;

				/**
				 * [tReplicate_3 begin ] stop
				 */

				/**
				 * [tXMLMap_2_TXMLMAP_IN begin ] start
				 */

				ok_Hash.put("tXMLMap_2_TXMLMAP_IN", false);
				start_Hash.put("tXMLMap_2_TXMLMAP_IN",
						System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_2";

				currentComponent = "tXMLMap_2_TXMLMAP_IN";

				int tos_count_tXMLMap_2_TXMLMAP_IN = 0;

				java.util.List<Object> outs_tXMLMap_2 = (java.util.List<Object>) globalMap
						.get("allOutsForAggregate_tXMLMap_2");
				for (Object row_out_tXMLMap_2_TXMLMAP_IN : outs_tXMLMap_2) {// TD512

					/**
					 * [tXMLMap_2_TXMLMAP_IN begin ] stop
					 */

					/**
					 * [tXMLMap_2_TXMLMAP_IN main ] start
					 */

					currentVirtualComponent = "tXMLMap_2";

					currentComponent = "tXMLMap_2_TXMLMAP_IN";

					updateordersoaprequest = null;
					if (row_out_tXMLMap_2_TXMLMAP_IN != null
							&& row_out_tXMLMap_2_TXMLMAP_IN instanceof updateordersoaprequestStruct) {
						updateordersoaprequest = (updateordersoaprequestStruct) row_out_tXMLMap_2_TXMLMAP_IN;
						routines.system.NestXMLTool.generateOk(
								updateordersoaprequest.Soap, false);
					}

					tos_count_tXMLMap_2_TXMLMAP_IN++;

					/**
					 * [tXMLMap_2_TXMLMAP_IN main ] stop
					 */
					// Start of branch "updateordersoaprequest"
					if (updateordersoaprequest != null) {

						/**
						 * [tReplicate_3 main ] start
						 */

						currentComponent = "tReplicate_3";

						row31 = new row31Struct();

						row31.Soap = updateordersoaprequest.Soap;
						row30 = new row30Struct();

						row30.Soap = updateordersoaprequest.Soap;

						tos_count_tReplicate_3++;

						/**
						 * [tReplicate_3 main ] stop
						 */

						/**
						 * [tJavaRow_11 main ] start
						 */

						currentComponent = "tJavaRow_11";

						((Logger) globalMap.get("LOGGER"))
								.info("shipped Soap Input - status update "
										+ row31.toString());
						nb_line_tJavaRow_11++;

						tos_count_tJavaRow_11++;

						/**
						 * [tJavaRow_11 main ] stop
						 */

						/**
						 * [tSOAP_4 main ] start
						 */

						currentComponent = "tSOAP_4";

						String document_tSOAP_4 = soapUtil_tSOAP_4
								.extractContentAsDocument(
										org.talend.soap.SOAPUtil.SOAP11,
										"http://"
												+ context
														.getProperty("endpointhostname")
												+ "/index.php/api/soap/index/",
										"urn:Mage_Api_Model_Server_HandlerAction",
										row30.Soap.toString());

						// for output

						row20 = new row20Struct();

						row20.Soap = ParserUtils
								.parseTo_Document(document_tSOAP_4);

						tos_count_tSOAP_4++;

						/**
						 * [tSOAP_4 main ] stop
						 */

						/**
						 * [tJavaRow_5 main ] start
						 */

						currentComponent = "tJavaRow_5";

						((Logger) globalMap.get("LOGGER"))
								.debug("shipped Soap Response - status update "
										+ row20.toString());
						nb_line_tJavaRow_5++;

						tos_count_tJavaRow_5++;

						/**
						 * [tJavaRow_5 main ] stop
						 */

					} // End of branch "updateordersoaprequest"

					/**
					 * [tXMLMap_2_TXMLMAP_IN end ] start
					 */

					currentVirtualComponent = "tXMLMap_2";

					currentComponent = "tXMLMap_2_TXMLMAP_IN";

				}// TD512

				ok_Hash.put("tXMLMap_2_TXMLMAP_IN", true);
				end_Hash.put("tXMLMap_2_TXMLMAP_IN", System.currentTimeMillis());

				/**
				 * [tXMLMap_2_TXMLMAP_IN end ] stop
				 */

				/**
				 * [tReplicate_3 end ] start
				 */

				currentComponent = "tReplicate_3";

				ok_Hash.put("tReplicate_3", true);
				end_Hash.put("tReplicate_3", System.currentTimeMillis());

				/**
				 * [tReplicate_3 end ] stop
				 */

				/**
				 * [tJavaRow_11 end ] start
				 */

				currentComponent = "tJavaRow_11";

				globalMap.put("tJavaRow_11_NB_LINE", nb_line_tJavaRow_11);

				ok_Hash.put("tJavaRow_11", true);
				end_Hash.put("tJavaRow_11", System.currentTimeMillis());

				/**
				 * [tJavaRow_11 end ] stop
				 */

				/**
				 * [tSOAP_4 end ] start
				 */

				currentComponent = "tSOAP_4";

				soapUtil_tSOAP_4.close();

				ok_Hash.put("tSOAP_4", true);
				end_Hash.put("tSOAP_4", System.currentTimeMillis());

				tJava_9Process(globalMap);

				/**
				 * [tSOAP_4 end ] stop
				 */

				/**
				 * [tJavaRow_5 end ] start
				 */

				currentComponent = "tJavaRow_5";

				globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);

				ok_Hash.put("tJavaRow_5", true);
				end_Hash.put("tJavaRow_5", System.currentTimeMillis());

				/**
				 * [tJavaRow_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tJoin_1"
			globalMap.remove("tHash_row18");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tJoin_1 finally ] start
				 */

				currentComponent = "tJoin_1";

				/**
				 * [tJoin_1 finally ] stop
				 */

				/**
				 * [tXMLMap_2_TXMLMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tXMLMap_2";

				currentComponent = "tXMLMap_2_TXMLMAP_OUT";

				/**
				 * [tXMLMap_2_TXMLMAP_OUT finally ] stop
				 */

				/**
				 * [tXMLMap_2_TXMLMAP_IN finally ] start
				 */

				currentVirtualComponent = "tXMLMap_2";

				currentComponent = "tXMLMap_2_TXMLMAP_IN";

				/**
				 * [tXMLMap_2_TXMLMAP_IN finally ] stop
				 */

				/**
				 * [tReplicate_3 finally ] start
				 */

				currentComponent = "tReplicate_3";

				/**
				 * [tReplicate_3 finally ] stop
				 */

				/**
				 * [tJavaRow_11 finally ] start
				 */

				currentComponent = "tJavaRow_11";

				/**
				 * [tJavaRow_11 finally ] stop
				 */

				/**
				 * [tSOAP_4 finally ] start
				 */

				currentComponent = "tSOAP_4";

				/**
				 * [tSOAP_4 finally ] stop
				 */

				/**
				 * [tJavaRow_5 finally ] start
				 */

				currentComponent = "tJavaRow_5";

				/**
				 * [tJavaRow_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_9 begin ] start
				 */

				ok_Hash.put("tJava_9", false);
				start_Hash.put("tJava_9", System.currentTimeMillis());

				currentComponent = "tJava_9";

				int tos_count_tJava_9 = 0;

				((Logger) globalMap.get("LOGGER"))
						.debug("soap success - update shipped /rfc executed");

				/**
				 * [tJava_9 begin ] stop
				 */

				/**
				 * [tJava_9 main ] start
				 */

				currentComponent = "tJava_9";

				tos_count_tJava_9++;

				/**
				 * [tJava_9 main ] stop
				 */

				/**
				 * [tJava_9 end ] start
				 */

				currentComponent = "tJava_9";

				ok_Hash.put("tJava_9", true);
				end_Hash.put("tJava_9", System.currentTimeMillis());

				tJava_2Process(globalMap);

				/**
				 * [tJava_9 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_9 finally ] start
				 */

				currentComponent = "tJava_9";

				/**
				 * [tJava_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				context.setProperty(
						"timestampedfilename_success",
						"orders_"
								+ TalendDate.formatDate("yyyyMMddHHmmss",
										TalendDate.getCurrentDate()) + ".csv");

				((Logger) globalMap.get("LOGGER"))
						.debug("Timestamped filename success: "
								+ context.getProperty("file_success_to_rename"));

				((Logger) globalMap.get("LOGGER")).debug("tFileExist_4_EXISTS "
						+ (Boolean) globalMap.get("tFileExist_4_EXISTS"));

				((Logger) globalMap.get("LOGGER")).debug("tFileExist_5_EXISTS "
						+ (Boolean) globalMap.get("tFileExist_5_EXISTS"));

				if (globalMap.get("tFilterRow_2_NB_LINE_REJECT").equals(0) ||

				globalMap.get("tFilterRow_2_NB_LINE_OK").equals(0)) {

					if ((Boolean) globalMap.get("tFileExist_4_EXISTS") == null
							&& (Boolean) globalMap.get("tFileExist_5_EXISTS") != null
							&& (Boolean) globalMap.get("tFileExist_5_EXISTS") == true) {

						globalMap.put("file_success_to_rename",
								"success_orders_nonshipped.csv");

					} else if ((Boolean) globalMap.get("tFileExist_5_EXISTS") == null
							&& (Boolean) globalMap.get("tFileExist_4_EXISTS") != null
							&& (Boolean) globalMap.get("tFileExist_4_EXISTS") == true) {
						globalMap.put("file_success_to_rename",
								"success_orders_shipped.csv");

					}

				}

				((Logger) globalMap.get("LOGGER")).debug("file name to rename "
						+ globalMap.get("file_success_to_rename"));

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				if ((globalMap.get("file_success_to_rename") != null)) {

					tFileCopy_4Process(globalMap);
				}

				if ((globalMap.get("tFileExist_5_EXISTS") != null)
						&& (globalMap.get("tFileExist_4_EXISTS") != null) &&

						((Boolean) globalMap.get("tFileExist_5_EXISTS"))
						&& ((Boolean) globalMap.get("tFileExist_4_EXISTS"))) {

					tFileInputFullRow_1Process(globalMap);
				}

				/**
				 * [tJava_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public void tFileCopy_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileCopy_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileCopy_4 begin ] start
				 */

				ok_Hash.put("tFileCopy_4", false);
				start_Hash.put("tFileCopy_4", System.currentTimeMillis());

				currentComponent = "tFileCopy_4";

				int tos_count_tFileCopy_4 = 0;

				/**
				 * [tFileCopy_4 begin ] stop
				 */

				/**
				 * [tFileCopy_4 main ] start
				 */

				currentComponent = "tFileCopy_4";

				String srcFileName_tFileCopy_4 = context.etlinterfacefolder
						+ "/" + context.getProperty("uostmpfolder") + "/"
						+ globalMap.get("file_success_to_rename");

				java.io.File srcFile_tFileCopy_4 = new java.io.File(
						srcFileName_tFileCopy_4);

				// here need check first, before mkdirs().
				if (!srcFile_tFileCopy_4.exists()
						|| !srcFile_tFileCopy_4.isFile()) {
					throw new RuntimeException("The source File \""
							+ srcFileName_tFileCopy_4
							+ "\" does not exist or is not a file.");
				}

				String desDirName_tFileCopy_4 = context.etlinterfacefolder
						+ "/" + context.getProperty("uossuccessfolder") + "/";

				String desFileName_tFileCopy_4 = context
						.getProperty("timestampedfilename_success");

				if (desFileName_tFileCopy_4 != null
						&& ("").equals(desFileName_tFileCopy_4.trim())) {
					desFileName_tFileCopy_4 = "NewName.temp";
				}

				java.io.File desFile_tFileCopy_4 = new java.io.File(
						desDirName_tFileCopy_4, desFileName_tFileCopy_4);

				if (!srcFile_tFileCopy_4.getPath().equals(
						desFile_tFileCopy_4.getPath())) {
					java.io.File parentFile_tFileCopy_4 = desFile_tFileCopy_4
							.getParentFile();

					if (parentFile_tFileCopy_4 != null
							&& !parentFile_tFileCopy_4.exists()) {
						parentFile_tFileCopy_4.mkdirs();
					}
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_4.getPath(),
							desFile_tFileCopy_4.getPath(), true);
					java.io.File isRemoved_tFileCopy_4 = new java.io.File(
							context.etlinterfacefolder + "/"
									+ context.getProperty("uostmpfolder") + "/"
									+ globalMap.get("file_success_to_rename"));
					if (isRemoved_tFileCopy_4.exists()) {
						System.err
								.println("The source file could not be removed from the folder because it is open or you only have read-only rights.\n");
					}

				}
				globalMap.put("tFileCopy_4_DESTINATION_FILEPATH",
						desFile_tFileCopy_4.getPath());
				globalMap.put("tFileCopy_4_DESTINATION_FILENAME",
						desFile_tFileCopy_4.getName());

				globalMap.put("tFileCopy_4_SOURCE_DIRECTORY",
						srcFile_tFileCopy_4.getParent());
				globalMap.put("tFileCopy_4_DESTINATION_DIRECTORY",
						desFile_tFileCopy_4.getParent());

				tos_count_tFileCopy_4++;

				/**
				 * [tFileCopy_4 main ] stop
				 */

				/**
				 * [tFileCopy_4 end ] start
				 */

				currentComponent = "tFileCopy_4";

				ok_Hash.put("tFileCopy_4", true);
				end_Hash.put("tFileCopy_4", System.currentTimeMillis());

				tFileProperties_1Process(globalMap);

				/**
				 * [tFileCopy_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileCopy_4 finally ] start
				 */

				currentComponent = "tFileCopy_4";

				/**
				 * [tFileCopy_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileCopy_4_SUBPROCESS_STATE", 1);
	}

	public static class row27Struct implements
			routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public String abs_path;

		public String getAbs_path() {
			return this.abs_path;
		}

		public String dirname;

		public String getDirname() {
			return this.dirname;
		}

		public String basename;

		public String getBasename() {
			return this.basename;
		}

		public String mode_string;

		public String getMode_string() {
			return this.mode_string;
		}

		public Long size;

		public Long getSize() {
			return this.size;
		}

		public Long mtime;

		public Long getMtime() {
			return this.mtime;
		}

		public String mtime_string;

		public String getMtime_string() {
			return this.mtime_string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.abs_path = readString(dis);

					this.dirname = readString(dis);

					this.basename = readString(dis);

					this.mode_string = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.size = null;
					} else {
						this.size = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mtime = null;
					} else {
						this.mtime = dis.readLong();
					}

					this.mtime_string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.abs_path, dos);

				// String

				writeString(this.dirname, dos);

				// String

				writeString(this.basename, dos);

				// String

				writeString(this.mode_string, dos);

				// Long

				if (this.size == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.size);
				}

				// Long

				if (this.mtime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.mtime);
				}

				// String

				writeString(this.mtime_string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("abs_path=" + abs_path);
			sb.append(",dirname=" + dirname);
			sb.append(",basename=" + basename);
			sb.append(",mode_string=" + mode_string);
			sb.append(",size=" + String.valueOf(size));
			sb.append(",mtime=" + String.valueOf(mtime));
			sb.append(",mtime_string=" + mtime_string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileProperties_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileProperties_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row27Struct row27 = new row27Struct();

				/**
				 * [tJavaRow_7 begin ] start
				 */

				ok_Hash.put("tJavaRow_7", false);
				start_Hash.put("tJavaRow_7", System.currentTimeMillis());

				currentComponent = "tJavaRow_7";

				int tos_count_tJavaRow_7 = 0;

				int nb_line_tJavaRow_7 = 0;

				/**
				 * [tJavaRow_7 begin ] stop
				 */

				/**
				 * [tFileProperties_1 begin ] start
				 */

				ok_Hash.put("tFileProperties_1", false);
				start_Hash.put("tFileProperties_1", System.currentTimeMillis());

				currentComponent = "tFileProperties_1";

				int tos_count_tFileProperties_1 = 0;

				java.io.File file_tFileProperties_1 = new java.io.File(
						context.etlinterfacefolder
								+ "/"
								+ context.getProperty("uossuccessfolder")
								+ "/"
								+ context
										.getProperty("timestampedfilename_success"));
				row27 = new row27Struct();

				if (file_tFileProperties_1.exists()) {
					row27.abs_path = file_tFileProperties_1.getAbsolutePath();
					row27.dirname = file_tFileProperties_1.getParent();
					row27.basename = file_tFileProperties_1.getName();
					String r_tFileProperties_1 = (file_tFileProperties_1
							.canRead()) ? "r" : "-";
					String w_tFileProperties_1 = (file_tFileProperties_1
							.canWrite()) ? "w" : "-";
					// String x_ = (file_.canExecute())?"x":"-"; /*since
					// JDK1.6*/
					row27.mode_string = r_tFileProperties_1
							+ w_tFileProperties_1;
					row27.size = file_tFileProperties_1.length();
					row27.mtime = file_tFileProperties_1.lastModified();
					row27.mtime_string = (new java.util.Date(
							file_tFileProperties_1.lastModified())).toString();

				}

				/**
				 * [tFileProperties_1 begin ] stop
				 */

				/**
				 * [tFileProperties_1 main ] start
				 */

				currentComponent = "tFileProperties_1";

				tos_count_tFileProperties_1++;

				/**
				 * [tFileProperties_1 main ] stop
				 */

				/**
				 * [tJavaRow_7 main ] start
				 */

				currentComponent = "tJavaRow_7";

				globalMap.put("file_success_size", row27.size);

				if (row27.size != null && row27.size > 0) {
					((Logger) globalMap.get("LOGGER"))
							.debug("file  "
									+ context.etlinterfacefolder
									+ "/"
									+ context.getProperty("uossuccessfolder")
									+ "/"
									+ context
											.getProperty("timestampedfilename_success"));

					((Logger) globalMap.get("LOGGER")).debug(row27.size);

				}
				nb_line_tJavaRow_7++;

				tos_count_tJavaRow_7++;

				/**
				 * [tJavaRow_7 main ] stop
				 */

				/**
				 * [tFileProperties_1 end ] start
				 */

				currentComponent = "tFileProperties_1";

				ok_Hash.put("tFileProperties_1", true);
				end_Hash.put("tFileProperties_1", System.currentTimeMillis());

				/**
				 * [tFileProperties_1 end ] stop
				 */

				/**
				 * [tJavaRow_7 end ] start
				 */

				currentComponent = "tJavaRow_7";

				globalMap.put("tJavaRow_7_NB_LINE", nb_line_tJavaRow_7);

				ok_Hash.put("tJavaRow_7", true);
				end_Hash.put("tJavaRow_7", System.currentTimeMillis());

				if ((Long) globalMap.get("file_success_size") > 0
						&& context.getProperty("sftpenabled").equals("true")) {

					tJava_11Process(globalMap);
				}

				/**
				 * [tJavaRow_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileProperties_1 finally ] start
				 */

				currentComponent = "tFileProperties_1";

				/**
				 * [tFileProperties_1 finally ] stop
				 */

				/**
				 * [tJavaRow_7 finally ] start
				 */

				currentComponent = "tJavaRow_7";

				/**
				 * [tJavaRow_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileProperties_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_11 begin ] start
				 */

				ok_Hash.put("tJava_11", false);
				start_Hash.put("tJava_11", System.currentTimeMillis());

				currentComponent = "tJava_11";

				int tos_count_tJava_11 = 0;

				((Logger) globalMap.get("LOGGER"))
						.debug("trying to coping file from  "
								+

								context.etlinterfacefolder
								+ "/"
								+ context.getProperty("uossuccessfolder")
								+ "/"
								+ (String) context
										.getProperty("timestampedfilename_success"));

				((Logger) globalMap.get("LOGGER")).debug("to  "
						+ context.getProperty("sftpfolder")
						+ context.getProperty("uossuccessfolder") + "/");

				/**
				 * [tJava_11 begin ] stop
				 */

				/**
				 * [tJava_11 main ] start
				 */

				currentComponent = "tJava_11";

				tos_count_tJava_11++;

				/**
				 * [tJava_11 main ] stop
				 */

				/**
				 * [tJava_11 end ] start
				 */

				currentComponent = "tJava_11";

				ok_Hash.put("tJava_11", true);
				end_Hash.put("tJava_11", System.currentTimeMillis());

				tFTPPut_3Process(globalMap);

				/**
				 * [tJava_11 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_11 finally ] start
				 */

				currentComponent = "tJava_11";

				/**
				 * [tJava_11 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}

	public void tFTPPut_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFTPPut_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFTPPut_3 begin ] start
				 */

				ok_Hash.put("tFTPPut_3", false);
				start_Hash.put("tFTPPut_3", System.currentTimeMillis());

				currentComponent = "tFTPPut_3";

				int tos_count_tFTPPut_3 = 0;

				int nb_file_tFTPPut_3 = 0;
				// *** sftp *** //

				class MyProgressMonitor_tFTPPut_3 implements
						com.jcraft.jsch.SftpProgressMonitor {
					public void init(int op, String src, String dest, long max) {
					}

					public boolean count(long count) {
						return true;
					}

					public void end() {
					}
				}

				com.jcraft.jsch.ChannelSftp c_tFTPPut_3 = (com.jcraft.jsch.ChannelSftp) globalMap
						.get("conn_tFTPConnection_1");

				if (c_tFTPPut_3.getHome() != null
						&& !c_tFTPPut_3.getHome().equals(c_tFTPPut_3.pwd())) {
					c_tFTPPut_3.cd(c_tFTPPut_3.getHome());
				}

				// becasue there is not the same method in JSch class as
				// FTPClient class, define a list here
				java.util.List<String> msg_tFTPPut_3 = new java.util.ArrayList<String>();
				com.jcraft.jsch.SftpProgressMonitor monitortFTPPut_3 = new MyProgressMonitor_tFTPPut_3();
				java.util.List<java.util.Map<String, String>> listtFTPPut_3 = new java.util.ArrayList<java.util.Map<String, String>>();

				java.util.Map<String, String> maptFTPPut_30 = new java.util.HashMap<String, String>();
				maptFTPPut_30.put((String) context
						.getProperty("timestampedfilename_success"),
						(String) context
								.getProperty("timestampedfilename_success"));
				listtFTPPut_3.add(maptFTPPut_30);
				String localdirtFTPPut_3 = context.etlinterfacefolder + "/"
						+ context.getProperty("uossuccessfolder") + "/";

				for (java.util.Map<String, String> maptFTPPut_3 : listtFTPPut_3) {

					/**
					 * [tFTPPut_3 begin ] stop
					 */

					/**
					 * [tFTPPut_3 main ] start
					 */

					currentComponent = "tFTPPut_3";

					try {
						globalMap.put("tFTPPut_3_CURRENT_STATUS",
								"No file transfered.");
						java.util.Set<String> keySettFTPPut_3 = maptFTPPut_3
								.keySet();
						for (String keytFTPPut_3 : keySettFTPPut_3) {
							if (keytFTPPut_3 == null || "".equals(keytFTPPut_3)) {

								System.err.println("file name invalid!");
								continue;
							}
							String tempdirtFTPPut_3 = localdirtFTPPut_3;
							String filemasktFTPPut_3 = keytFTPPut_3;
							String dirtFTPPut_3 = null;

							String masktFTPPut_3 = filemasktFTPPut_3
									.replaceAll("\\\\", "/");
							int itFTPPut_3 = masktFTPPut_3.lastIndexOf('/');
							if (itFTPPut_3 != -1) {
								dirtFTPPut_3 = masktFTPPut_3.substring(0,
										itFTPPut_3);
								masktFTPPut_3 = masktFTPPut_3
										.substring(itFTPPut_3 + 1);
							}
							if (dirtFTPPut_3 != null
									&& !"".equals(dirtFTPPut_3))
								tempdirtFTPPut_3 = tempdirtFTPPut_3 + "/"
										+ dirtFTPPut_3;

							masktFTPPut_3 = masktFTPPut_3.replaceAll("\\.",
									"\\\\.").replaceAll("\\*", ".*");

							final String finalMasktFTPPut_3 = masktFTPPut_3;
							java.io.File[] listingstFTPPut_3 = null;
							java.io.File filetFTPPut_3 = new java.io.File(
									tempdirtFTPPut_3);
							if (filetFTPPut_3.isDirectory()) {
								listingstFTPPut_3 = filetFTPPut_3
										.listFiles(new java.io.FileFilter() {
											public boolean accept(
													java.io.File pathname) {
												boolean result = false;
												if (pathname != null
														&& pathname.isFile()) {
													result = java.util.regex.Pattern
															.compile(
																	finalMasktFTPPut_3)
															.matcher(
																	pathname.getName())
															.find();
												}
												return result;
											}
										});
							}
							if (listingstFTPPut_3 != null
									&& listingstFTPPut_3.length > 0) {
								for (int mtFTPPut_3 = 0; mtFTPPut_3 < listingstFTPPut_3.length; mtFTPPut_3++) {
									if (listingstFTPPut_3[mtFTPPut_3].getName()
											.matches(masktFTPPut_3)) {

										int modetFTPPut_3 = com.jcraft.jsch.ChannelSftp.OVERWRITE;

										try {
											c_tFTPPut_3
													.put(listingstFTPPut_3[mtFTPPut_3]
															.getAbsolutePath(),
															context.getProperty("sftpfolder")
																	+ context
																			.getProperty("uossuccessfolder")
																	+ "/",
															monitortFTPPut_3,
															modetFTPPut_3);

											// add info to list will return
											msg_tFTPPut_3
													.add("file: "
															+ listingstFTPPut_3[mtFTPPut_3]
																	.getAbsolutePath()
															+ ", size: "
															+ listingstFTPPut_3[mtFTPPut_3]
																	.length()
															+ " bytes upload successfully");

											globalMap.put(
													"tFTPPut_3_CURRENT_STATUS",
													"File transfer OK.");
											if (c_tFTPPut_3
													.stat(context
															.getProperty("sftpfolder")
															+ context
																	.getProperty("uossuccessfolder")
															+ "/"
															+ "/"
															+ listingstFTPPut_3[mtFTPPut_3]
																	.getName())
													.getAtimeString() != null) {
												globalMap
														.put("tFTPPut_3_CURRENT_FILE_EXISTS",
																true);
											}
										} catch (com.jcraft.jsch.SftpException e_tFTPPut_3) {

											globalMap.put(
													"tFTPPut_3_CURRENT_STATUS",
													"File transfer fail.");
											if (c_tFTPPut_3
													.stat(context
															.getProperty("sftpfolder")
															+ context
																	.getProperty("uossuccessfolder")
															+ "/"
															+ "/"
															+ listingstFTPPut_3[mtFTPPut_3]
																	.getName())
													.getAtimeString() != null) {
												globalMap
														.put("tFTPPut_3_CURRENT_FILE_EXISTS",
																true);
											}

											System.err
													.println("File permission denied: "
															+ context
																	.getProperty("sftpfolder")
															+ context
																	.getProperty("uossuccessfolder")
															+ "/"
															+ "/"
															+ listingstFTPPut_3[mtFTPPut_3]
																	.getName());

										} catch (java.lang.Exception e_tFTPPut_3) {
											if (!(e_tFTPPut_3 instanceof com.jcraft.jsch.SftpException)) {
												msg_tFTPPut_3
														.add("file "
																+ listingstFTPPut_3[mtFTPPut_3]
																		.getAbsolutePath()
																+ " not found?");

												globalMap
														.put("tFTPPut_3_CURRENT_FILE_EXISTS",
																false);
											}
											throw e_tFTPPut_3;
										}
										nb_file_tFTPPut_3++;
									}
								}
							} else {

								System.err.println("No match file exist!");
							}

							// do rename
							if (maptFTPPut_3.get(keytFTPPut_3) != ""
									&& keytFTPPut_3 != maptFTPPut_3
											.get(keytFTPPut_3)) {

								try {
									c_tFTPPut_3
											.rm(context
													.getProperty("sftpfolder")
													+ context
															.getProperty("uossuccessfolder")
													+ "/"
													+ "/"
													+ maptFTPPut_3
															.get(keytFTPPut_3));
								} catch (com.jcraft.jsch.SftpException e_tFTPPut_3) {
								}

								try {
									c_tFTPPut_3
											.rename(context
													.getProperty("sftpfolder")
													+ context
															.getProperty("uossuccessfolder")
													+ "/" + "/" + keytFTPPut_3,
													context.getProperty("sftpfolder")
															+ context
																	.getProperty("uossuccessfolder")
															+ "/"
															+ "/"
															+ maptFTPPut_3
																	.get(keytFTPPut_3));
									globalMap.put("tFTPPut_3_CURRENT_STATUS",
											"File rename OK.");
								} catch (com.jcraft.jsch.SftpException e_tFTPPut_3) {
									globalMap.put("tFTPPut_3_CURRENT_STATUS",
											"File rename fail.");
									throw e_tFTPPut_3;
								}
							}
						}

					} catch (java.lang.Exception e_tFTPPut_3) {

						System.err.print(e_tFTPPut_3.getMessage());
					}

					tos_count_tFTPPut_3++;

					/**
					 * [tFTPPut_3 main ] stop
					 */

					/**
					 * [tFTPPut_3 end ] start
					 */

					currentComponent = "tFTPPut_3";

				}
				msg_tFTPPut_3.add(nb_file_tFTPPut_3
						+ " files have been uploaded.");

				StringBuffer sb_tFTPPut_3 = new StringBuffer();
				for (String item_tFTPPut_3 : msg_tFTPPut_3) {
					sb_tFTPPut_3.append(item_tFTPPut_3).append("\n");
				}
				globalMap.put("tFTPPut_3_TRANSFER_MESSAGES",
						sb_tFTPPut_3.toString());

				globalMap.put("tFTPPut_3_NB_FILE", nb_file_tFTPPut_3);

				ok_Hash.put("tFTPPut_3", true);
				end_Hash.put("tFTPPut_3", System.currentTimeMillis());

				tFTPFileExist_1Process(globalMap);

				/**
				 * [tFTPPut_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFTPPut_3 finally ] start
				 */

				currentComponent = "tFTPPut_3";

				/**
				 * [tFTPPut_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPPut_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_14Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_14 begin ] start
				 */

				ok_Hash.put("tJava_14", false);
				start_Hash.put("tJava_14", System.currentTimeMillis());

				currentComponent = "tJava_14";

				int tos_count_tJava_14 = 0;

				((Logger) globalMap.get("LOGGER"))
						.debug("can't upload to ftp file "
								+ context.getProperty("sftpfolder")
								+ context.getProperty("uossuccessfolder")
								+ "/"
								+ (String) context
										.getProperty("timestampedfilename_success")
								+ "   ");

				/**
				 * [tJava_14 begin ] stop
				 */

				/**
				 * [tJava_14 main ] start
				 */

				currentComponent = "tJava_14";

				tos_count_tJava_14++;

				/**
				 * [tJava_14 main ] stop
				 */

				/**
				 * [tJava_14 end ] start
				 */

				currentComponent = "tJava_14";

				ok_Hash.put("tJava_14", true);
				end_Hash.put("tJava_14", System.currentTimeMillis());

				/**
				 * [tJava_14 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_14 finally ] start
				 */

				currentComponent = "tJava_14";

				/**
				 * [tJava_14 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_14_SUBPROCESS_STATE", 1);
	}

	public void tFTPFileExist_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFTPFileExist_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFTPFileExist_1 begin ] start
				 */

				ok_Hash.put("tFTPFileExist_1", false);
				start_Hash.put("tFTPFileExist_1", System.currentTimeMillis());

				currentComponent = "tFTPFileExist_1";

				int tos_count_tFTPFileExist_1 = 0;

				com.jcraft.jsch.ChannelSftp c_tFTPFileExist_1 = (com.jcraft.jsch.ChannelSftp) globalMap
						.get("conn_tFTPConnection_1");

				if (c_tFTPFileExist_1.getHome() != null
						&& !c_tFTPFileExist_1.getHome().equals(
								c_tFTPFileExist_1.pwd())) {
					c_tFTPFileExist_1.cd(c_tFTPFileExist_1.getHome());
				}

				/**
				 * [tFTPFileExist_1 begin ] stop
				 */

				/**
				 * [tFTPFileExist_1 main ] start
				 */

				currentComponent = "tFTPFileExist_1";

				String remoteDir_tFTPFileExist_1 = context
						.getProperty("sftpfolder")
						+ context.getProperty("uossuccessfolder")
						+ "/".replaceAll("\\\\", "/");

				try {
					if (c_tFTPFileExist_1
							.stat(context.getProperty("sftpfolder")
									+ context.getProperty("uossuccessfolder")
									+ "/"
									+ "/"
									+ (String) context
											.getProperty("timestampedfilename_success"))
							.getAtimeString() != null) {

						globalMap.put("tFTPFileExist_1_EXISTS", true);
					}
				} catch (java.lang.Exception e) {

					globalMap.put("tFTPFileExist_1_EXISTS", false);
				}
				globalMap.put("tFTPFileExist_1_FILENAME", (String) context
						.getProperty("timestampedfilename_success"));

				tos_count_tFTPFileExist_1++;

				/**
				 * [tFTPFileExist_1 main ] stop
				 */

				/**
				 * [tFTPFileExist_1 end ] start
				 */

				currentComponent = "tFTPFileExist_1";

				ok_Hash.put("tFTPFileExist_1", true);
				end_Hash.put("tFTPFileExist_1", System.currentTimeMillis());

				if ((globalMap.get("tFTPFileExist_1_EXISTS") != null) &&

				((Boolean) globalMap.get("tFTPFileExist_1_EXISTS"))) {

					tJava_14Process(globalMap);
				}

				/**
				 * [tFTPFileExist_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFTPFileExist_1 finally ] start
				 */

				currentComponent = "tFTPFileExist_1";

				/**
				 * [tFTPFileExist_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPFileExist_1_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public String line;

		public String getLine() {
			return this.line;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public String line;

		public String getLine() {
			return this.line;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public String line;

		public String getLine() {
			return this.line;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputFullRow_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputFullRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();

				row13Struct row13 = new row13Struct();

				row11Struct row11 = new row11Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.etlinterfacefolder
								+ "/"
								+ context.getProperty("uossuccessfolder")
								+ "/"
								+ context
										.getProperty("timestampedfilename_success")))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				if (filetFileOutputDelimited_1.exists()) {
					isFileGenerated_tFileOutputDelimited_1 = false;
				}
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				"|"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				outtFileOutputDelimited_1 = new routines.system.BufferedOutput(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_1, true),
								"UTF-8"));

				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tFileInputFullRow_1 begin ] start
				 */

				ok_Hash.put("tFileInputFullRow_1", false);
				start_Hash.put("tFileInputFullRow_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputFullRow_1";

				int tos_count_tFileInputFullRow_1 = 0;

				org.talend.fileprocess.FileInputDelimited fid_tFileInputFullRow_1 = null;

				try {// }
					fid_tFileInputFullRow_1 = new org.talend.fileprocess.FileInputDelimited(
							context.etlinterfacefolder + "/"
									+ context.getProperty("uostmpfolder")
									+ "/success_orders_shipped.csv",
							"ISO-8859-15", "", "\n", false, 0, 0, -1, -1, false);
					while (fid_tFileInputFullRow_1.nextRecord()) {// }
						row12 = null;
						boolean whetherReject_tFileInputFullRow_1 = false;
						row12 = new row12Struct();
						row12.line = fid_tFileInputFullRow_1.get(0);

						/**
						 * [tFileInputFullRow_1 begin ] stop
						 */

						/**
						 * [tFileInputFullRow_1 main ] start
						 */

						currentComponent = "tFileInputFullRow_1";

						tos_count_tFileInputFullRow_1++;

						/**
						 * [tFileInputFullRow_1 main ] stop
						 */

						/**
						 * [tUnite_1 main ] start
						 */

						currentComponent = "tUnite_1";

						// ////////

						// for output
						row11 = new row11Struct();

						row11.line = row12.line;

						nb_line_tUnite_1++;

						// ////////

						tos_count_tUnite_1++;

						/**
						 * [tUnite_1 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 main ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
						if (row11.line != null) {
							sb_tFileOutputDelimited_1.append(row11.line);
						}
						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

						nb_line_tFileOutputDelimited_1++;
						resourceMap.put("nb_line_tFileOutputDelimited_1",
								nb_line_tFileOutputDelimited_1);

						outtFileOutputDelimited_1
								.write(sb_tFileOutputDelimited_1.toString());

						tos_count_tFileOutputDelimited_1++;

						/**
						 * [tFileOutputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputFullRow_1 end ] start
						 */

						currentComponent = "tFileInputFullRow_1";

					}
				} finally {
					if (fid_tFileInputFullRow_1 != null) {
						fid_tFileInputFullRow_1.close();
					}
				}
				globalMap.put("tFileInputFullRow_1_NB_LINE",
						fid_tFileInputFullRow_1.getRowNumber());

				ok_Hash.put("tFileInputFullRow_1", true);
				end_Hash.put("tFileInputFullRow_1", System.currentTimeMillis());

				/**
				 * [tFileInputFullRow_1 end ] stop
				 */

				/**
				 * [tFileInputFullRow_2 begin ] start
				 */

				ok_Hash.put("tFileInputFullRow_2", false);
				start_Hash.put("tFileInputFullRow_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputFullRow_2";

				int tos_count_tFileInputFullRow_2 = 0;

				org.talend.fileprocess.FileInputDelimited fid_tFileInputFullRow_2 = null;

				try {// }
					fid_tFileInputFullRow_2 = new org.talend.fileprocess.FileInputDelimited(
							context.etlinterfacefolder + "/"
									+ context.getProperty("uostmpfolder")
									+ "/success_orders_nonshipped.csv",
							"ISO-8859-15", "", "\n", false, 0, 0, -1, -1, false);
					while (fid_tFileInputFullRow_2.nextRecord()) {// }
						row13 = null;
						boolean whetherReject_tFileInputFullRow_2 = false;
						row13 = new row13Struct();
						row13.line = fid_tFileInputFullRow_2.get(0);

						/**
						 * [tFileInputFullRow_2 begin ] stop
						 */

						/**
						 * [tFileInputFullRow_2 main ] start
						 */

						currentComponent = "tFileInputFullRow_2";

						tos_count_tFileInputFullRow_2++;

						/**
						 * [tFileInputFullRow_2 main ] stop
						 */

						/**
						 * [tUnite_1 main ] start
						 */

						currentComponent = "tUnite_1";

						// ////////

						// for output
						row11 = new row11Struct();

						row11.line = row13.line;

						nb_line_tUnite_1++;

						// ////////

						tos_count_tUnite_1++;

						/**
						 * [tUnite_1 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 main ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
						if (row11.line != null) {
							sb_tFileOutputDelimited_1.append(row11.line);
						}
						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

						nb_line_tFileOutputDelimited_1++;
						resourceMap.put("nb_line_tFileOutputDelimited_1",
								nb_line_tFileOutputDelimited_1);

						outtFileOutputDelimited_1
								.write(sb_tFileOutputDelimited_1.toString());

						tos_count_tFileOutputDelimited_1++;

						/**
						 * [tFileOutputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputFullRow_2 end ] start
						 */

						currentComponent = "tFileInputFullRow_2";

					}
				} finally {
					if (fid_tFileInputFullRow_2 != null) {
						fid_tFileInputFullRow_2.close();
					}
				}
				globalMap.put("tFileInputFullRow_2_NB_LINE",
						fid_tFileInputFullRow_2.getRowNumber());

				ok_Hash.put("tFileInputFullRow_2", true);
				end_Hash.put("tFileInputFullRow_2", System.currentTimeMillis());

				/**
				 * [tFileInputFullRow_2 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				tFileProperties_1Process(globalMap);

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputFullRow_1 finally ] start
				 */

				currentComponent = "tFileInputFullRow_1";

				/**
				 * [tFileInputFullRow_1 finally ] stop
				 */

				/**
				 * [tFileInputFullRow_2 finally ] start
				 */

				currentComponent = "tFileInputFullRow_2";

				/**
				 * [tFileInputFullRow_2 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputFullRow_1_SUBPROCESS_STATE", 1);
	}

	public void tXSLT_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tXSLT_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tXSLT_1 begin ] start
				 */

				ok_Hash.put("tXSLT_1", false);
				start_Hash.put("tXSLT_1", System.currentTimeMillis());

				currentComponent = "tXSLT_1";

				int tos_count_tXSLT_1 = 0;

				/**
				 * [tXSLT_1 begin ] stop
				 */

				/**
				 * [tXSLT_1 main ] start
				 */

				currentComponent = "tXSLT_1";

				System.setProperty("javax.xml.transform.TransformerFactory",
						"net.sf.saxon.TransformerFactoryImpl");

				java.io.File xsltFiletXSLT_1 = new java.io.File(context.etlroot
						+ "/xsl/updateorderstatus/errors.xsl");
				javax.xml.transform.stream.StreamSource styleSourcetXSLT_1 = new javax.xml.transform.stream.StreamSource(
						xsltFiletXSLT_1);
				javax.xml.transform.Transformer ttXSLT_1 = javax.xml.transform.TransformerFactory
						.newInstance().newTransformer(styleSourcetXSLT_1);

				javax.xml.transform.stream.StreamSource xmlSourcetXSLT_1 = new javax.xml.transform.stream.StreamSource(
						new java.io.File(context.etlinterfacefolder + "/"
								+ context.getProperty("uostmpfolder")
								+ "/soapresponse_shipped.tmp"));
				ttXSLT_1.transform(
						xmlSourcetXSLT_1,
						new javax.xml.transform.stream.StreamResult(
								new java.io.File(context.etlinterfacefolder
										+ "/"
										+ context.getProperty("uostmpfolder")
										+ "/errors_orders_shipped.csv")));

				if ((context.etlinterfacefolder + "/"
						+ context.getProperty("uostmpfolder") + "/errors_orders_shipped.csv")
							.indexOf("/") != -1) {
					globalMap
							.put("tXSLT_1_OUTPUT_FILEPATH",
									(context.etlinterfacefolder
											+ "/"
											+ context
													.getProperty("uostmpfolder") + "/errors_orders_shipped.csv")
											.substring(
													0,
													(context.etlinterfacefolder
															+ "/"
															+ context
																	.getProperty("uostmpfolder") + "/errors_orders_shipped.csv")
															.lastIndexOf("/")));
					globalMap
							.put("tXSLT_1_OUTPUT_FILENAME",
									(context.etlinterfacefolder
											+ "/"
											+ context
													.getProperty("uostmpfolder") + "/errors_orders_shipped.csv").substring((context.etlinterfacefolder
											+ "/"
											+ context
													.getProperty("uostmpfolder") + "/errors_orders_shipped.csv")
											.lastIndexOf("/") + 1));
				} else {
					globalMap.put(
							"tXSLT_1_OUTPUT_FILEPATH",
							context.etlinterfacefolder + "/"
									+ context.getProperty("uostmpfolder")
									+ "/errors_orders_shipped.csv");
					globalMap.put(
							"tXSLT_1_OUTPUT_FILENAME",
							context.etlinterfacefolder + "/"
									+ context.getProperty("uostmpfolder")
									+ "/errors_orders_shipped.csv");
				}

				tos_count_tXSLT_1++;

				/**
				 * [tXSLT_1 main ] stop
				 */

				/**
				 * [tXSLT_1 end ] start
				 */

				currentComponent = "tXSLT_1";

				ok_Hash.put("tXSLT_1", true);
				end_Hash.put("tXSLT_1", System.currentTimeMillis());

				/**
				 * [tXSLT_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tXSLT_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileExist_6Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tXSLT_1 finally ] start
				 */

				currentComponent = "tXSLT_1";

				/**
				 * [tXSLT_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tXSLT_1_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileExist_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_6 begin ] start
				 */

				ok_Hash.put("tFileExist_6", false);
				start_Hash.put("tFileExist_6", System.currentTimeMillis());

				currentComponent = "tFileExist_6";

				int tos_count_tFileExist_6 = 0;

				/**
				 * [tFileExist_6 begin ] stop
				 */

				/**
				 * [tFileExist_6 main ] start
				 */

				currentComponent = "tFileExist_6";

				java.io.File file_tFileExist_6 = new java.io.File(
						context.etlinterfacefolder + "/"
								+ context.getProperty("uostmpfolder")
								+ "/errors_orders_shipped.csv");
				if (!file_tFileExist_6.exists()) {
					globalMap.put("tFileExist_6_EXISTS", false);
				} else {
					globalMap.put("tFileExist_6_EXISTS", true);
				}

				globalMap.put(
						"tFileExist_6_FILENAME",
						context.etlinterfacefolder + "/"
								+ context.getProperty("uostmpfolder")
								+ "/errors_orders_shipped.csv");

				tos_count_tFileExist_6++;

				/**
				 * [tFileExist_6 main ] stop
				 */

				/**
				 * [tFileExist_6 end ] start
				 */

				currentComponent = "tFileExist_6";

				ok_Hash.put("tFileExist_6", true);
				end_Hash.put("tFileExist_6", System.currentTimeMillis());

				tJava_6Process(globalMap);

				/**
				 * [tFileExist_6 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_6 finally ] start
				 */

				currentComponent = "tFileExist_6";

				/**
				 * [tFileExist_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_6_SUBPROCESS_STATE", 1);
	}

	public void tJava_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());

				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				((Logger) globalMap.get("LOGGER"))
						.debug("tjava 6 tFilterRow_2_NB_LINE_REJECT"
								+ ((Integer) globalMap
										.get("tFilterRow_2_NB_LINE_REJECT")));

				((Logger) globalMap.get("LOGGER"))
						.debug("tjava 6 t F ilterRow_2_NB_LINE_OK"
								+ ((Integer) globalMap
										.get("tFilterRow_2_NB_LINE_OK")));

				context.setProperty(
						"timestampedfilename_error",
						"orders_"
								+ TalendDate.formatDate("yyyyMMddHHmmss",
										TalendDate.getCurrentDate()) + ".csv");

				((Logger) globalMap.get("LOGGER"))
						.debug("Timestamped filename error: "
								+ context
										.getProperty("timestampedfilename_error"));

				((Logger) globalMap.get("LOGGER")).debug("tFileExist_6_EXISTS "
						+ (Boolean) globalMap.get("tFileExist_6_EXISTS"));

				((Logger) globalMap.get("LOGGER")).debug("tFileExist_7_EXISTS "
						+ (Boolean) globalMap.get("tFileExist_7_EXISTS"));

				if (globalMap.get("tFilterRow_2_NB_LINE_REJECT").equals(0) ||

				globalMap.get("tFilterRow_2_NB_LINE_OK").equals(0)) {

					if ((Boolean) globalMap.get("tFileExist_6_EXISTS") == null
							&& (Boolean) globalMap.get("tFileExist_7_EXISTS") != null
							&& (Boolean) globalMap.get("tFileExist_7_EXISTS") == true) {

						globalMap.put("file_error_to_rename",
								"errors_orders_nonshipped.csv");

					} else if ((Boolean) globalMap.get("tFileExist_7_EXISTS") == null
							&& (Boolean) globalMap.get("tFileExist_6_EXISTS") != null
							&& (Boolean) globalMap.get("tFileExist_6_EXISTS") == true) {
						globalMap.put("file_error_to_rename",
								"errors_orders_shipped.csv");

					}

				}

				((Logger) globalMap.get("LOGGER")).debug("file name to rename "
						+ globalMap.get("file_error_to_rename"));

				/**
				 * [tJava_6 begin ] stop
				 */

				/**
				 * [tJava_6 main ] start
				 */

				currentComponent = "tJava_6";

				tos_count_tJava_6++;

				/**
				 * [tJava_6 main ] stop
				 */

				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				if ((globalMap.get("tFileExist_7_EXISTS") != null)
						&& (globalMap.get("tFileExist_6_EXISTS") != null) &&

						((Boolean) globalMap.get("tFileExist_6_EXISTS"))
						&& ((Boolean) globalMap.get("tFileExist_7_EXISTS"))) {

					tFileInputFullRow_3Process(globalMap);
				}

				if ((globalMap.get("file_error_to_rename") != null)) {

					tFileCopy_2Process(globalMap);
				}

				/**
				 * [tJava_6 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_6 finally ] start
				 */

				currentComponent = "tJava_6";

				/**
				 * [tJava_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public String line;

		public String getLine() {
			return this.line;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public String line;

		public String getLine() {
			return this.line;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public String line;

		public String getLine() {
			return this.line;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputFullRow_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputFullRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();

				row16Struct row16 = new row16Struct();

				row15Struct row15 = new row15Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						context.etlinterfacefolder
								+ "/"
								+ context.getProperty("uosfailedfolder")
								+ "/"
								+ context
										.getProperty("timestampedfilename_error")))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);
				if (filetFileOutputDelimited_2.exists()) {
					isFileGenerated_tFileOutputDelimited_2 = false;
				}
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /**
				 * Start field
				 * tFileOutputDelimited_2:FIELDSEPARATOR
				 */
				"|"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
				 * Start
				 * field tFileOutputDelimited_2:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				outtFileOutputDelimited_2 = new routines.system.BufferedOutput(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_2, true),
								"UTF-8"));

				resourceMap.put("out_tFileOutputDelimited_2",
						outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2",
						nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tUnite_2 begin ] start
				 */

				ok_Hash.put("tUnite_2", false);
				start_Hash.put("tUnite_2", System.currentTimeMillis());

				currentComponent = "tUnite_2";

				int tos_count_tUnite_2 = 0;

				int nb_line_tUnite_2 = 0;

				/**
				 * [tUnite_2 begin ] stop
				 */

				/**
				 * [tFileInputFullRow_3 begin ] start
				 */

				ok_Hash.put("tFileInputFullRow_3", false);
				start_Hash.put("tFileInputFullRow_3",
						System.currentTimeMillis());

				currentComponent = "tFileInputFullRow_3";

				int tos_count_tFileInputFullRow_3 = 0;

				org.talend.fileprocess.FileInputDelimited fid_tFileInputFullRow_3 = null;

				try {// }
					fid_tFileInputFullRow_3 = new org.talend.fileprocess.FileInputDelimited(
							context.etlinterfacefolder + "/"
									+ context.getProperty("uostmpfolder")
									+ "/errors_orders_shipped.csv",
							"ISO-8859-15", "", "\n", false, 0, 0, -1, -1, false);
					while (fid_tFileInputFullRow_3.nextRecord()) {// }
						row14 = null;
						boolean whetherReject_tFileInputFullRow_3 = false;
						row14 = new row14Struct();
						row14.line = fid_tFileInputFullRow_3.get(0);

						/**
						 * [tFileInputFullRow_3 begin ] stop
						 */

						/**
						 * [tFileInputFullRow_3 main ] start
						 */

						currentComponent = "tFileInputFullRow_3";

						tos_count_tFileInputFullRow_3++;

						/**
						 * [tFileInputFullRow_3 main ] stop
						 */

						/**
						 * [tUnite_2 main ] start
						 */

						currentComponent = "tUnite_2";

						// ////////

						// for output
						row15 = new row15Struct();

						row15.line = row14.line;

						nb_line_tUnite_2++;

						// ////////

						tos_count_tUnite_2++;

						/**
						 * [tUnite_2 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 main ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
						if (row15.line != null) {
							sb_tFileOutputDelimited_2.append(row15.line);
						}
						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

						nb_line_tFileOutputDelimited_2++;
						resourceMap.put("nb_line_tFileOutputDelimited_2",
								nb_line_tFileOutputDelimited_2);

						outtFileOutputDelimited_2
								.write(sb_tFileOutputDelimited_2.toString());

						tos_count_tFileOutputDelimited_2++;

						/**
						 * [tFileOutputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputFullRow_3 end ] start
						 */

						currentComponent = "tFileInputFullRow_3";

					}
				} finally {
					if (fid_tFileInputFullRow_3 != null) {
						fid_tFileInputFullRow_3.close();
					}
				}
				globalMap.put("tFileInputFullRow_3_NB_LINE",
						fid_tFileInputFullRow_3.getRowNumber());

				ok_Hash.put("tFileInputFullRow_3", true);
				end_Hash.put("tFileInputFullRow_3", System.currentTimeMillis());

				/**
				 * [tFileInputFullRow_3 end ] stop
				 */

				/**
				 * [tFileInputFullRow_4 begin ] start
				 */

				ok_Hash.put("tFileInputFullRow_4", false);
				start_Hash.put("tFileInputFullRow_4",
						System.currentTimeMillis());

				currentComponent = "tFileInputFullRow_4";

				int tos_count_tFileInputFullRow_4 = 0;

				org.talend.fileprocess.FileInputDelimited fid_tFileInputFullRow_4 = null;

				try {// }
					fid_tFileInputFullRow_4 = new org.talend.fileprocess.FileInputDelimited(
							context.etlinterfacefolder + "/"
									+ context.getProperty("uostmpfolder")
									+ "/errors_orders_nonshipped.csv",
							"ISO-8859-15", "", "\n", false, 0, 0, -1, -1, false);
					while (fid_tFileInputFullRow_4.nextRecord()) {// }
						row16 = null;
						boolean whetherReject_tFileInputFullRow_4 = false;
						row16 = new row16Struct();
						row16.line = fid_tFileInputFullRow_4.get(0);

						/**
						 * [tFileInputFullRow_4 begin ] stop
						 */

						/**
						 * [tFileInputFullRow_4 main ] start
						 */

						currentComponent = "tFileInputFullRow_4";

						tos_count_tFileInputFullRow_4++;

						/**
						 * [tFileInputFullRow_4 main ] stop
						 */

						/**
						 * [tUnite_2 main ] start
						 */

						currentComponent = "tUnite_2";

						// ////////

						// for output
						row15 = new row15Struct();

						row15.line = row16.line;

						nb_line_tUnite_2++;

						// ////////

						tos_count_tUnite_2++;

						/**
						 * [tUnite_2 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 main ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
						if (row15.line != null) {
							sb_tFileOutputDelimited_2.append(row15.line);
						}
						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

						nb_line_tFileOutputDelimited_2++;
						resourceMap.put("nb_line_tFileOutputDelimited_2",
								nb_line_tFileOutputDelimited_2);

						outtFileOutputDelimited_2
								.write(sb_tFileOutputDelimited_2.toString());

						tos_count_tFileOutputDelimited_2++;

						/**
						 * [tFileOutputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputFullRow_4 end ] start
						 */

						currentComponent = "tFileInputFullRow_4";

					}
				} finally {
					if (fid_tFileInputFullRow_4 != null) {
						fid_tFileInputFullRow_4.close();
					}
				}
				globalMap.put("tFileInputFullRow_4_NB_LINE",
						fid_tFileInputFullRow_4.getRowNumber());

				ok_Hash.put("tFileInputFullRow_4", true);
				end_Hash.put("tFileInputFullRow_4", System.currentTimeMillis());

				/**
				 * [tFileInputFullRow_4 end ] stop
				 */

				/**
				 * [tUnite_2 end ] start
				 */

				currentComponent = "tUnite_2";

				globalMap.put("tUnite_2_NB_LINE", nb_line_tUnite_2);

				ok_Hash.put("tUnite_2", true);
				end_Hash.put("tUnite_2", System.currentTimeMillis());

				/**
				 * [tUnite_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE",
						nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				tFileProperties_2Process(globalMap);

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputFullRow_3 finally ] start
				 */

				currentComponent = "tFileInputFullRow_3";

				/**
				 * [tFileInputFullRow_3 finally ] stop
				 */

				/**
				 * [tFileInputFullRow_4 finally ] start
				 */

				currentComponent = "tFileInputFullRow_4";

				/**
				 * [tFileInputFullRow_4 finally ] stop
				 */

				/**
				 * [tUnite_2 finally ] start
				 */

				currentComponent = "tUnite_2";

				/**
				 * [tUnite_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputFullRow_3_SUBPROCESS_STATE", 1);
	}

	public static class row28Struct implements
			routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public String abs_path;

		public String getAbs_path() {
			return this.abs_path;
		}

		public String dirname;

		public String getDirname() {
			return this.dirname;
		}

		public String basename;

		public String getBasename() {
			return this.basename;
		}

		public String mode_string;

		public String getMode_string() {
			return this.mode_string;
		}

		public Long size;

		public Long getSize() {
			return this.size;
		}

		public Long mtime;

		public Long getMtime() {
			return this.mtime;
		}

		public String mtime_string;

		public String getMtime_string() {
			return this.mtime_string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.abs_path = readString(dis);

					this.dirname = readString(dis);

					this.basename = readString(dis);

					this.mode_string = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.size = null;
					} else {
						this.size = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mtime = null;
					} else {
						this.mtime = dis.readLong();
					}

					this.mtime_string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.abs_path, dos);

				// String

				writeString(this.dirname, dos);

				// String

				writeString(this.basename, dos);

				// String

				writeString(this.mode_string, dos);

				// Long

				if (this.size == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.size);
				}

				// Long

				if (this.mtime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.mtime);
				}

				// String

				writeString(this.mtime_string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("abs_path=" + abs_path);
			sb.append(",dirname=" + dirname);
			sb.append(",basename=" + basename);
			sb.append(",mode_string=" + mode_string);
			sb.append(",size=" + String.valueOf(size));
			sb.append(",mtime=" + String.valueOf(mtime));
			sb.append(",mtime_string=" + mtime_string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileProperties_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileProperties_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row28Struct row28 = new row28Struct();

				/**
				 * [tJavaRow_8 begin ] start
				 */

				ok_Hash.put("tJavaRow_8", false);
				start_Hash.put("tJavaRow_8", System.currentTimeMillis());

				currentComponent = "tJavaRow_8";

				int tos_count_tJavaRow_8 = 0;

				int nb_line_tJavaRow_8 = 0;

				/**
				 * [tJavaRow_8 begin ] stop
				 */

				/**
				 * [tFileProperties_2 begin ] start
				 */

				ok_Hash.put("tFileProperties_2", false);
				start_Hash.put("tFileProperties_2", System.currentTimeMillis());

				currentComponent = "tFileProperties_2";

				int tos_count_tFileProperties_2 = 0;

				java.io.File file_tFileProperties_2 = new java.io.File(
						context.etlinterfacefolder
								+ "/"
								+ context.getProperty("uosfailedfolder")
								+ "/"
								+ context
										.getProperty("timestampedfilename_error"));
				row28 = new row28Struct();

				if (file_tFileProperties_2.exists()) {
					row28.abs_path = file_tFileProperties_2.getAbsolutePath();
					row28.dirname = file_tFileProperties_2.getParent();
					row28.basename = file_tFileProperties_2.getName();
					String r_tFileProperties_2 = (file_tFileProperties_2
							.canRead()) ? "r" : "-";
					String w_tFileProperties_2 = (file_tFileProperties_2
							.canWrite()) ? "w" : "-";
					// String x_ = (file_.canExecute())?"x":"-"; /*since
					// JDK1.6*/
					row28.mode_string = r_tFileProperties_2
							+ w_tFileProperties_2;
					row28.size = file_tFileProperties_2.length();
					row28.mtime = file_tFileProperties_2.lastModified();
					row28.mtime_string = (new java.util.Date(
							file_tFileProperties_2.lastModified())).toString();

				}

				/**
				 * [tFileProperties_2 begin ] stop
				 */

				/**
				 * [tFileProperties_2 main ] start
				 */

				currentComponent = "tFileProperties_2";

				tos_count_tFileProperties_2++;

				/**
				 * [tFileProperties_2 main ] stop
				 */

				/**
				 * [tJavaRow_8 main ] start
				 */

				currentComponent = "tJavaRow_8";

				/*
				 * if((Long)row28.size>0){
				 * 
				 * ((Logger) globalMap.get("LOGGER")).info("  file  "+context.
				 * etlinterfacefolder + "/" +
				 * context.getProperty("uosfailedfolder") +
				 * "/"+context.getProperty("timestampedfilename_error")); }
				 */

				globalMap.put("file_error_size", row28.size);

				if (row28.size != null && row28.size > 0) {
					((Logger) globalMap.get("LOGGER")).debug("  file  "
							+ context.etlinterfacefolder + "/"
							+ context.getProperty("uosfailedfolder") + "/"
							+ context.getProperty("timestampedfilename_error"));

					((Logger) globalMap.get("LOGGER")).debug(row28.size);

				}
				nb_line_tJavaRow_8++;

				tos_count_tJavaRow_8++;

				/**
				 * [tJavaRow_8 main ] stop
				 */

				/**
				 * [tFileProperties_2 end ] start
				 */

				currentComponent = "tFileProperties_2";

				ok_Hash.put("tFileProperties_2", true);
				end_Hash.put("tFileProperties_2", System.currentTimeMillis());

				/**
				 * [tFileProperties_2 end ] stop
				 */

				/**
				 * [tJavaRow_8 end ] start
				 */

				currentComponent = "tJavaRow_8";

				globalMap.put("tJavaRow_8_NB_LINE", nb_line_tJavaRow_8);

				ok_Hash.put("tJavaRow_8", true);
				end_Hash.put("tJavaRow_8", System.currentTimeMillis());

				if ((Long) globalMap.get("file_error_size") > 0
						&& context.getProperty("sftpenabled").equals("true")) {

					tJava_12Process(globalMap);
				}

				if (((Long) globalMap.get("file_error_size")) <= 0) {

					tFileDelete_4Process(globalMap);
				}

				/**
				 * [tJavaRow_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileProperties_2 finally ] start
				 */

				currentComponent = "tFileProperties_2";

				/**
				 * [tFileProperties_2 finally ] stop
				 */

				/**
				 * [tJavaRow_8 finally ] start
				 */

				currentComponent = "tJavaRow_8";

				/**
				 * [tJavaRow_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileProperties_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_12 begin ] start
				 */

				ok_Hash.put("tJava_12", false);
				start_Hash.put("tJava_12", System.currentTimeMillis());

				currentComponent = "tJava_12";

				int tos_count_tJava_12 = 0;

				((Logger) globalMap.get("LOGGER"))
						.debug("trying to copy file from  "
								+

								context.etlinterfacefolder
								+ "/"
								+ context.getProperty("uosfailedfolder")
								+ "/"
								+ ((String) context
										.getProperty("timestampedfilename_error")));

				((Logger) globalMap.get("LOGGER")).debug("  to  "
						+ context.getProperty("sftpfolder")
						+ context.getProperty("uosfailedfolder") + "/");

				/**
				 * [tJava_12 begin ] stop
				 */

				/**
				 * [tJava_12 main ] start
				 */

				currentComponent = "tJava_12";

				tos_count_tJava_12++;

				/**
				 * [tJava_12 main ] stop
				 */

				/**
				 * [tJava_12 end ] start
				 */

				currentComponent = "tJava_12";

				ok_Hash.put("tJava_12", true);
				end_Hash.put("tJava_12", System.currentTimeMillis());

				tFTPPut_1Process(globalMap);

				/**
				 * [tJava_12 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_12 finally ] start
				 */

				currentComponent = "tJava_12";

				/**
				 * [tJava_12 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}

	public void tFTPPut_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFTPPut_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFTPPut_1 begin ] start
				 */

				ok_Hash.put("tFTPPut_1", false);
				start_Hash.put("tFTPPut_1", System.currentTimeMillis());

				currentComponent = "tFTPPut_1";

				int tos_count_tFTPPut_1 = 0;

				int nb_file_tFTPPut_1 = 0;
				// *** sftp *** //

				class MyProgressMonitor_tFTPPut_1 implements
						com.jcraft.jsch.SftpProgressMonitor {
					public void init(int op, String src, String dest, long max) {
					}

					public boolean count(long count) {
						return true;
					}

					public void end() {
					}
				}

				com.jcraft.jsch.ChannelSftp c_tFTPPut_1 = (com.jcraft.jsch.ChannelSftp) globalMap
						.get("conn_tFTPConnection_1");

				if (c_tFTPPut_1.getHome() != null
						&& !c_tFTPPut_1.getHome().equals(c_tFTPPut_1.pwd())) {
					c_tFTPPut_1.cd(c_tFTPPut_1.getHome());
				}

				// becasue there is not the same method in JSch class as
				// FTPClient class, define a list here
				java.util.List<String> msg_tFTPPut_1 = new java.util.ArrayList<String>();
				com.jcraft.jsch.SftpProgressMonitor monitortFTPPut_1 = new MyProgressMonitor_tFTPPut_1();
				java.util.List<java.util.Map<String, String>> listtFTPPut_1 = new java.util.ArrayList<java.util.Map<String, String>>();

				java.util.Map<String, String> maptFTPPut_10 = new java.util.HashMap<String, String>();
				maptFTPPut_10.put(((String) context
						.getProperty("timestampedfilename_error")),
						((String) context
								.getProperty("timestampedfilename_error")));
				listtFTPPut_1.add(maptFTPPut_10);
				String localdirtFTPPut_1 = context.etlinterfacefolder + "/"
						+ context.getProperty("uosfailedfolder") + "/";

				for (java.util.Map<String, String> maptFTPPut_1 : listtFTPPut_1) {

					/**
					 * [tFTPPut_1 begin ] stop
					 */

					/**
					 * [tFTPPut_1 main ] start
					 */

					currentComponent = "tFTPPut_1";

					try {
						globalMap.put("tFTPPut_1_CURRENT_STATUS",
								"No file transfered.");
						java.util.Set<String> keySettFTPPut_1 = maptFTPPut_1
								.keySet();
						for (String keytFTPPut_1 : keySettFTPPut_1) {
							if (keytFTPPut_1 == null || "".equals(keytFTPPut_1)) {

								System.err.println("file name invalid!");
								continue;
							}
							String tempdirtFTPPut_1 = localdirtFTPPut_1;
							String filemasktFTPPut_1 = keytFTPPut_1;
							String dirtFTPPut_1 = null;

							String masktFTPPut_1 = filemasktFTPPut_1
									.replaceAll("\\\\", "/");
							int itFTPPut_1 = masktFTPPut_1.lastIndexOf('/');
							if (itFTPPut_1 != -1) {
								dirtFTPPut_1 = masktFTPPut_1.substring(0,
										itFTPPut_1);
								masktFTPPut_1 = masktFTPPut_1
										.substring(itFTPPut_1 + 1);
							}
							if (dirtFTPPut_1 != null
									&& !"".equals(dirtFTPPut_1))
								tempdirtFTPPut_1 = tempdirtFTPPut_1 + "/"
										+ dirtFTPPut_1;

							masktFTPPut_1 = masktFTPPut_1.replaceAll("\\.",
									"\\\\.").replaceAll("\\*", ".*");

							final String finalMasktFTPPut_1 = masktFTPPut_1;
							java.io.File[] listingstFTPPut_1 = null;
							java.io.File filetFTPPut_1 = new java.io.File(
									tempdirtFTPPut_1);
							if (filetFTPPut_1.isDirectory()) {
								listingstFTPPut_1 = filetFTPPut_1
										.listFiles(new java.io.FileFilter() {
											public boolean accept(
													java.io.File pathname) {
												boolean result = false;
												if (pathname != null
														&& pathname.isFile()) {
													result = java.util.regex.Pattern
															.compile(
																	finalMasktFTPPut_1)
															.matcher(
																	pathname.getName())
															.find();
												}
												return result;
											}
										});
							}
							if (listingstFTPPut_1 != null
									&& listingstFTPPut_1.length > 0) {
								for (int mtFTPPut_1 = 0; mtFTPPut_1 < listingstFTPPut_1.length; mtFTPPut_1++) {
									if (listingstFTPPut_1[mtFTPPut_1].getName()
											.matches(masktFTPPut_1)) {

										int modetFTPPut_1 = com.jcraft.jsch.ChannelSftp.OVERWRITE;

										try {
											c_tFTPPut_1
													.put(listingstFTPPut_1[mtFTPPut_1]
															.getAbsolutePath(),
															context.getProperty("sftpfolder")
																	+ context
																			.getProperty("uosfailedfolder")
																	+ "/",
															monitortFTPPut_1,
															modetFTPPut_1);

											// add info to list will return
											msg_tFTPPut_1
													.add("file: "
															+ listingstFTPPut_1[mtFTPPut_1]
																	.getAbsolutePath()
															+ ", size: "
															+ listingstFTPPut_1[mtFTPPut_1]
																	.length()
															+ " bytes upload successfully");

											globalMap.put(
													"tFTPPut_1_CURRENT_STATUS",
													"File transfer OK.");
											if (c_tFTPPut_1
													.stat(context
															.getProperty("sftpfolder")
															+ context
																	.getProperty("uosfailedfolder")
															+ "/"
															+ "/"
															+ listingstFTPPut_1[mtFTPPut_1]
																	.getName())
													.getAtimeString() != null) {
												globalMap
														.put("tFTPPut_1_CURRENT_FILE_EXISTS",
																true);
											}
										} catch (com.jcraft.jsch.SftpException e_tFTPPut_1) {

											globalMap.put(
													"tFTPPut_1_CURRENT_STATUS",
													"File transfer fail.");
											if (c_tFTPPut_1
													.stat(context
															.getProperty("sftpfolder")
															+ context
																	.getProperty("uosfailedfolder")
															+ "/"
															+ "/"
															+ listingstFTPPut_1[mtFTPPut_1]
																	.getName())
													.getAtimeString() != null) {
												globalMap
														.put("tFTPPut_1_CURRENT_FILE_EXISTS",
																true);
											}

											System.err
													.println("File permission denied: "
															+ context
																	.getProperty("sftpfolder")
															+ context
																	.getProperty("uosfailedfolder")
															+ "/"
															+ "/"
															+ listingstFTPPut_1[mtFTPPut_1]
																	.getName());

										} catch (java.lang.Exception e_tFTPPut_1) {
											if (!(e_tFTPPut_1 instanceof com.jcraft.jsch.SftpException)) {
												msg_tFTPPut_1
														.add("file "
																+ listingstFTPPut_1[mtFTPPut_1]
																		.getAbsolutePath()
																+ " not found?");

												globalMap
														.put("tFTPPut_1_CURRENT_FILE_EXISTS",
																false);
											}
											throw e_tFTPPut_1;
										}
										nb_file_tFTPPut_1++;
									}
								}
							} else {

								System.err.println("No match file exist!");
							}

							// do rename
							if (maptFTPPut_1.get(keytFTPPut_1) != ""
									&& keytFTPPut_1 != maptFTPPut_1
											.get(keytFTPPut_1)) {

								try {
									c_tFTPPut_1
											.rm(context
													.getProperty("sftpfolder")
													+ context
															.getProperty("uosfailedfolder")
													+ "/"
													+ "/"
													+ maptFTPPut_1
															.get(keytFTPPut_1));
								} catch (com.jcraft.jsch.SftpException e_tFTPPut_1) {
								}

								try {
									c_tFTPPut_1
											.rename(context
													.getProperty("sftpfolder")
													+ context
															.getProperty("uosfailedfolder")
													+ "/" + "/" + keytFTPPut_1,
													context.getProperty("sftpfolder")
															+ context
																	.getProperty("uosfailedfolder")
															+ "/"
															+ "/"
															+ maptFTPPut_1
																	.get(keytFTPPut_1));
									globalMap.put("tFTPPut_1_CURRENT_STATUS",
											"File rename OK.");
								} catch (com.jcraft.jsch.SftpException e_tFTPPut_1) {
									globalMap.put("tFTPPut_1_CURRENT_STATUS",
											"File rename fail.");
									throw e_tFTPPut_1;
								}
							}
						}

					} catch (java.lang.Exception e_tFTPPut_1) {

						System.err.print(e_tFTPPut_1.getMessage());
					}

					tos_count_tFTPPut_1++;

					/**
					 * [tFTPPut_1 main ] stop
					 */

					/**
					 * [tFTPPut_1 end ] start
					 */

					currentComponent = "tFTPPut_1";

				}
				msg_tFTPPut_1.add(nb_file_tFTPPut_1
						+ " files have been uploaded.");

				StringBuffer sb_tFTPPut_1 = new StringBuffer();
				for (String item_tFTPPut_1 : msg_tFTPPut_1) {
					sb_tFTPPut_1.append(item_tFTPPut_1).append("\n");
				}
				globalMap.put("tFTPPut_1_TRANSFER_MESSAGES",
						sb_tFTPPut_1.toString());

				globalMap.put("tFTPPut_1_NB_FILE", nb_file_tFTPPut_1);

				ok_Hash.put("tFTPPut_1", true);
				end_Hash.put("tFTPPut_1", System.currentTimeMillis());

				tFTPFileExist_2Process(globalMap);

				/**
				 * [tFTPPut_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFTPPut_1 finally ] start
				 */

				currentComponent = "tFTPPut_1";

				/**
				 * [tFTPPut_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPPut_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_15Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_15 begin ] start
				 */

				ok_Hash.put("tJava_15", false);
				start_Hash.put("tJava_15", System.currentTimeMillis());

				currentComponent = "tJava_15";

				int tos_count_tJava_15 = 0;

				((Logger) globalMap.get("LOGGER"))
						.debug("can't upload to ftp file "
								+ context.getProperty("sftpfolder")
								+ context.getProperty("uosfailedfolder")
								+ "/"
								+ (String) context
										.getProperty("timestampedfilename_error")
								+ "   ");

				/**
				 * [tJava_15 begin ] stop
				 */

				/**
				 * [tJava_15 main ] start
				 */

				currentComponent = "tJava_15";

				tos_count_tJava_15++;

				/**
				 * [tJava_15 main ] stop
				 */

				/**
				 * [tJava_15 end ] start
				 */

				currentComponent = "tJava_15";

				ok_Hash.put("tJava_15", true);
				end_Hash.put("tJava_15", System.currentTimeMillis());

				/**
				 * [tJava_15 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_15 finally ] start
				 */

				currentComponent = "tJava_15";

				/**
				 * [tJava_15 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_15_SUBPROCESS_STATE", 1);
	}

	public void tFTPFileExist_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFTPFileExist_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFTPFileExist_2 begin ] start
				 */

				ok_Hash.put("tFTPFileExist_2", false);
				start_Hash.put("tFTPFileExist_2", System.currentTimeMillis());

				currentComponent = "tFTPFileExist_2";

				int tos_count_tFTPFileExist_2 = 0;

				com.jcraft.jsch.ChannelSftp c_tFTPFileExist_2 = (com.jcraft.jsch.ChannelSftp) globalMap
						.get("conn_tFTPConnection_1");

				if (c_tFTPFileExist_2.getHome() != null
						&& !c_tFTPFileExist_2.getHome().equals(
								c_tFTPFileExist_2.pwd())) {
					c_tFTPFileExist_2.cd(c_tFTPFileExist_2.getHome());
				}

				/**
				 * [tFTPFileExist_2 begin ] stop
				 */

				/**
				 * [tFTPFileExist_2 main ] start
				 */

				currentComponent = "tFTPFileExist_2";

				String remoteDir_tFTPFileExist_2 = context
						.getProperty("sftpfolder")
						+ context.getProperty("uosfailedfolder")
						+ "/".replaceAll("\\\\", "/");

				try {
					if (c_tFTPFileExist_2
							.stat(context.getProperty("sftpfolder")
									+ context.getProperty("uosfailedfolder")
									+ "/"
									+ "/"
									+ ((String) context
											.getProperty("timestampedfilename_error")))
							.getAtimeString() != null) {

						globalMap.put("tFTPFileExist_2_EXISTS", true);
					}
				} catch (java.lang.Exception e) {

					globalMap.put("tFTPFileExist_2_EXISTS", false);
				}
				globalMap.put("tFTPFileExist_2_FILENAME", ((String) context
						.getProperty("timestampedfilename_error")));

				tos_count_tFTPFileExist_2++;

				/**
				 * [tFTPFileExist_2 main ] stop
				 */

				/**
				 * [tFTPFileExist_2 end ] start
				 */

				currentComponent = "tFTPFileExist_2";

				ok_Hash.put("tFTPFileExist_2", true);
				end_Hash.put("tFTPFileExist_2", System.currentTimeMillis());

				if ((globalMap.get("tFTPFileExist_2_EXISTS") != null) &&

				((Boolean) globalMap.get("tFTPFileExist_2_EXISTS"))) {

					tJava_15Process(globalMap);
				}

				/**
				 * [tFTPFileExist_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFTPFileExist_2 finally ] start
				 */

				currentComponent = "tFTPFileExist_2";

				/**
				 * [tFTPFileExist_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPFileExist_2_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_4 begin ] start
				 */

				ok_Hash.put("tFileDelete_4", false);
				start_Hash.put("tFileDelete_4", System.currentTimeMillis());

				currentComponent = "tFileDelete_4";

				int tos_count_tFileDelete_4 = 0;

				/**
				 * [tFileDelete_4 begin ] stop
				 */

				/**
				 * [tFileDelete_4 main ] start
				 */

				currentComponent = "tFileDelete_4";

				class DeleteFoldertFileDelete_4 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_4 = new java.io.File(
						context.etlinterfacefolder
								+ "/"
								+ context.getProperty("uosfailedfolder")
								+ "/"
								+ context
										.getProperty("timestampedfilename_error"));
				if (file_tFileDelete_4.exists() && file_tFileDelete_4.isFile()) {
					if (file_tFileDelete_4.delete()) {
						globalMap.put("tFileDelete_4_CURRENT_STATUS",
								"File deleted.");
					} else {
						globalMap.put("tFileDelete_4_CURRENT_STATUS",
								"No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_4_CURRENT_STATUS",
							"File does not exist or is invalid.");
				}
				globalMap
						.put("tFileDelete_4_DELETE_PATH",
								context.etlinterfacefolder
										+ "/"
										+ context
												.getProperty("uosfailedfolder")
										+ "/"
										+ context
												.getProperty("timestampedfilename_error"));

				tos_count_tFileDelete_4++;

				/**
				 * [tFileDelete_4 main ] stop
				 */

				/**
				 * [tFileDelete_4 end ] start
				 */

				currentComponent = "tFileDelete_4";

				ok_Hash.put("tFileDelete_4", true);
				end_Hash.put("tFileDelete_4", System.currentTimeMillis());

				/**
				 * [tFileDelete_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_4 finally ] start
				 */

				currentComponent = "tFileDelete_4";

				/**
				 * [tFileDelete_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_4_SUBPROCESS_STATE", 1);
	}

	public void tFileCopy_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileCopy_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileCopy_2 begin ] start
				 */

				ok_Hash.put("tFileCopy_2", false);
				start_Hash.put("tFileCopy_2", System.currentTimeMillis());

				currentComponent = "tFileCopy_2";

				int tos_count_tFileCopy_2 = 0;

				/**
				 * [tFileCopy_2 begin ] stop
				 */

				/**
				 * [tFileCopy_2 main ] start
				 */

				currentComponent = "tFileCopy_2";

				String srcFileName_tFileCopy_2 = context.etlinterfacefolder
						+ "/" + context.getProperty("uostmpfolder") + "/"
						+ globalMap.get("file_error_to_rename");

				java.io.File srcFile_tFileCopy_2 = new java.io.File(
						srcFileName_tFileCopy_2);

				// here need check first, before mkdirs().
				if (!srcFile_tFileCopy_2.exists()
						|| !srcFile_tFileCopy_2.isFile()) {
					throw new RuntimeException("The source File \""
							+ srcFileName_tFileCopy_2
							+ "\" does not exist or is not a file.");
				}

				String desDirName_tFileCopy_2 = context.etlinterfacefolder
						+ "/" + context.getProperty("uosfailedfolder");

				String desFileName_tFileCopy_2 = context
						.getProperty("timestampedfilename_error");

				if (desFileName_tFileCopy_2 != null
						&& ("").equals(desFileName_tFileCopy_2.trim())) {
					desFileName_tFileCopy_2 = "NewName.temp";
				}

				java.io.File desFile_tFileCopy_2 = new java.io.File(
						desDirName_tFileCopy_2, desFileName_tFileCopy_2);

				if (!srcFile_tFileCopy_2.getPath().equals(
						desFile_tFileCopy_2.getPath())) {
					java.io.File parentFile_tFileCopy_2 = desFile_tFileCopy_2
							.getParentFile();

					if (parentFile_tFileCopy_2 != null
							&& !parentFile_tFileCopy_2.exists()) {
						parentFile_tFileCopy_2.mkdirs();
					}
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_2.getPath(),
							desFile_tFileCopy_2.getPath(), true);
					java.io.File isRemoved_tFileCopy_2 = new java.io.File(
							context.etlinterfacefolder + "/"
									+ context.getProperty("uostmpfolder") + "/"
									+ globalMap.get("file_error_to_rename"));
					if (isRemoved_tFileCopy_2.exists()) {
						System.err
								.println("The source file could not be removed from the folder because it is open or you only have read-only rights.\n");
					}

				}
				globalMap.put("tFileCopy_2_DESTINATION_FILEPATH",
						desFile_tFileCopy_2.getPath());
				globalMap.put("tFileCopy_2_DESTINATION_FILENAME",
						desFile_tFileCopy_2.getName());

				globalMap.put("tFileCopy_2_SOURCE_DIRECTORY",
						srcFile_tFileCopy_2.getParent());
				globalMap.put("tFileCopy_2_DESTINATION_DIRECTORY",
						desFile_tFileCopy_2.getParent());

				tos_count_tFileCopy_2++;

				/**
				 * [tFileCopy_2 main ] stop
				 */

				/**
				 * [tFileCopy_2 end ] start
				 */

				currentComponent = "tFileCopy_2";

				ok_Hash.put("tFileCopy_2", true);
				end_Hash.put("tFileCopy_2", System.currentTimeMillis());

				tFileProperties_2Process(globalMap);

				/**
				 * [tFileCopy_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileCopy_2 finally ] start
				 */

				currentComponent = "tFileCopy_2";

				/**
				 * [tFileCopy_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileCopy_2_SUBPROCESS_STATE", 1);
	}

	public void tWarn_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_2 begin ] start
				 */

				ok_Hash.put("tWarn_2", false);
				start_Hash.put("tWarn_2", System.currentTimeMillis());

				currentComponent = "tWarn_2";

				int tos_count_tWarn_2 = 0;

				/**
				 * [tWarn_2 begin ] stop
				 */

				/**
				 * [tWarn_2 main ] start
				 */

				currentComponent = "tWarn_2";

				resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_2", "", Thread
						.currentThread().getId() + "", "INFO", "",
						"No orders generated for shipping/ready to collect",
						"", "");
				tLogCatcher_2
						.addMessage(
								"tWarn",
								"tWarn_2",
								3,
								"No orders generated for shipping/ready to collect",
								42);
				tLogCatcher_2Process(globalMap);
				talendLogs_LOGS
						.addMessage(
								"tWarn",
								"tWarn_2",
								3,
								"No orders generated for shipping/ready to collect",
								42);
				talendLogs_LOGSProcess(globalMap);
				globalMap.put("tWarn_2_WARN_MESSAGES",
						"No orders generated for shipping/ready to collect");
				globalMap.put("tWarn_2_WARN_PRIORITY", 3);
				globalMap.put("tWarn_2_WARN_CODE", 42);

				tos_count_tWarn_2++;

				/**
				 * [tWarn_2 main ] stop
				 */

				/**
				 * [tWarn_2 end ] start
				 */

				currentComponent = "tWarn_2";

				ok_Hash.put("tWarn_2", true);
				end_Hash.put("tWarn_2", System.currentTimeMillis());

				/**
				 * [tWarn_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_2 finally ] start
				 */

				currentComponent = "tWarn_2";

				/**
				 * [tWarn_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_2_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileExist_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_3 begin ] start
				 */

				ok_Hash.put("tFileExist_3", false);
				start_Hash.put("tFileExist_3", System.currentTimeMillis());

				currentComponent = "tFileExist_3";

				int tos_count_tFileExist_3 = 0;

				/**
				 * [tFileExist_3 begin ] stop
				 */

				/**
				 * [tFileExist_3 main ] start
				 */

				currentComponent = "tFileExist_3";

				java.io.File file_tFileExist_3 = new java.io.File(
						context.etlinterfacefolder + "/"
								+ context.getProperty("uostmpfolder")
								+ "/soapresponse_nonshipped.tmp");
				if (!file_tFileExist_3.exists()) {
					globalMap.put("tFileExist_3_EXISTS", false);
				} else {
					globalMap.put("tFileExist_3_EXISTS", true);
				}

				globalMap.put(
						"tFileExist_3_FILENAME",
						context.etlinterfacefolder + "/"
								+ context.getProperty("uostmpfolder")
								+ "/soapresponse_nonshipped.tmp");

				tos_count_tFileExist_3++;

				/**
				 * [tFileExist_3 main ] stop
				 */

				/**
				 * [tFileExist_3 end ] start
				 */

				currentComponent = "tFileExist_3";

				ok_Hash.put("tFileExist_3", true);
				end_Hash.put("tFileExist_3", System.currentTimeMillis());

				if (((Boolean) globalMap.get("tFileExist_3_EXISTS"))) {

					tFileProperties_4Process(globalMap);
				}

				if (!((Boolean) globalMap.get("tFileExist_3_EXISTS"))) {

					tWarn_3Process(globalMap);
				}

				/**
				 * [tFileExist_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_3 finally ] start
				 */

				currentComponent = "tFileExist_3";

				/**
				 * [tFileExist_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_3_SUBPROCESS_STATE", 1);
	}

	public static class row29Struct implements
			routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public String abs_path;

		public String getAbs_path() {
			return this.abs_path;
		}

		public String dirname;

		public String getDirname() {
			return this.dirname;
		}

		public String basename;

		public String getBasename() {
			return this.basename;
		}

		public String mode_string;

		public String getMode_string() {
			return this.mode_string;
		}

		public Long size;

		public Long getSize() {
			return this.size;
		}

		public Long mtime;

		public Long getMtime() {
			return this.mtime;
		}

		public String mtime_string;

		public String getMtime_string() {
			return this.mtime_string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.abs_path = readString(dis);

					this.dirname = readString(dis);

					this.basename = readString(dis);

					this.mode_string = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.size = null;
					} else {
						this.size = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mtime = null;
					} else {
						this.mtime = dis.readLong();
					}

					this.mtime_string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.abs_path, dos);

				// String

				writeString(this.dirname, dos);

				// String

				writeString(this.basename, dos);

				// String

				writeString(this.mode_string, dos);

				// Long

				if (this.size == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.size);
				}

				// Long

				if (this.mtime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.mtime);
				}

				// String

				writeString(this.mtime_string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("abs_path=" + abs_path);
			sb.append(",dirname=" + dirname);
			sb.append(",basename=" + basename);
			sb.append(",mode_string=" + mode_string);
			sb.append(",size=" + String.valueOf(size));
			sb.append(",mtime=" + String.valueOf(mtime));
			sb.append(",mtime_string=" + mtime_string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileProperties_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileProperties_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row29Struct row29 = new row29Struct();

				/**
				 * [tJavaRow_10 begin ] start
				 */

				ok_Hash.put("tJavaRow_10", false);
				start_Hash.put("tJavaRow_10", System.currentTimeMillis());

				currentComponent = "tJavaRow_10";

				int tos_count_tJavaRow_10 = 0;

				int nb_line_tJavaRow_10 = 0;

				/**
				 * [tJavaRow_10 begin ] stop
				 */

				/**
				 * [tFileProperties_4 begin ] start
				 */

				ok_Hash.put("tFileProperties_4", false);
				start_Hash.put("tFileProperties_4", System.currentTimeMillis());

				currentComponent = "tFileProperties_4";

				int tos_count_tFileProperties_4 = 0;

				java.io.File file_tFileProperties_4 = new java.io.File(
						context.etlinterfacefolder + "/"
								+ context.getProperty("uostmpfolder")
								+ "/soapresponse_nonshipped.tmp");
				row29 = new row29Struct();

				if (file_tFileProperties_4.exists()) {
					row29.abs_path = file_tFileProperties_4.getAbsolutePath();
					row29.dirname = file_tFileProperties_4.getParent();
					row29.basename = file_tFileProperties_4.getName();
					String r_tFileProperties_4 = (file_tFileProperties_4
							.canRead()) ? "r" : "-";
					String w_tFileProperties_4 = (file_tFileProperties_4
							.canWrite()) ? "w" : "-";
					// String x_ = (file_.canExecute())?"x":"-"; /*since
					// JDK1.6*/
					row29.mode_string = r_tFileProperties_4
							+ w_tFileProperties_4;
					row29.size = file_tFileProperties_4.length();
					row29.mtime = file_tFileProperties_4.lastModified();
					row29.mtime_string = (new java.util.Date(
							file_tFileProperties_4.lastModified())).toString();

				}

				/**
				 * [tFileProperties_4 begin ] stop
				 */

				/**
				 * [tFileProperties_4 main ] start
				 */

				currentComponent = "tFileProperties_4";

				tos_count_tFileProperties_4++;

				/**
				 * [tFileProperties_4 main ] stop
				 */

				/**
				 * [tJavaRow_10 main ] start
				 */

				currentComponent = "tJavaRow_10";

				globalMap.put("file_soapresponse_nonshipped", row29.size);

				((Logger) globalMap.get("LOGGER"))
						.debug("file_soapresponse_nonshipped size: "
								+ row29.size);

				nb_line_tJavaRow_10++;

				tos_count_tJavaRow_10++;

				/**
				 * [tJavaRow_10 main ] stop
				 */

				/**
				 * [tFileProperties_4 end ] start
				 */

				currentComponent = "tFileProperties_4";

				ok_Hash.put("tFileProperties_4", true);
				end_Hash.put("tFileProperties_4", System.currentTimeMillis());

				/**
				 * [tFileProperties_4 end ] stop
				 */

				/**
				 * [tJavaRow_10 end ] start
				 */

				currentComponent = "tJavaRow_10";

				globalMap.put("tJavaRow_10_NB_LINE", nb_line_tJavaRow_10);

				ok_Hash.put("tJavaRow_10", true);
				end_Hash.put("tJavaRow_10", System.currentTimeMillis());

				if ((Long) globalMap.get("file_soapresponse_nonshipped") > 0) {

					tXSLT_3Process(globalMap);
				}

				if ((Long) globalMap.get("file_soapresponse_nonshipped") > 0) {

					tXSLT_4Process(globalMap);
				}

				/**
				 * [tJavaRow_10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileProperties_4 finally ] start
				 */

				currentComponent = "tFileProperties_4";

				/**
				 * [tFileProperties_4 finally ] stop
				 */

				/**
				 * [tJavaRow_10 finally ] start
				 */

				currentComponent = "tJavaRow_10";

				/**
				 * [tJavaRow_10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileProperties_4_SUBPROCESS_STATE", 1);
	}

	public void tXSLT_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tXSLT_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tXSLT_3 begin ] start
				 */

				ok_Hash.put("tXSLT_3", false);
				start_Hash.put("tXSLT_3", System.currentTimeMillis());

				currentComponent = "tXSLT_3";

				int tos_count_tXSLT_3 = 0;

				/**
				 * [tXSLT_3 begin ] stop
				 */

				/**
				 * [tXSLT_3 main ] start
				 */

				currentComponent = "tXSLT_3";

				System.setProperty("javax.xml.transform.TransformerFactory",
						"net.sf.saxon.TransformerFactoryImpl");

				java.io.File xsltFiletXSLT_3 = new java.io.File(context.etlroot
						+ "/xsl/updateorderstatus/errors.xsl");
				javax.xml.transform.stream.StreamSource styleSourcetXSLT_3 = new javax.xml.transform.stream.StreamSource(
						xsltFiletXSLT_3);
				javax.xml.transform.Transformer ttXSLT_3 = javax.xml.transform.TransformerFactory
						.newInstance().newTransformer(styleSourcetXSLT_3);

				javax.xml.transform.stream.StreamSource xmlSourcetXSLT_3 = new javax.xml.transform.stream.StreamSource(
						new java.io.File(context.etlinterfacefolder + "/"
								+ context.getProperty("uostmpfolder")
								+ "/soapresponse_nonshipped.tmp"));
				ttXSLT_3.transform(
						xmlSourcetXSLT_3,
						new javax.xml.transform.stream.StreamResult(
								new java.io.File(context.etlinterfacefolder
										+ "/"
										+ context.getProperty("uostmpfolder")
										+ "/errors_orders_nonshipped.csv")));

				if ((context.etlinterfacefolder + "/"
						+ context.getProperty("uostmpfolder") + "/errors_orders_nonshipped.csv")
							.indexOf("/") != -1) {
					globalMap
							.put("tXSLT_3_OUTPUT_FILEPATH",
									(context.etlinterfacefolder
											+ "/"
											+ context
													.getProperty("uostmpfolder") + "/errors_orders_nonshipped.csv")
											.substring(
													0,
													(context.etlinterfacefolder
															+ "/"
															+ context
																	.getProperty("uostmpfolder") + "/errors_orders_nonshipped.csv")
															.lastIndexOf("/")));
					globalMap
							.put("tXSLT_3_OUTPUT_FILENAME",
									(context.etlinterfacefolder
											+ "/"
											+ context
													.getProperty("uostmpfolder") + "/errors_orders_nonshipped.csv").substring((context.etlinterfacefolder
											+ "/"
											+ context
													.getProperty("uostmpfolder") + "/errors_orders_nonshipped.csv")
											.lastIndexOf("/") + 1));
				} else {
					globalMap.put(
							"tXSLT_3_OUTPUT_FILEPATH",
							context.etlinterfacefolder + "/"
									+ context.getProperty("uostmpfolder")
									+ "/errors_orders_nonshipped.csv");
					globalMap.put(
							"tXSLT_3_OUTPUT_FILENAME",
							context.etlinterfacefolder + "/"
									+ context.getProperty("uostmpfolder")
									+ "/errors_orders_nonshipped.csv");
				}

				tos_count_tXSLT_3++;

				/**
				 * [tXSLT_3 main ] stop
				 */

				/**
				 * [tXSLT_3 end ] start
				 */

				currentComponent = "tXSLT_3";

				ok_Hash.put("tXSLT_3", true);
				end_Hash.put("tXSLT_3", System.currentTimeMillis());

				/**
				 * [tXSLT_3 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tXSLT_3:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileExist_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tXSLT_3 finally ] start
				 */

				currentComponent = "tXSLT_3";

				/**
				 * [tXSLT_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tXSLT_3_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileExist_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_7 begin ] start
				 */

				ok_Hash.put("tFileExist_7", false);
				start_Hash.put("tFileExist_7", System.currentTimeMillis());

				currentComponent = "tFileExist_7";

				int tos_count_tFileExist_7 = 0;

				/**
				 * [tFileExist_7 begin ] stop
				 */

				/**
				 * [tFileExist_7 main ] start
				 */

				currentComponent = "tFileExist_7";

				java.io.File file_tFileExist_7 = new java.io.File(
						context.etlinterfacefolder + "/"
								+ context.getProperty("uostmpfolder")
								+ "/errors_orders_nonshipped.csv");
				if (!file_tFileExist_7.exists()) {
					globalMap.put("tFileExist_7_EXISTS", false);
				} else {
					globalMap.put("tFileExist_7_EXISTS", true);
				}

				globalMap.put(
						"tFileExist_7_FILENAME",
						context.etlinterfacefolder + "/"
								+ context.getProperty("uostmpfolder")
								+ "/errors_orders_nonshipped.csv");

				tos_count_tFileExist_7++;

				/**
				 * [tFileExist_7 main ] stop
				 */

				/**
				 * [tFileExist_7 end ] start
				 */

				currentComponent = "tFileExist_7";

				ok_Hash.put("tFileExist_7", true);
				end_Hash.put("tFileExist_7", System.currentTimeMillis());

				tJava_6Process(globalMap);

				/**
				 * [tFileExist_7 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_7 finally ] start
				 */

				currentComponent = "tFileExist_7";

				/**
				 * [tFileExist_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_7_SUBPROCESS_STATE", 1);
	}

	public void tXSLT_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tXSLT_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tXSLT_4 begin ] start
				 */

				ok_Hash.put("tXSLT_4", false);
				start_Hash.put("tXSLT_4", System.currentTimeMillis());

				currentComponent = "tXSLT_4";

				int tos_count_tXSLT_4 = 0;

				/**
				 * [tXSLT_4 begin ] stop
				 */

				/**
				 * [tXSLT_4 main ] start
				 */

				currentComponent = "tXSLT_4";

				System.setProperty("javax.xml.transform.TransformerFactory",
						"net.sf.saxon.TransformerFactoryImpl");

				java.io.File xsltFiletXSLT_4 = new java.io.File(context.etlroot
						+ "/xsl/updateorderstatus/success.xsl");
				javax.xml.transform.stream.StreamSource styleSourcetXSLT_4 = new javax.xml.transform.stream.StreamSource(
						xsltFiletXSLT_4);
				javax.xml.transform.Transformer ttXSLT_4 = javax.xml.transform.TransformerFactory
						.newInstance().newTransformer(styleSourcetXSLT_4);

				javax.xml.transform.stream.StreamSource xmlSourcetXSLT_4 = new javax.xml.transform.stream.StreamSource(
						new java.io.File(context.etlinterfacefolder + "/"
								+ context.getProperty("uostmpfolder")
								+ "/soapresponse_nonshipped.tmp"));
				ttXSLT_4.transform(
						xmlSourcetXSLT_4,
						new javax.xml.transform.stream.StreamResult(
								new java.io.File(context.etlinterfacefolder
										+ "/"
										+ context.getProperty("uostmpfolder")
										+ "/success_orders_nonshipped.csv")));

				if ((context.etlinterfacefolder + "/"
						+ context.getProperty("uostmpfolder") + "/success_orders_nonshipped.csv")
							.indexOf("/") != -1) {
					globalMap
							.put("tXSLT_4_OUTPUT_FILEPATH",
									(context.etlinterfacefolder
											+ "/"
											+ context
													.getProperty("uostmpfolder") + "/success_orders_nonshipped.csv")
											.substring(
													0,
													(context.etlinterfacefolder
															+ "/"
															+ context
																	.getProperty("uostmpfolder") + "/success_orders_nonshipped.csv")
															.lastIndexOf("/")));
					globalMap
							.put("tXSLT_4_OUTPUT_FILENAME",
									(context.etlinterfacefolder
											+ "/"
											+ context
													.getProperty("uostmpfolder") + "/success_orders_nonshipped.csv").substring((context.etlinterfacefolder
											+ "/"
											+ context
													.getProperty("uostmpfolder") + "/success_orders_nonshipped.csv")
											.lastIndexOf("/") + 1));
				} else {
					globalMap.put(
							"tXSLT_4_OUTPUT_FILEPATH",
							context.etlinterfacefolder + "/"
									+ context.getProperty("uostmpfolder")
									+ "/success_orders_nonshipped.csv");
					globalMap.put(
							"tXSLT_4_OUTPUT_FILENAME",
							context.etlinterfacefolder + "/"
									+ context.getProperty("uostmpfolder")
									+ "/success_orders_nonshipped.csv");
				}

				tos_count_tXSLT_4++;

				/**
				 * [tXSLT_4 main ] stop
				 */

				/**
				 * [tXSLT_4 end ] start
				 */

				currentComponent = "tXSLT_4";

				ok_Hash.put("tXSLT_4", true);
				end_Hash.put("tXSLT_4", System.currentTimeMillis());

				/**
				 * [tXSLT_4 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tXSLT_4:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileExist_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tXSLT_4 finally ] start
				 */

				currentComponent = "tXSLT_4";

				/**
				 * [tXSLT_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tXSLT_4_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileExist_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_5 begin ] start
				 */

				ok_Hash.put("tFileExist_5", false);
				start_Hash.put("tFileExist_5", System.currentTimeMillis());

				currentComponent = "tFileExist_5";

				int tos_count_tFileExist_5 = 0;

				/**
				 * [tFileExist_5 begin ] stop
				 */

				/**
				 * [tFileExist_5 main ] start
				 */

				currentComponent = "tFileExist_5";

				java.io.File file_tFileExist_5 = new java.io.File(
						context.etlinterfacefolder + "/"
								+ context.getProperty("uostmpfolder")
								+ "/success_orders_nonshipped.csv");
				if (!file_tFileExist_5.exists()) {
					globalMap.put("tFileExist_5_EXISTS", false);
				} else {
					globalMap.put("tFileExist_5_EXISTS", true);
				}

				globalMap.put(
						"tFileExist_5_FILENAME",
						context.etlinterfacefolder + "/"
								+ context.getProperty("uostmpfolder")
								+ "/success_orders_nonshipped.csv");

				tos_count_tFileExist_5++;

				/**
				 * [tFileExist_5 main ] stop
				 */

				/**
				 * [tFileExist_5 end ] start
				 */

				currentComponent = "tFileExist_5";

				ok_Hash.put("tFileExist_5", true);
				end_Hash.put("tFileExist_5", System.currentTimeMillis());

				tJava_2Process(globalMap);

				/**
				 * [tFileExist_5 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_5 finally ] start
				 */

				currentComponent = "tFileExist_5";

				/**
				 * [tFileExist_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_5_SUBPROCESS_STATE", 1);
	}

	public void tWarn_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_3 begin ] start
				 */

				ok_Hash.put("tWarn_3", false);
				start_Hash.put("tWarn_3", System.currentTimeMillis());

				currentComponent = "tWarn_3";

				int tos_count_tWarn_3 = 0;

				/**
				 * [tWarn_3 begin ] stop
				 */

				/**
				 * [tWarn_3 main ] start
				 */

				currentComponent = "tWarn_3";

				resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_3", "", Thread
						.currentThread().getId() + "", "INFO", "",
						"No orders imported for status change", "", "");
				tLogCatcher_2.addMessage("tWarn", "tWarn_3", 3,
						"No orders imported for status change", 42);
				tLogCatcher_2Process(globalMap);
				talendLogs_LOGS.addMessage("tWarn", "tWarn_3", 3,
						"No orders imported for status change", 42);
				talendLogs_LOGSProcess(globalMap);
				globalMap.put("tWarn_3_WARN_MESSAGES",
						"No orders imported for status change");
				globalMap.put("tWarn_3_WARN_PRIORITY", 3);
				globalMap.put("tWarn_3_WARN_CODE", 42);

				tos_count_tWarn_3++;

				/**
				 * [tWarn_3 main ] stop
				 */

				/**
				 * [tWarn_3 end ] start
				 */

				currentComponent = "tWarn_3";

				ok_Hash.put("tWarn_3", true);
				end_Hash.put("tWarn_3", System.currentTimeMillis());

				/**
				 * [tWarn_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_3 finally ] start
				 */

				currentComponent = "tWarn_3";

				/**
				 * [tWarn_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_3_SUBPROCESS_STATE", 1);
	}

	public void tDie_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_6 begin ] start
				 */

				ok_Hash.put("tDie_6", false);
				start_Hash.put("tDie_6", System.currentTimeMillis());

				currentComponent = "tDie_6";

				int tos_count_tDie_6 = 0;

				/**
				 * [tDie_6 begin ] stop
				 */

				/**
				 * [tDie_6 main ] start
				 */

				currentComponent = "tDie_6";

				tLogCatcher_1.addMessage(
						"tDie",
						"tDie_6",
						5,
						"can't connect to ftp "
								+ context.getProperty("sftphost"), 6);
				tLogCatcher_1Process(globalMap);

				talendLogs_LOGS.addMessage(
						"tDie",
						"tDie_6",
						5,
						"can't connect to ftp "
								+ context.getProperty("sftphost"), 6);
				talendLogs_LOGSProcess(globalMap);

				globalMap.put("tDie_6_DIE_PRIORITY", 5);
				System.err.println("can't connect to ftp "
						+ context.getProperty("sftphost"));

				globalMap.put("tDie_6_DIE_MESSAGE", "can't connect to ftp "
						+ context.getProperty("sftphost"));
				globalMap.put("tDie_6_DIE_MESSAGES", "can't connect to ftp "
						+ context.getProperty("sftphost"));
				currentComponent = "tDie_6";
				status = "failure";
				errorCode = new Integer(6);
				globalMap.put("tDie_6_DIE_CODE", errorCode);

				System.exit(6);

				tos_count_tDie_6++;

				/**
				 * [tDie_6 main ] stop
				 */

				/**
				 * [tDie_6 end ] start
				 */

				currentComponent = "tDie_6";

				ok_Hash.put("tDie_6", true);
				end_Hash.put("tDie_6", System.currentTimeMillis());

				/**
				 * [tDie_6 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_6 finally ] start
				 */

				currentComponent = "tDie_6";

				/**
				 * [tDie_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_6_SUBPROCESS_STATE", 1);
	}

	public static class row18Struct implements
			routines.system.IPersistableComparableLookupRow<row18Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String orderID;

		public String getOrderID() {
			return this.orderID;
		}

		public String orderStatus;

		public String getOrderStatus() {
			return this.orderStatus;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orderID == null) ? 0 : this.orderID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row18Struct other = (row18Struct) obj;

			if (this.orderID == null) {
				if (other.orderID != null)
					return false;

			} else if (!this.orderID.equals(other.orderID))

				return false;

			return true;
		}

		public void copyDataTo(row18Struct other) {

			other.orderID = this.orderID;
			other.orderStatus = this.orderStatus;

		}

		public void copyKeysDataTo(row18Struct other) {

			other.orderID = this.orderID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.orderID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.orderID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orderStatus = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.orderStatus, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orderID=" + orderID);
			sb.append(",orderStatus=" + orderStatus);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orderID, other.orderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();

				/**
				 * [tHash_row18 begin ] start
				 */

				ok_Hash.put("tHash_row18", false);
				start_Hash.put("tHash_row18", System.currentTimeMillis());

				currentComponent = "tHash_row18";

				int tos_count_tHash_row18 = 0;

				java.util.Map<row18Struct, row18Struct> tHash_row18 = new java.util.LinkedHashMap<row18Struct, row18Struct>();
				globalMap.put("tHash_row18", tHash_row18);

				/**
				 * [tHash_row18 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				try {

					Object filename_tFileInputDelimited_3 = context.etlinterfacefolder
							+ "/"
							+ context.getProperty("uosfolder")
							+ "/"
							+ context.getProperty("uosfile");
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0
								|| random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								context.etlinterfacefolder + "/"
										+ context.getProperty("uosfolder")
										+ "/" + context.getProperty("uosfile"),
								"UTF-8", "|", "\n", true, 0, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null
							&& fid_tFileInputDelimited_3.nextRecord()) {

						row18 = null;

						row18 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row18 = new row18Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							columnIndexWithD_tFileInputDelimited_3 = 0;

							row18.orderID = fid_tFileInputDelimited_3.get(
									columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 1;

							row18.orderStatus = fid_tFileInputDelimited_3.get(
									columnIndexWithD_tFileInputDelimited_3)
									.trim();

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row18 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row18"
						if (row18 != null) {

							/**
							 * [tHash_row18 main ] start
							 */

							currentComponent = "tHash_row18";

							row18Struct row18_HashRow = new row18Struct();

							row18_HashRow.orderID = row18.orderID;
							row18_HashRow.orderStatus = row18.orderStatus;
							tHash_row18.put(row18_HashRow, row18_HashRow);

							tos_count_tHash_row18++;

							/**
							 * [tHash_row18 main ] stop
							 */

						} // End of branch "row18"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) (context.etlinterfacefolder + "/"
							+ context.getProperty("uosfolder") + "/" + context
								.getProperty("uosfile")) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tHash_row18 end ] start
				 */

				currentComponent = "tHash_row18";

				ok_Hash.put("tHash_row18", true);
				end_Hash.put("tHash_row18", System.currentTimeMillis());

				/**
				 * [tHash_row18 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tHash_row18 finally ] start
				 */

				currentComponent = "tHash_row18";

				/**
				 * [tHash_row18 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				tJava_5Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());

				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				System.setProperty("log4jjobpackagename", getClass()
						.getPackage().getName());
				System.setProperty("logfilename",
						context.getProperty("etlroot")
								+ "/logs/updateorderstatus.log");

				String osname = System.getProperty("os.name").toUpperCase();

				if (osname.contains("WIN")) {

					context.setProperty("iswindows", "true");

					if (context
							.getProperty("updateorderstatus.propertyfilename") == null)
						context.setProperty(
								"updateorderstatus.propertyfilename",
								"updateorderstatus.windows.properties");

					DOMConfigurator.configure(context
							.getProperty("propertiesfolder")
							+ "/"
							+ "log4j-windows.xml");
				} else {

					context.setProperty("iswindows", "false");

					if (context
							.getProperty("updateorderstatus.propertyfilename") == null)
						context.setProperty(
								"updateorderstatus.propertyfilename",
								"updateorderstatus.properties");

					DOMConfigurator.configure(context
							.getProperty("propertiesfolder")
							+ "/"
							+ "log4j.xml");

				}

				globalMap.put("LOGGER", Logger.getLogger(getClass()));

				((Logger) globalMap.get("LOGGER"))
						.debug("######################################################");

				((Logger) globalMap.get("LOGGER"))
						.debug("Loading properties file : "
								+ context
										.getProperty("updateorderstatus.propertyfilename"));

				/**
				 * [tJava_5 begin ] stop
				 */

				/**
				 * [tJava_5 main ] start
				 */

				currentComponent = "tJava_5";

				tos_count_tJava_5++;

				/**
				 * [tJava_5 main ] stop
				 */

				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				/**
				 * [tJava_5 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_5:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputProperties_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_5 finally ] start
				 */

				currentComponent = "tJava_5";

				/**
				 * [tJava_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputProperties_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				/**
				 * [tContextLoad_1 begin ] start
				 */

				ok_Hash.put("tContextLoad_1", false);
				start_Hash.put("tContextLoad_1", System.currentTimeMillis());

				currentComponent = "tContextLoad_1";

				int tos_count_tContextLoad_1 = 0;

				java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_1 = 0;

				/**
				 * [tContextLoad_1 begin ] stop
				 */

				/**
				 * [tFileInputProperties_1 begin ] start
				 */

				ok_Hash.put("tFileInputProperties_1", false);
				start_Hash.put("tFileInputProperties_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputProperties_1";

				int tos_count_tFileInputProperties_1 = 0;

				java.io.File file_tFileInputProperties_1 = new java.io.File(
						context.propertiesfolder
								+ "/updateorderstatus/"
								+ context
										.getProperty("updateorderstatus.propertyfilename"));
				int nb_line_tFileInputProperties_1 = 0;
				java.util.Properties properties_tFileInputProperties_1 = new java.util.Properties();
				java.io.FileInputStream fis_tFileInputProperties_1 = new java.io.FileInputStream(
						file_tFileInputProperties_1);
				try {
					properties_tFileInputProperties_1
							.load(fis_tFileInputProperties_1);
					java.util.Enumeration enumeration_tFileInputProperties_1 = properties_tFileInputProperties_1
							.propertyNames();
					while (enumeration_tFileInputProperties_1.hasMoreElements()) {
						nb_line_tFileInputProperties_1++;
						row10.key = (String) enumeration_tFileInputProperties_1
								.nextElement();
						row10.value = (String) properties_tFileInputProperties_1
								.getProperty(row10.key);

						/**
						 * [tFileInputProperties_1 begin ] stop
						 */

						/**
						 * [tFileInputProperties_1 main ] start
						 */

						currentComponent = "tFileInputProperties_1";

						tos_count_tFileInputProperties_1++;

						/**
						 * [tFileInputProperties_1 main ] stop
						 */

						/**
						 * [tContextLoad_1 main ] start
						 */

						currentComponent = "tContextLoad_1";

						// ////////////////////////
						String tmp_key_tContextLoad_1 = null;
						String key_tContextLoad_1 = null;
						if (row10.key != null) {
							tmp_key_tContextLoad_1 = row10.key.trim();
							if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1
									.startsWith("!"))) {
								tmp_key_tContextLoad_1 = null;
							} else {
								row10.key = tmp_key_tContextLoad_1;
							}
						}
						if (row10.key != null) {
							key_tContextLoad_1 = row10.key;
						}
						String value_tContextLoad_1 = null;
						if (row10.value != null) {
							value_tContextLoad_1 = row10.value;
						}

						if (tmp_key_tContextLoad_1 != null) {
							try {
								if (key_tContextLoad_1 != null
										&& "etlinterfacefolder"
												.equals(key_tContextLoad_1)) {
									context.etlinterfacefolder = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "etlroot".equals(key_tContextLoad_1)) {
									context.etlroot = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "mediationfolder"
												.equals(key_tContextLoad_1)) {
									context.mediationfolder = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "propertiesfolder"
												.equals(key_tContextLoad_1)) {
									context.propertiesfolder = value_tContextLoad_1;
								}

								if (context.getProperty(key_tContextLoad_1) != null) {
									assignList_tContextLoad_1
											.add(key_tContextLoad_1);
								} else {
									newPropertyList_tContextLoad_1
											.add(key_tContextLoad_1);
								}
								if (value_tContextLoad_1 == null) {
									context.setProperty(key_tContextLoad_1, "");
								} else {
									context.setProperty(key_tContextLoad_1,
											value_tContextLoad_1);
								}
							} catch (java.lang.Exception e) {
								System.err
										.println("Setting a value for the key \""
												+ key_tContextLoad_1
												+ "\" has failed. Error message: "
												+ e.getMessage());
							}
							nb_line_tContextLoad_1++;
						}
						// ////////////////////////

						tos_count_tContextLoad_1++;

						/**
						 * [tContextLoad_1 main ] stop
						 */

						/**
						 * [tFileInputProperties_1 end ] start
						 */

						currentComponent = "tFileInputProperties_1";

					}
				} finally {
					if (fis_tFileInputProperties_1 != null) {
						fis_tFileInputProperties_1.close();
					}
				}
				globalMap.put("tFileInputProperties_1_NB_LINE",
						nb_line_tFileInputProperties_1);

				ok_Hash.put("tFileInputProperties_1", true);
				end_Hash.put("tFileInputProperties_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputProperties_1 end ] stop
				 */

				/**
				 * [tContextLoad_1 end ] start
				 */

				currentComponent = "tContextLoad_1";

				java.util.Enumeration<?> enu_tContextLoad_1 = context
						.propertyNames();
				while (enu_tContextLoad_1.hasMoreElements()) {
					String key_tContextLoad_1 = (String) enu_tContextLoad_1
							.nextElement();
					if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
							&& !newPropertyList_tContextLoad_1
									.contains(key_tContextLoad_1)) {
						noAssignList_tContextLoad_1.add(key_tContextLoad_1);
					}
				}

				String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1
						.toString();
				String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1
						.substring(1,
								newPropertyStr_tContextLoad_1.length() - 1);

				String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1
						.toString();
				String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1
						.substring(1, noAssignStr_tContextLoad_1.length() - 1);

				globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT",
						newProperty_tContextLoad_1);
				globalMap.put("tContextLoad_1_KEY_NOT_LOADED",
						noAssign_tContextLoad_1);

				globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

				List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();

				resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread
						.currentThread().getId() + "", "", "", "", "",
						resumeUtil.convertToJsonText(context,
								parametersToEncrypt_tContextLoad_1));

				ok_Hash.put("tContextLoad_1", true);
				end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				tFileExist_1Process(globalMap);

				/**
				 * [tContextLoad_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputProperties_1 finally ] start
				 */

				currentComponent = "tFileInputProperties_1";

				/**
				 * [tFileInputProperties_1 finally ] stop
				 */

				/**
				 * [tContextLoad_1 finally ] start
				 */

				currentComponent = "tContextLoad_1";

				/**
				 * [tContextLoad_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_1 begin ] start
				 */

				ok_Hash.put("tFileExist_1", false);
				start_Hash.put("tFileExist_1", System.currentTimeMillis());

				currentComponent = "tFileExist_1";

				int tos_count_tFileExist_1 = 0;

				/**
				 * [tFileExist_1 begin ] stop
				 */

				/**
				 * [tFileExist_1 main ] start
				 */

				currentComponent = "tFileExist_1";

				java.io.File file_tFileExist_1 = new java.io.File(
						context.etlinterfacefolder + "/"
								+ context.getProperty("uosfolder")
								+ "/job.updateorderstatus.lock");
				if (!file_tFileExist_1.exists()) {
					globalMap.put("tFileExist_1_EXISTS", false);
				} else {
					globalMap.put("tFileExist_1_EXISTS", true);
				}

				globalMap.put(
						"tFileExist_1_FILENAME",
						context.etlinterfacefolder + "/"
								+ context.getProperty("uosfolder")
								+ "/job.updateorderstatus.lock");

				tos_count_tFileExist_1++;

				/**
				 * [tFileExist_1 main ] stop
				 */

				/**
				 * [tFileExist_1 end ] start
				 */

				currentComponent = "tFileExist_1";

				ok_Hash.put("tFileExist_1", true);
				end_Hash.put("tFileExist_1", System.currentTimeMillis());

				if (!((Boolean) globalMap.get("tFileExist_1_EXISTS"))) {

					tFileTouch_1Process(globalMap);
				}

				if (((Boolean) globalMap.get("tFileExist_1_EXISTS"))) {

					tDie_2Process(globalMap);
				}

				/**
				 * [tFileExist_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_1 finally ] start
				 */

				currentComponent = "tFileExist_1";

				/**
				 * [tFileExist_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 1);
	}

	public void tFileTouch_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileTouch_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileTouch_1 begin ] start
				 */

				ok_Hash.put("tFileTouch_1", false);
				start_Hash.put("tFileTouch_1", System.currentTimeMillis());

				currentComponent = "tFileTouch_1";

				int tos_count_tFileTouch_1 = 0;

				/**
				 * [tFileTouch_1 begin ] stop
				 */

				/**
				 * [tFileTouch_1 main ] start
				 */

				currentComponent = "tFileTouch_1";

				java.io.File file_tFileTouch_1 = new java.io.File(
						(context.etlinterfacefolder + "/"
								+ context.getProperty("uosfolder") + "/job.updateorderstatus.lock"));

				// create new file
				boolean resulttFileTouch_1 = file_tFileTouch_1.createNewFile();
				// if file already exists, modify the last-modified-time of the
				// file
				if (!resulttFileTouch_1) {
					file_tFileTouch_1.setLastModified((new Date()).getTime());
				}

				tos_count_tFileTouch_1++;

				/**
				 * [tFileTouch_1 main ] stop
				 */

				/**
				 * [tFileTouch_1 end ] start
				 */

				currentComponent = "tFileTouch_1";

				ok_Hash.put("tFileTouch_1", true);
				end_Hash.put("tFileTouch_1", System.currentTimeMillis());

				/**
				 * [tFileTouch_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileTouch_1 finally ] start
				 */

				currentComponent = "tFileTouch_1";

				/**
				 * [tFileTouch_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileTouch_1_SUBPROCESS_STATE", 1);
	}

	public void tDie_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_5 begin ] start
				 */

				ok_Hash.put("tDie_5", false);
				start_Hash.put("tDie_5", System.currentTimeMillis());

				currentComponent = "tDie_5";

				int tos_count_tDie_5 = 0;

				/**
				 * [tDie_5 begin ] stop
				 */

				/**
				 * [tDie_5 main ] start
				 */

				currentComponent = "tDie_5";

				tLogCatcher_1.addMessage("tDie", "tDie_5", 5,
						"Cannot create lock file.... exiting", 4);
				tLogCatcher_1Process(globalMap);

				talendLogs_LOGS.addMessage("tDie", "tDie_5", 5,
						"Cannot create lock file.... exiting", 4);
				talendLogs_LOGSProcess(globalMap);

				globalMap.put("tDie_5_DIE_PRIORITY", 5);
				System.err.println("Cannot create lock file.... exiting");

				globalMap.put("tDie_5_DIE_MESSAGE",
						"Cannot create lock file.... exiting");
				globalMap.put("tDie_5_DIE_MESSAGES",
						"Cannot create lock file.... exiting");
				currentComponent = "tDie_5";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_5_DIE_CODE", errorCode);

				System.exit(4);

				tos_count_tDie_5++;

				/**
				 * [tDie_5 main ] stop
				 */

				/**
				 * [tDie_5 end ] start
				 */

				currentComponent = "tDie_5";

				ok_Hash.put("tDie_5", true);
				end_Hash.put("tDie_5", System.currentTimeMillis());

				/**
				 * [tDie_5 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_5 finally ] start
				 */

				currentComponent = "tDie_5";

				/**
				 * [tDie_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_5_SUBPROCESS_STATE", 1);
	}

	public void tDie_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_2 begin ] start
				 */

				ok_Hash.put("tDie_2", false);
				start_Hash.put("tDie_2", System.currentTimeMillis());

				currentComponent = "tDie_2";

				int tos_count_tDie_2 = 0;

				/**
				 * [tDie_2 begin ] stop
				 */

				/**
				 * [tDie_2 main ] start
				 */

				currentComponent = "tDie_2";

				tLogCatcher_1.addMessage("tDie", "tDie_2", 5,
						"Another Job is running... exiting", 4);
				tLogCatcher_1Process(globalMap);

				talendLogs_LOGS.addMessage("tDie", "tDie_2", 5,
						"Another Job is running... exiting", 4);
				talendLogs_LOGSProcess(globalMap);

				globalMap.put("tDie_2_DIE_PRIORITY", 5);
				System.err.println("Another Job is running... exiting");

				globalMap.put("tDie_2_DIE_MESSAGE",
						"Another Job is running... exiting");
				globalMap.put("tDie_2_DIE_MESSAGES",
						"Another Job is running... exiting");
				currentComponent = "tDie_2";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_2_DIE_CODE", errorCode);

				System.exit(4);

				tos_count_tDie_2++;

				/**
				 * [tDie_2 main ] stop
				 */

				/**
				 * [tDie_2 end ] start
				 */

				currentComponent = "tDie_2";

				ok_Hash.put("tDie_2", true);
				end_Hash.put("tDie_2", System.currentTimeMillis());

				/**
				 * [tDie_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_2 finally ] start
				 */

				currentComponent = "tDie_2";

				/**
				 * [tDie_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}

	public void tDie_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_3 begin ] start
				 */

				ok_Hash.put("tDie_3", false);
				start_Hash.put("tDie_3", System.currentTimeMillis());

				currentComponent = "tDie_3";

				int tos_count_tDie_3 = 0;

				/**
				 * [tDie_3 begin ] stop
				 */

				/**
				 * [tDie_3 main ] start
				 */

				currentComponent = "tDie_3";

				tLogCatcher_1.addMessage("tDie", "tDie_3", 5,
						"Cannot find property file.... exiting", 4);
				tLogCatcher_1Process(globalMap);

				talendLogs_LOGS.addMessage("tDie", "tDie_3", 5,
						"Cannot find property file.... exiting", 4);
				talendLogs_LOGSProcess(globalMap);

				globalMap.put("tDie_3_DIE_PRIORITY", 5);
				System.err.println("Cannot find property file.... exiting");

				globalMap.put("tDie_3_DIE_MESSAGE",
						"Cannot find property file.... exiting");
				globalMap.put("tDie_3_DIE_MESSAGES",
						"Cannot find property file.... exiting");
				currentComponent = "tDie_3";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_3_DIE_CODE", errorCode);

				System.exit(4);

				tos_count_tDie_3++;

				/**
				 * [tDie_3 main ] stop
				 */

				/**
				 * [tDie_3 end ] start
				 */

				currentComponent = "tDie_3";

				ok_Hash.put("tDie_3", true);
				end_Hash.put("tDie_3", System.currentTimeMillis());

				/**
				 * [tDie_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_3 finally ] start
				 */

				currentComponent = "tDie_3";

				/**
				 * [tDie_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_3_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				tFileDelete_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_1 begin ] start
				 */

				ok_Hash.put("tFileDelete_1", false);
				start_Hash.put("tFileDelete_1", System.currentTimeMillis());

				currentComponent = "tFileDelete_1";

				int tos_count_tFileDelete_1 = 0;

				/**
				 * [tFileDelete_1 begin ] stop
				 */

				/**
				 * [tFileDelete_1 main ] start
				 */

				currentComponent = "tFileDelete_1";

				class DeleteFoldertFileDelete_1 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_1 = new java.io.File(
						context.etlinterfacefolder + "/"
								+ context.getProperty("uosfolder")
								+ "/job.updateorderstatus.lock");
				if (file_tFileDelete_1.exists() && file_tFileDelete_1.isFile()) {
					if (file_tFileDelete_1.delete()) {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"File deleted.");
					} else {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_1_CURRENT_STATUS",
							"File does not exist or is invalid.");
				}
				globalMap.put(
						"tFileDelete_1_DELETE_PATH",
						context.etlinterfacefolder + "/"
								+ context.getProperty("uosfolder")
								+ "/job.updateorderstatus.lock");

				tos_count_tFileDelete_1++;

				/**
				 * [tFileDelete_1 main ] stop
				 */

				/**
				 * [tFileDelete_1 end ] start
				 */

				currentComponent = "tFileDelete_1";

				ok_Hash.put("tFileDelete_1", true);
				end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				tJava_3Process(globalMap);
				tFileDelete_3Process(globalMap);

				/**
				 * [tFileDelete_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileDelete_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_1 finally ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				if (globalMap.get("ftpfailed") != null
						&& globalMap.get("ftpfailed").equals("true")) {
					((Logger) globalMap.get("LOGGER"))
							.warn("Failed to transfer file "
									+ context
											.getProperty("timestampedfilename")
									+ " to ftp server .. file will be moved to "
									+ context.getProperty("etlinterfacefolder")
									+ "/"
									+ context.getProperty("uosfailedfolder"));

				} else if (globalMap.get("warnings") != null
						&& (Boolean) globalMap.get("warnings")) {

					((Logger) globalMap.get("LOGGER"))
							.warn("Job completed with warnings... ");
					((Logger) globalMap.get("LOGGER")).warn(globalMap.get(
							"warnings").toString());

				} else {

					((Logger) globalMap.get("LOGGER"))
							.info("Job completed successfully...");

				}

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				context.setProperty(
						"timestampedfilename_archive",
						context.getProperty("uosfile")
								+ '.'
								+ TalendDate.formatDate("yyyyMMddHHmmss",
										TalendDate.getCurrentDate()) + ".csv");

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				tFileExist_10Process(globalMap);

				/**
				 * [tJava_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileExist_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_10 begin ] start
				 */

				ok_Hash.put("tFileExist_10", false);
				start_Hash.put("tFileExist_10", System.currentTimeMillis());

				currentComponent = "tFileExist_10";

				int tos_count_tFileExist_10 = 0;

				/**
				 * [tFileExist_10 begin ] stop
				 */

				/**
				 * [tFileExist_10 main ] start
				 */

				currentComponent = "tFileExist_10";

				java.io.File file_tFileExist_10 = new java.io.File(
						context.etlinterfacefolder + "/"
								+ context.getProperty("uosfolder") + "/"
								+ context.getProperty("uosfile"));
				if (!file_tFileExist_10.exists()) {
					globalMap.put("tFileExist_10_EXISTS", false);
				} else {
					globalMap.put("tFileExist_10_EXISTS", true);
				}

				globalMap.put(
						"tFileExist_10_FILENAME",
						context.etlinterfacefolder + "/"
								+ context.getProperty("uosfolder") + "/"
								+ context.getProperty("uosfile"));

				tos_count_tFileExist_10++;

				/**
				 * [tFileExist_10 main ] stop
				 */

				/**
				 * [tFileExist_10 end ] start
				 */

				currentComponent = "tFileExist_10";

				ok_Hash.put("tFileExist_10", true);
				end_Hash.put("tFileExist_10", System.currentTimeMillis());

				if ((globalMap.get("tFileExist_10_EXISTS") != null) &&

				((Boolean) globalMap.get("tFileExist_10_EXISTS"))) {

					tFileCopy_1Process(globalMap);
				}

				/**
				 * [tFileExist_10 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_10 finally ] start
				 */

				currentComponent = "tFileExist_10";

				/**
				 * [tFileExist_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_10_SUBPROCESS_STATE", 1);
	}

	public void tFileCopy_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileCopy_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileCopy_1 begin ] start
				 */

				ok_Hash.put("tFileCopy_1", false);
				start_Hash.put("tFileCopy_1", System.currentTimeMillis());

				currentComponent = "tFileCopy_1";

				int tos_count_tFileCopy_1 = 0;

				/**
				 * [tFileCopy_1 begin ] stop
				 */

				/**
				 * [tFileCopy_1 main ] start
				 */

				currentComponent = "tFileCopy_1";

				String srcFileName_tFileCopy_1 = context.etlinterfacefolder
						+ "/" + context.getProperty("uosfolder") + "/"
						+ context.getProperty("uosfile");

				java.io.File srcFile_tFileCopy_1 = new java.io.File(
						srcFileName_tFileCopy_1);

				// here need check first, before mkdirs().
				if (!srcFile_tFileCopy_1.exists()
						|| !srcFile_tFileCopy_1.isFile()) {
					throw new RuntimeException("The source File \""
							+ srcFileName_tFileCopy_1
							+ "\" does not exist or is not a file.");
				}

				String desDirName_tFileCopy_1 = context.etlinterfacefolder
						+ "/" + context.getProperty("uosarchivefolder");

				String desFileName_tFileCopy_1 = context
						.getProperty("timestampedfilename_archive");

				if (desFileName_tFileCopy_1 != null
						&& ("").equals(desFileName_tFileCopy_1.trim())) {
					desFileName_tFileCopy_1 = "NewName.temp";
				}

				java.io.File desFile_tFileCopy_1 = new java.io.File(
						desDirName_tFileCopy_1, desFileName_tFileCopy_1);

				if (!srcFile_tFileCopy_1.getPath().equals(
						desFile_tFileCopy_1.getPath())) {
					java.io.File parentFile_tFileCopy_1 = desFile_tFileCopy_1
							.getParentFile();

					if (parentFile_tFileCopy_1 != null
							&& !parentFile_tFileCopy_1.exists()) {
						parentFile_tFileCopy_1.mkdirs();
					}
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_1.getPath(),
							desFile_tFileCopy_1.getPath(), true);
					java.io.File isRemoved_tFileCopy_1 = new java.io.File(
							context.etlinterfacefolder + "/"
									+ context.getProperty("uosfolder") + "/"
									+ context.getProperty("uosfile"));
					if (isRemoved_tFileCopy_1.exists()) {
						System.err
								.println("The source file could not be removed from the folder because it is open or you only have read-only rights.\n");
					}

				}
				globalMap.put("tFileCopy_1_DESTINATION_FILEPATH",
						desFile_tFileCopy_1.getPath());
				globalMap.put("tFileCopy_1_DESTINATION_FILENAME",
						desFile_tFileCopy_1.getName());

				globalMap.put("tFileCopy_1_SOURCE_DIRECTORY",
						srcFile_tFileCopy_1.getParent());
				globalMap.put("tFileCopy_1_DESTINATION_DIRECTORY",
						desFile_tFileCopy_1.getParent());

				tos_count_tFileCopy_1++;

				/**
				 * [tFileCopy_1 main ] stop
				 */

				/**
				 * [tFileCopy_1 end ] start
				 */

				currentComponent = "tFileCopy_1";

				ok_Hash.put("tFileCopy_1", true);
				end_Hash.put("tFileCopy_1", System.currentTimeMillis());

				/**
				 * [tFileCopy_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileCopy_1 finally ] start
				 */

				currentComponent = "tFileCopy_1";

				/**
				 * [tFileCopy_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileCopy_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_13Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_13 begin ] start
				 */

				ok_Hash.put("tJava_13", false);
				start_Hash.put("tJava_13", System.currentTimeMillis());

				currentComponent = "tJava_13";

				int tos_count_tJava_13 = 0;

				((Logger) globalMap.get("LOGGER"))
						.error("error could not move file to archive - file may not exists");

				/**
				 * [tJava_13 begin ] stop
				 */

				/**
				 * [tJava_13 main ] start
				 */

				currentComponent = "tJava_13";

				tos_count_tJava_13++;

				/**
				 * [tJava_13 main ] stop
				 */

				/**
				 * [tJava_13 end ] start
				 */

				currentComponent = "tJava_13";

				ok_Hash.put("tJava_13", true);
				end_Hash.put("tJava_13", System.currentTimeMillis());

				/**
				 * [tJava_13 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_13 finally ] start
				 */

				currentComponent = "tJava_13";

				/**
				 * [tJava_13 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_13_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_3 begin ] start
				 */

				ok_Hash.put("tFileDelete_3", false);
				start_Hash.put("tFileDelete_3", System.currentTimeMillis());

				currentComponent = "tFileDelete_3";

				int tos_count_tFileDelete_3 = 0;

				/**
				 * [tFileDelete_3 begin ] stop
				 */

				/**
				 * [tFileDelete_3 main ] start
				 */

				currentComponent = "tFileDelete_3";

				class DeleteFoldertFileDelete_3 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File path_tFileDelete_3 = new java.io.File(
						context.etlinterfacefolder + "/"
								+ context.getProperty("uosfolder") + "/tmp");
				if (path_tFileDelete_3.exists()) {
					if (path_tFileDelete_3.isFile()) {
						if (path_tFileDelete_3.delete()) {
							globalMap.put("tFileDelete_3_CURRENT_STATUS",
									"File deleted.");
						} else {
							globalMap.put("tFileDelete_3_CURRENT_STATUS",
									"No file deleted.");
						}
					} else if (path_tFileDelete_3.isDirectory()) {
						DeleteFoldertFileDelete_3 dftFileDelete_3 = new DeleteFoldertFileDelete_3();
						if (dftFileDelete_3.delete(path_tFileDelete_3)) {
							globalMap.put("tFileDelete_3_CURRENT_STATUS",
									"Path deleted.");
						} else {
							globalMap.put("tFileDelete_3_CURRENT_STATUS",
									"No path deleted.");
						}
					}
				} else {
					globalMap.put("tFileDelete_3_CURRENT_STATUS",
							"File or path does not exist or is invalid.");
				}
				globalMap.put(
						"tFileDelete_3_DELETE_PATH",
						context.etlinterfacefolder + "/"
								+ context.getProperty("uosfolder") + "/tmp");

				tos_count_tFileDelete_3++;

				/**
				 * [tFileDelete_3 main ] stop
				 */

				/**
				 * [tFileDelete_3 end ] start
				 */

				currentComponent = "tFileDelete_3";

				ok_Hash.put("tFileDelete_3", true);
				end_Hash.put("tFileDelete_3", System.currentTimeMillis());

				/**
				 * [tFileDelete_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_3 finally ] start
				 */

				currentComponent = "tFileDelete_3";

				/**
				 * [tFileDelete_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_3_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					row8.type = lcm.getType();
					row8.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row8.priority = lcm.getPriority();
					row8.message = lcm.getMessage();
					row8.code = lcm.getCode();

					row8.moment = java.util.Calendar.getInstance().getTime();

					row8.pid = pid;
					row8.root_pid = rootPid;
					row8.father_pid = fatherPid;

					row8.project = projectName;
					row8.job = jobName;
					row8.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tJavaRow_2 main ] start
					 */

					currentComponent = "tJavaRow_2";

					if (row8.origin.equals("tDie_3")) {
						globalMap.put("removelockfile", "false");
						((Logger) globalMap.get("LOGGER"))
								.error("Could not load properties file : "
										+ context.propertiesfolder
										+ "/updateorderstatus/"
										+ context
												.getProperty("updateorderstatus.propertyfilename"));
					}

					// if another job is running
					if (row8.origin.equals("tDie_2")) {
						globalMap.put("removelockfile", "false");
						globalMap.put("sendemail", "true");
						globalMap.put("jobname", "updateOrderStatus");
						globalMap
								.put("subject",
										"updateOrderStatus -- Another job is already running");
						globalMap
								.put("message",
										"updateOrderStatus -- Another job is already running");
						((Logger) globalMap.get("LOGGER"))
								.error("Another job is running ... exiting");
					}

					// Cannot connect to ftp
					if (row8.origin.equals("tDie_6")) {
						globalMap.put("removelockfile", "true");
						globalMap.put("sendemail", "true");
						globalMap.put("jobname", "updateOrderStatus");
						globalMap.put("subject",
								"updateOrderStatus - FTP connection Failure");
						globalMap.put("message", "can't connect to ftp "
								+ context.getProperty("sftphost"));
						((Logger) globalMap.get("LOGGER"))
								.error("can't connect to ftp "
										+ context.getProperty("sftphost")
										+ " ... exiting");
					}

					// Cannot remove the source file from sftp
					if (row8.origin.equals("tDie_7")) {
						globalMap.put("removelockfile", "true");
						globalMap.put("sendemail", "true");
						globalMap.put("jobname", "updateOrderStatus");
						globalMap
								.put("subject",
										"updateOrderStatus - cannot remove source file from sftp server");
						globalMap.put("message", "can't connect to ftp "
								+ context.getProperty("sftphost"));
						((Logger) globalMap.get("LOGGER"))
								.error("can't remove ftp file "
										+ context.getProperty("sftpfolder")
										+ context.getProperty("uosfolder")
										+ "/"
										+ ((String) context
												.getProperty("uosfile")));
					}

					((Logger) globalMap.get("LOGGER"))
							.info("Job failed with error... ");
					((Logger) globalMap.get("LOGGER")).info(row8.code);
					((Logger) globalMap.get("LOGGER")).info(row8.message);

					nb_line_tJavaRow_2++;

					tos_count_tJavaRow_2++;

					/**
					 * [tJavaRow_2 main ] stop
					 */

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if ((globalMap.get("removelockfile") != null && globalMap.get(
						"removelockfile").equals("true"))) {

					tFileDelete_2Process(globalMap);
				}

				if ((globalMap.get("sendemail") != null && globalMap.get(
						"sendemail").equals("true"))) {

					tRunJob_1Process(globalMap);
				}

				/**
				 * [tJavaRow_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_2 begin ] start
				 */

				ok_Hash.put("tFileDelete_2", false);
				start_Hash.put("tFileDelete_2", System.currentTimeMillis());

				currentComponent = "tFileDelete_2";

				int tos_count_tFileDelete_2 = 0;

				/**
				 * [tFileDelete_2 begin ] stop
				 */

				/**
				 * [tFileDelete_2 main ] start
				 */

				currentComponent = "tFileDelete_2";

				class DeleteFoldertFileDelete_2 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_2 = new java.io.File(
						context.etlinterfacefolder + "/"
								+ context.getProperty("uosfolder")
								+ "/job.updateorderstatus.lock");
				if (file_tFileDelete_2.exists() && file_tFileDelete_2.isFile()) {
					if (file_tFileDelete_2.delete()) {
						globalMap.put("tFileDelete_2_CURRENT_STATUS",
								"File deleted.");
					} else {
						globalMap.put("tFileDelete_2_CURRENT_STATUS",
								"No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_2_CURRENT_STATUS",
							"File does not exist or is invalid.");
				}
				globalMap.put(
						"tFileDelete_2_DELETE_PATH",
						context.etlinterfacefolder + "/"
								+ context.getProperty("uosfolder")
								+ "/job.updateorderstatus.lock");

				tos_count_tFileDelete_2++;

				/**
				 * [tFileDelete_2 main ] stop
				 */

				/**
				 * [tFileDelete_2 end ] start
				 */

				currentComponent = "tFileDelete_2";

				ok_Hash.put("tFileDelete_2", true);
				end_Hash.put("tFileDelete_2", System.currentTimeMillis());

				/**
				 * [tFileDelete_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_2 finally ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				paraList_tRunJob_1.add("--father_pid=" + pid);

				paraList_tRunJob_1.add("--root_pid=" + rootPid);

				paraList_tRunJob_1.add("--father_node=tRunJob_1");

				paraList_tRunJob_1.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_1.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
						&& childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_1 = null;

				obj_tRunJob_1 = globalMap.get("jobname");
				paraList_tRunJob_1.add("--context_param jobname="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				parentContextMap_tRunJob_1.put("jobname", obj_tRunJob_1);

				obj_tRunJob_1 = globalMap.get("subject");
				paraList_tRunJob_1.add("--context_param subject="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				parentContextMap_tRunJob_1.put("subject", obj_tRunJob_1);

				obj_tRunJob_1 = globalMap.get("message");
				paraList_tRunJob_1.add("--context_param message="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				parentContextMap_tRunJob_1.put("message", obj_tRunJob_1);

				obj_tRunJob_1 = context.getProperty("emailaddress");
				paraList_tRunJob_1.add("--context_param emailaddress="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				parentContextMap_tRunJob_1.put("emailaddress", obj_tRunJob_1);

				local_project.sendemail_0_1.SendEmail childJob_tRunJob_1 = new local_project.sendemail_0_1.SendEmail();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_1) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
							.entrySet()) {
						dataSources_tRunJob_1.put(
								talendDataSourceEntry_tRunJob_1.getKey(),
								talendDataSourceEntry_tRunJob_1.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
				}

				childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

				String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
						.runJob((String[]) paraList_tRunJob_1
								.toArray(new String[paraList_tRunJob_1.size()]));

				errorCode = childJob_tRunJob_1.getErrorCode();

				if (childJob_tRunJob_1.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_1
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getErrorCode());
				}
				if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_1.getExceptionStackTrace());
				}

				if (childJob_tRunJob_1.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_1.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tJavaRow_12 begin ] start
				 */

				ok_Hash.put("tJavaRow_12", false);
				start_Hash.put("tJavaRow_12", System.currentTimeMillis());

				currentComponent = "tJavaRow_12";

				int tos_count_tJavaRow_12 = 0;

				int nb_line_tJavaRow_12 = 0;

				/**
				 * [tJavaRow_12 begin ] stop
				 */

				/**
				 * [tLogCatcher_2 begin ] start
				 */

				ok_Hash.put("tLogCatcher_2", false);
				start_Hash.put("tLogCatcher_2", System.currentTimeMillis());

				currentComponent = "tLogCatcher_2";

				int tos_count_tLogCatcher_2 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_2
						.getMessages()) {
					row9.type = lcm.getType();
					row9.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row9.priority = lcm.getPriority();
					row9.message = lcm.getMessage();
					row9.code = lcm.getCode();

					row9.moment = java.util.Calendar.getInstance().getTime();

					row9.pid = pid;
					row9.root_pid = rootPid;
					row9.father_pid = fatherPid;

					row9.project = projectName;
					row9.job = jobName;
					row9.context = contextStr;

					/**
					 * [tLogCatcher_2 begin ] stop
					 */

					/**
					 * [tLogCatcher_2 main ] start
					 */

					currentComponent = "tLogCatcher_2";

					tos_count_tLogCatcher_2++;

					/**
					 * [tLogCatcher_2 main ] stop
					 */

					/**
					 * [tJavaRow_12 main ] start
					 */

					currentComponent = "tJavaRow_12";

					((Logger) globalMap.get("LOGGER")).debug(row9.code);
					((Logger) globalMap.get("LOGGER")).debug(row9.message);

					// globalMap.put("warnings",true);
					nb_line_tJavaRow_12++;

					tos_count_tJavaRow_12++;

					/**
					 * [tJavaRow_12 main ] stop
					 */

					/**
					 * [tLogCatcher_2 end ] start
					 */

					currentComponent = "tLogCatcher_2";

				}

				ok_Hash.put("tLogCatcher_2", true);
				end_Hash.put("tLogCatcher_2", System.currentTimeMillis());

				/**
				 * [tLogCatcher_2 end ] stop
				 */

				/**
				 * [tJavaRow_12 end ] start
				 */

				currentComponent = "tJavaRow_12";

				globalMap.put("tJavaRow_12_NB_LINE", nb_line_tJavaRow_12);

				ok_Hash.put("tJavaRow_12", true);
				end_Hash.put("tJavaRow_12", System.currentTimeMillis());

				/**
				 * [tJavaRow_12 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_2 finally ] start
				 */

				currentComponent = "tLogCatcher_2";

				/**
				 * [tLogCatcher_2 finally ] stop
				 */

				/**
				 * [tJavaRow_12 finally ] start
				 */

				currentComponent = "tJavaRow_12";

				/**
				 * [tJavaRow_12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_2_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_LOGSStruct implements
			routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_UpdateOrderStatus.length == 0) {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_UpdateOrderStatus,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_UpdateOrderStatus, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_UpdateOrderStatus) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();

				/**
				 * [talendLogs_FILE begin ] start
				 */

				ok_Hash.put("talendLogs_FILE", false);
				start_Hash.put("talendLogs_FILE", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_FILE";

				currentComponent = "talendLogs_FILE";

				int tos_count_talendLogs_FILE = 0;

				String fileName_talendLogs_FILE = "";
				fileName_talendLogs_FILE = (new java.io.File(context.etlroot
						+ "/logs" + "/" + "updateorderstatus.log"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_talendLogs_FILE = null;
				String extension_talendLogs_FILE = null;
				String directory_talendLogs_FILE = null;
				if ((fileName_talendLogs_FILE.indexOf("/") != -1)) {
					if (fileName_talendLogs_FILE.lastIndexOf(".") < fileName_talendLogs_FILE
							.lastIndexOf("/")) {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE;
						extension_talendLogs_FILE = "";
					} else {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(0, fileName_talendLogs_FILE
										.lastIndexOf("."));
						extension_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(fileName_talendLogs_FILE
										.lastIndexOf("."));
					}
					directory_talendLogs_FILE = fileName_talendLogs_FILE
							.substring(0,
									fileName_talendLogs_FILE.lastIndexOf("/"));
				} else {
					if (fileName_talendLogs_FILE.lastIndexOf(".") != -1) {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(0, fileName_talendLogs_FILE
										.lastIndexOf("."));
						extension_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(fileName_talendLogs_FILE
										.lastIndexOf("."));
					} else {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE;
						extension_talendLogs_FILE = "";
					}
					directory_talendLogs_FILE = "";
				}
				boolean isFileGenerated_talendLogs_FILE = true;
				java.io.File filetalendLogs_FILE = new java.io.File(
						fileName_talendLogs_FILE);
				globalMap.put("talendLogs_FILE_FILE_NAME",
						fileName_talendLogs_FILE);
				if (filetalendLogs_FILE.exists()) {
					isFileGenerated_talendLogs_FILE = false;
				}
				int nb_line_talendLogs_FILE = 0;
				int splitEvery_talendLogs_FILE = 1000;
				int splitedFileNo_talendLogs_FILE = 0;
				int currentRow_talendLogs_FILE = 0;

				final String OUT_DELIM_talendLogs_FILE = /**
				 * Start field
				 * talendLogs_FILE:FIELDSEPARATOR
				 */
				";"/** End field talendLogs_FILE:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_talendLogs_FILE = /**
				 * Start field
				 * talendLogs_FILE:ROWSEPARATOR
				 */
				"\n"/** End field talendLogs_FILE:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_talendLogs_FILE != null
						&& directory_talendLogs_FILE.trim().length() != 0) {
					java.io.File dir_talendLogs_FILE = new java.io.File(
							directory_talendLogs_FILE);
					if (!dir_talendLogs_FILE.exists()) {
						dir_talendLogs_FILE.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtalendLogs_FILE = null;

				outtalendLogs_FILE = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_talendLogs_FILE, true),
								"UTF-8"));

				resourceMap.put("out_talendLogs_FILE", outtalendLogs_FILE);
				resourceMap.put("nb_line_talendLogs_FILE",
						nb_line_talendLogs_FILE);

				/**
				 * [talendLogs_FILE begin ] stop
				 */

				/**
				 * [talendLogs_LOGS begin ] start
				 */

				ok_Hash.put("talendLogs_LOGS", false);
				start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				int tos_count_talendLogs_LOGS = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS
						.getMessages()) {
					row_talendLogs_LOGS.type = lcm.getType();
					row_talendLogs_LOGS.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row_talendLogs_LOGS.priority = lcm.getPriority();
					row_talendLogs_LOGS.message = lcm.getMessage();
					row_talendLogs_LOGS.code = lcm.getCode();

					row_talendLogs_LOGS.moment = java.util.Calendar
							.getInstance().getTime();

					row_talendLogs_LOGS.pid = pid;
					row_talendLogs_LOGS.root_pid = rootPid;
					row_talendLogs_LOGS.father_pid = fatherPid;

					row_talendLogs_LOGS.project = projectName;
					row_talendLogs_LOGS.job = jobName;
					row_talendLogs_LOGS.context = contextStr;

					/**
					 * [talendLogs_LOGS begin ] stop
					 */

					/**
					 * [talendLogs_LOGS main ] start
					 */

					currentVirtualComponent = "talendLogs_LOGS";

					currentComponent = "talendLogs_LOGS";

					tos_count_talendLogs_LOGS++;

					/**
					 * [talendLogs_LOGS main ] stop
					 */

					/**
					 * [talendLogs_FILE main ] start
					 */

					currentVirtualComponent = "talendLogs_FILE";

					currentComponent = "talendLogs_FILE";

					StringBuilder sb_talendLogs_FILE = new StringBuilder();
					if (row_talendLogs_LOGS.moment != null) {
						sb_talendLogs_FILE.append(FormatterUtils.format_Date(
								row_talendLogs_LOGS.moment,
								"yyyy-MM-dd HH:mm:ss"));
					}
					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
					if (row_talendLogs_LOGS.pid != null) {
						sb_talendLogs_FILE.append(row_talendLogs_LOGS.pid);
					}
					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
					if (row_talendLogs_LOGS.root_pid != null) {
						sb_talendLogs_FILE.append(row_talendLogs_LOGS.root_pid);
					}
					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
					if (row_talendLogs_LOGS.father_pid != null) {
						sb_talendLogs_FILE
								.append(row_talendLogs_LOGS.father_pid);
					}
					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
					if (row_talendLogs_LOGS.project != null) {
						sb_talendLogs_FILE.append(row_talendLogs_LOGS.project);
					}
					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
					if (row_talendLogs_LOGS.job != null) {
						sb_talendLogs_FILE.append(row_talendLogs_LOGS.job);
					}
					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
					if (row_talendLogs_LOGS.context != null) {
						sb_talendLogs_FILE.append(row_talendLogs_LOGS.context);
					}
					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
					if (row_talendLogs_LOGS.priority != null) {
						sb_talendLogs_FILE.append(row_talendLogs_LOGS.priority);
					}
					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
					if (row_talendLogs_LOGS.type != null) {
						sb_talendLogs_FILE.append(row_talendLogs_LOGS.type);
					}
					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
					if (row_talendLogs_LOGS.origin != null) {
						sb_talendLogs_FILE.append(row_talendLogs_LOGS.origin);
					}
					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
					if (row_talendLogs_LOGS.message != null) {
						sb_talendLogs_FILE.append(row_talendLogs_LOGS.message);
					}
					sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
					if (row_talendLogs_LOGS.code != null) {
						sb_talendLogs_FILE.append(row_talendLogs_LOGS.code);
					}
					sb_talendLogs_FILE.append(OUT_DELIM_ROWSEP_talendLogs_FILE);

					nb_line_talendLogs_FILE++;
					resourceMap.put("nb_line_talendLogs_FILE",
							nb_line_talendLogs_FILE);

					outtalendLogs_FILE.write(sb_talendLogs_FILE.toString());

					tos_count_talendLogs_FILE++;

					/**
					 * [talendLogs_FILE main ] stop
					 */

					/**
					 * [talendLogs_LOGS end ] start
					 */

					currentVirtualComponent = "talendLogs_LOGS";

					currentComponent = "talendLogs_LOGS";

				}

				ok_Hash.put("talendLogs_LOGS", true);
				end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				/**
				 * [talendLogs_LOGS end ] stop
				 */

				/**
				 * [talendLogs_FILE end ] start
				 */

				currentVirtualComponent = "talendLogs_FILE";

				currentComponent = "talendLogs_FILE";

				if (outtalendLogs_FILE != null) {
					outtalendLogs_FILE.flush();
					outtalendLogs_FILE.close();
				}

				globalMap.put("talendLogs_FILE_NB_LINE",
						nb_line_talendLogs_FILE);
				globalMap.put("talendLogs_FILE_FILE_NAME",
						fileName_talendLogs_FILE);

				resourceMap.put("finish_talendLogs_FILE", true);

				ok_Hash.put("talendLogs_FILE", true);
				end_Hash.put("talendLogs_FILE", System.currentTimeMillis());

				/**
				 * [talendLogs_FILE end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [talendLogs_LOGS finally ] start
				 */

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				/**
				 * [talendLogs_LOGS finally ] stop
				 */

				/**
				 * [talendLogs_FILE finally ] start
				 */

				currentVirtualComponent = "talendLogs_FILE";

				currentComponent = "talendLogs_FILE";

				if (resourceMap.get("finish_talendLogs_FILE") == null) {

					java.io.Writer outtalendLogs_FILE = (java.io.Writer) resourceMap
							.get("out_talendLogs_FILE");
					if (outtalendLogs_FILE != null) {
						outtalendLogs_FILE.flush();
						outtalendLogs_FILE.close();
					}

				}

				/**
				 * [talendLogs_FILE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "linux";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final UpdateOrderStatus UpdateOrderStatusClass = new UpdateOrderStatus();

		int exitCode = UpdateOrderStatusClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = UpdateOrderStatus.class
					.getClassLoader().getResourceAsStream(
							"local_project/updateorderstatus_0_5/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.etlinterfacefolder = (String) context
					.getProperty("etlinterfacefolder");
			context.etlroot = (String) context.getProperty("etlroot");
			context.mediationfolder = (String) context
					.getProperty("mediationfolder");
			context.propertiesfolder = (String) context
					.getProperty("propertiesfolder");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("etlinterfacefolder")) {
				context.etlinterfacefolder = (String) parentContextMap
						.get("etlinterfacefolder");
			}
			if (parentContextMap.containsKey("etlroot")) {
				context.etlroot = (String) parentContextMap.get("etlroot");
			}
			if (parentContextMap.containsKey("mediationfolder")) {
				context.mediationfolder = (String) parentContextMap
						.get("mediationfolder");
			}
			if (parentContextMap.containsKey("propertiesfolder")) {
				context.propertiesfolder = (String) parentContextMap
						.get("propertiesfolder");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tSOAP_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tSOAP_1) {
			globalMap.put("tSOAP_1_SUBPROCESS_STATE", -1);

			e_tSOAP_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : UpdateOrderStatus");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeFtpConnections();

	}

	private void closeFtpConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tFTPConnection_1");
			if (obj_conn != null) {
				((com.jcraft.jsch.ChannelSftp) obj_conn).quit();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		connections.put("conn_tFTPConnection_1",
				globalMap.get("conn_tFTPConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 594328 characters generated by Talend Open Studio for Data Integration on the
 * 29 October 2015 17:40:56 CST
 ************************************************************************************************/
